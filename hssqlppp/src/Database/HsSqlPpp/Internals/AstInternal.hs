

{-# LANGUAGE TupleSections,ScopedTypeVariables,DeriveDataTypeable,OverloadedStrings #-}
-- UUAGC 0.9.52.1 (hssqlppp/src/Database/HsSqlPpp/Internals/AstInterna)
module Database.HsSqlPpp.Internals.AstInternal(
    --from the ag files:
    --ast nodes
    Statement (..)
   ,QueryExpr (..)
   ,WithQueryList
   ,WithQuery(..)
   ,FnBody (..)
   ,SetClause (..)
   ,SetClauseList
   ,TableRef (..)
   ,JoinExpr (..)
   ,JoinType (..)
   ,JoinHint (..)
   ,SelectList (..)
   ,SelectItem (..)
   ,CopyFromSource (..)
   ,CopyToSource(..)
   ,CopyOption(..)
   ,TablePartitionDef(..)
   ,TablePartitionDateTimeInterval(..)
   ,AttributeDef (..)
   ,RowConstraint (..)
   ,AlterDatabaseOperation(..)
   ,AlterTableOperation(..)
   ,AlterTableAction(..)
   ,AlterColumnAction(..)
   ,AlterSchemaOperation(..)
   ,Constraint (..)
   ,TypeAttributeDef (..)
   ,ParamDef (..)
   ,VarDef (..)
   ,RaiseType (..)
   ,CombineType (..)
   ,Volatility (..)
   ,Language (..)
   ,TypeName (..)
   ,DropType (..)
   ,Cascade (..)
   ,Direction (..)
   ,Distinct (..)
   ,NullsOrder(..)
   ,Natural (..)
   ,IfExists (..)
   ,Replace(..)
   ,RestartIdentity (..)
   ,ScalarExpr (..)
   ,Name(..)
   ,nameComponents
   ,NameComponent(..)
   ,ncStr
   ,IntervalField(..)
   ,ExtractField(..)
   ,FrameClause(..)
   ,OdbcLiteralType(..)
   ,InList (..)
   ,LiftFlavour(..)
   ,TriggerWhen(..)
   ,TriggerEvent(..)
   ,TriggerFire(..)
   ,QueryHint(..)
   ,StatementList
   ,ScalarExprListStatementListTripleList
   ,ScalarExprListStatementListTriple
   ,ScalarExprList
   ,ParamDefList
   ,AttributeDefList
   ,ConstraintList
   ,TypeAttributeDefList
   ,TypeNameList
   ,NameTypeNameListPair
   ,NameTypeNameListPairList
   ,ScalarExprStatementListPairList
   --,SetClauseList
   ,CaseScalarExprListScalarExprPairList
   ,MaybeScalarExpr
   ,TableRefList
   ,ScalarExprListList
   ,SelectItemList
   ,OnExpr
   ,RowConstraintList
   ,VarDefList
   ,ScalarExprStatementListPair
   ,CaseScalarExprListScalarExprPair
   ,ScalarExprDirectionPair
   ,ScalarExprDirectionPairList
   ,MaybeBoolExpr
   ,MaybeSelectList
   ,SetValue(..)
   ,AlterTableActionList
   ,NameComponentList
   ,MaybeNameComponentList
   -- typechecking
   ,typeCheckStatements
   --,typeCheckParameterizedStatement
   ,typeCheckScalarExpr
   --,typeCheckScalarExprEnv
   ,typeCheckQueryExpr
   ,TypeCheckFlags(..)
   ,addExplicitCasts
   ,addImplicitCasts
   -- annotation
   ,Annotation(..)
   --,TypeExtra(..)
   ,SourcePosition
   ,ParameterizedStatementType
   ,getAnnotation
   ,updateAnnotation
   ,emptyAnnotation
   ,makeSelect
   --,canonicalizeTypeNames
) where

--import Data.Maybe
--import Data.Either
--import Data.List
--import Control.Applicative
import Data.Data
--import Data.Char
--import Control.Monad.State
--import Control.Arrow

import Data.Generics
import Data.Generics.Uniplate.Data
--import Debug.Trace
--import Text.Show.Pretty


--import Database.HsSqlPpp.Internals.TypesInternal

--import Database.HsSqlPpp.Internals.TypeChecking.TypeConversion
--import Database.HsSqlPpp.Internals.TypeChecking.Environment hiding (JoinType(..))

--import Database.HsSqlPpp.Internals.Catalog.CatalogInternal (NameComponent(..),ncStr)

--import Database.HsSqlPpp.Utils.Utils
--import Database.HsSqlPpp.Internals.Dialect
--import Data.Text (Text)
import qualified Data.Text as T
--import qualified Data.Text.Lazy as LT

-- very bad, we use types in the syntax outside of the already exception
-- in the annotation (which can be removed when the annotation type
-- becomes a type parameters
-- can replace the use of type extra with (typename,int,int) triple
-- to fix this
--import Database.HsSqlPpp.Internals.TypesInternal (TypeExtra)



{-# LINE 2 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}

import Data.Text (Text)
import qualified Database.HsSqlPpp.Internals.TypeChecking.Environment as E
import Database.HsSqlPpp.Internals.TypeChecking.Environment (Environment)
import Database.HsSqlPpp.Internals.TypesInternal
import Database.HsSqlPpp.Internals.Dialect
import Database.HsSqlPpp.Internals.Catalog.CatalogInternal
import Database.HsSqlPpp.Internals.Catalog.CatalogTypes
import Database.HsSqlPpp.Internals.TypeChecking.TypeConversion.TypeConversion

-- todo: find a better way to do this, this information should come
-- via the dialect or catalog in the attributes
import Database.HsSqlPpp.Dialects.OdbcCatalog

import Control.Monad
import Data.List
import Data.Maybe
import Data.Char
import Text.Read
import Control.Applicative()
{-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 14 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}

import qualified Database.HsSqlPpp.Internals.TypesInternal as T
import qualified Database.HsSqlPpp.Internals.Catalog.CatalogTypes as C

{-# LINE 184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
{-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}

-- todo: replace the other nmcString function with this one
-- which uses either instead of error
xnmcString :: NameComponent -> Either [TypeError] Text
xnmcString (QNmc n) = Right $ T.pack n
xnmcString (Nmc n) = Right $ T.pack $ map toLower n
xnmcString (AntiNameComponent _) = Left [InternalError "tried to get nmc string from antinamecomponent"]
{-# LINE 193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}

splitTypeExtraList:: Maybe [TypeExtra] -> Maybe (TypeExtra,[TypeExtra])
splitTypeExtraList mte = mte >>= f
  where
    f [] = Nothing
    f (et:ets') = Just (et,ets')
{-# LINE 202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 212 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}


-- | thet name to choose for a column in a select list which doesn't
-- have an explicit name - these are postgresql's rules
columnName :: ScalarExpr -> NameComponent
columnName (Identifier _ i) = last $ nameComponents i
columnName (App _ (Name _ ncs) _) = last ncs
columnName (Cast _ _ (SimpleTypeName _ (Name _ ncs))) = last ncs
columnName (ImplicitCast _ e _) = columnName e
columnName (WindowApp _ (App _ (Name _ ncs) _) _ _ _) = last ncs
columnName (AggregateApp _ _ (App _ (Name _ ncs) _) _) = last ncs
columnName _ = QNmc "?column?"
{-# LINE 217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 160 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}

convertJoinType:: JoinType -> E.JoinType
convertJoinType LeftOuter = E.LeftOuter
convertJoinType RightOuter = E.RightOuter
convertJoinType FullOuter = E.FullOuter
convertJoinType _ = E.Inner
{-# LINE 226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 47 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

needsImplicitCast:: Bool -> TypeExtra -> TypeExtra -> Bool
needsImplicitCast expectedCast upType expType
    = tePrecision upType /= tePrecision expType
      || teScale upType /= teScale expType
      || teNullable upType /= teNullable expType
          && nullabilityCast
      ||  teType upType /= teType expType
          && (not . null) (nub [teType upType, teType expType] \\ [ScalarType "varchar", ScalarType "text"])
  where
    nullabilityCast = expectedCast
-- this function appeared because nullability does not always influence the type to cast to
implicitCastType:: Bool -> TypeExtra -> TypeExtra -> TypeExtra
implicitCastType expectedCast upType expType
    = expType{tePrecision = precision, teScale = scale, teNullable = nullability}
  where
    nullabilityCast = expectedCast
    nullabilitySource = if nullabilityCast then expType else upType
    precisionSource = expType
    nullability = teNullable nullabilitySource
    precision = tePrecision precisionSource
    scale = teScale precisionSource
{-# LINE 251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 512 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

getMaybeIntsFromLiterals :: [ScalarExpr] -> MatchAppLiteralList
getMaybeIntsFromLiterals sel = map extractor sel
  where
   extractor :: ScalarExpr -> Maybe Int
   extractor (NumberLit _ s) = readMaybe s :: Maybe Int
   extractor _ = Nothing
{-# LINE 261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 792 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

classifyInteger :: Dialect -> String -> Either [TypeError] Text
classifyInteger d s = maybe (Left []) Right $ case (readMaybe s :: Maybe Integer) of
                      -- assuming number literals are always positive
                      Just n | n < (2 ^ (31 :: Integer)) -> ansiTypeNameToDialect d "int"
                             | n < (2 ^ (63 :: Integer)) -> ansiTypeNameToDialect d "bigint"
                      _ -> ansiTypeNameToDialect d "numeric"
{-# LINE 271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}


-- | some options when typechecking
data TypeCheckFlags =
    TypeCheckFlags
    { -- | add qualifiers to unqualified ids where possible
     tcfAddQualifiers :: Bool
     -- | add full aliases to every tableref and subselect
    ,tcfAddFullTablerefAliases :: Bool
     -- | add explicit aliases to all select items
    ,tcfAddSelectItemAliases :: Bool
     -- | expand stars in select lists to explicit list columns
    ,tcfExpandStars :: Bool
    ,tcfDialect :: Dialect}
    deriving (Show,Eq)

-- | Typechecks the ast, and returns the updated catalog (which
-- includes changes from any ddl statements in the ast).
typeCheckStatements :: TypeCheckFlags -> Catalog -> [Statement] -> (Catalog,[Statement])
typeCheckStatements f cat sts =
    let t = _sem_Root (Root sts)
        ta = _wrap_Root t Inh_Root {_cat_Inh_Root = cat
                                  ,_flags_Inh_Root = f
                                  {-,_lib_Inh_Root = emptyBindings
                                  ,_idenv_Inh_Root = emptyIDEnv "tcs"-}}
        tl = _annotatedTree_Syn_Root ta
        cat1 = cat --_producedCat_Syn_Root ta
    in case tl of
         Root r -> (cat1,fixTree (tcfDialect f) r)
-- | Typecheck a query expr
typeCheckQueryExpr :: TypeCheckFlags -> Catalog -> QueryExpr -> QueryExpr
typeCheckQueryExpr f cat qe =
   let (_,[QueryStatement _ qe']) = typeCheckStatements f cat [QueryStatement emptyAnnotation qe]
   in qe'

-- | Not working yet. Typechecks a statement possibly containing ?
-- placeholders. These are annotated with the 'inferred type', and the
-- stType annotation on the return value can be used to get this info
-- easily. Returns Left if the statement is not a query,insert,update or delete
-- statement
{-typeCheckParameterizedStatement :: TypeCheckFlags -> Catalog -> Statement -> Either String Statement
typeCheckParameterizedStatement f cat st =
    case st of
      QueryStatement _ _ -> tc
      Insert _ _ _ _ _ -> tc
      Update _ _ _ _ _ _ -> tc
      Delete _ _ _ _ _ -> tc
      _ -> Left "requires select, update, insert or delete statement"
    where
      tc = let tl = typeCheckStatements f cat [st]
           in case tl of
                (_,[st1]) -> Right st1
                _ -> error "impossible happened in typeCheckPS!"
-}
{-
-- | type check a scalar expr
typeCheckScalarExpr :: TypeCheckFlags -> Catalog -> ScalarExpr -> ScalarExpr
typeCheckScalarExpr f cat ex =
    let t = _sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = (_annotatedTree_Syn_ScalarExprRoot
              (_wrap_ScalarExprRoot t Inh_ScalarExprRoot {_cat_Inh_ScalarExprRoot = cat
                                                        ,_flags_Inh_ScalarExprRoot = f
                                                        ,_downEnv_Inh_ScalarExprRoot = E.emptyEnvironment
                                                        {-,_lib_Inh_ScalarExprRoot = emptyBindings
                                                        ,_idenv_Inh_ScalarExprRoot = emptyIDEnv "t
cse"-}}))
    in case rt of
         ScalarExprRoot e -> fixTree e -}

typeCheckScalarExpr ::  TypeCheckFlags -> Catalog -> Environment
                          -> ScalarExpr -> ScalarExpr
typeCheckScalarExpr f cat env ex =
    let t = _sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = _annotatedTree_Syn_ScalarExprRoot
                $ _wrap_ScalarExprRoot t
                    Inh_ScalarExprRoot{_cat_Inh_ScalarExprRoot = cat
                                      ,_flags_Inh_ScalarExprRoot = f
                                      ,_downEnv_Inh_ScalarExprRoot = env}
    in case rt of
         ScalarExprRoot e -> fixTree (tcfDialect f) e

{-# LINE 355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 157 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}


-- | run on a typechecked tree. Finds all the places where an implicit
-- cast has been used in the typechecking and inserts an explicit cast
addExplicitCasts :: Data a => a -> a
addExplicitCasts = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast :: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  t <- anImplicitCast (getAnnotation e)
                  n <- nameOfType $ teType t
                  return $ Cast emptyAnnotation e n
    -- addCast isn't very smart, so remove any unneeded casts
    -- that it has inserted. Only do this when have two
    -- nested casts which cast to the same type, so this
    -- shouldn't cause problems with sane sql
    removeDoubleCasts :: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = case e of
      (Cast a (Cast _ e' t1) t)
         | resetAnnotations t1 == resetAnnotations t -> Cast a e' t
      e' -> e'
    resetAnnotations = transformBi (const emptyAnnotation)
-- | variation of the above, which uses ImplicitCast ctor
addImplicitCasts :: Data a => Catalog -> a -> a
addImplicitCasts cat = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast:: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  te <- anImplicitCast ann'
                  -- ImplicitCastToDo: why anImplicitCast is not Nothing above Star
                  _ <- nameOfType $ teType te -- in order to preserve the old logic
                  -- guard $ isCastable e $ teType te
                  guard $ anType ann' /= Just te
                  return $ ImplicitCast emptyAnnotation e te
      where
        _isCastable:: ScalarExpr -> Type -> Bool
        _isCastable e' to = fromMaybe False $ do
            from <- liftM teType $ anType $ getAnnotation e'
            either  (const $ if from == UnknownType then Just True else Nothing) Just
                    $ catCast cat ImplicitCastContext from to
        ann' = getAnnotation e
    removeDoubleCasts:: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = fst $ accumulateCasts e
    -- For each implicit cast, if there is a sequence of implicit casts right under it,
    --    that remained after bottom-up application of the algorithm being described:
    --  1. Check if there is a type in the sequence (of argument types of implicit casts),
    --      which is implicitly castable to the target type of the current implicit cast,
    --      according to the current catalog.
    --  2. If there is such a type, replace a sequence of casts that starts at this type with
    --      a single cast, and shorten the list of casts to be further investigated (snd of
    --      output type of this function).
    --    2.1. Analyze the list bottom-up, so that the longest possible sequence of casts is
    --      replaced.
    --  3. If there is no such a type, just add the current cast to the list.
    -- Reset the list on a node other than ImplicitCast.
    accumulateCasts:: ScalarExpr -> (ScalarExpr,[(ScalarExpr,Type)])
    accumulateCasts e = case e of
        ImplicitCast a e' te
          ->  let (e1,ets) = accumulateCasts e'
                  eStart = ImplicitCast a e1 te
                  isCastable (_,t) = either (const False) id
                      $ catCast cat ImplicitCastContext t $ teType te
                  f z xs = case dropWhile (not . isCastable) xs of
                      [] -> z
                      xs'@((e'',_):rest) -> f (ImplicitCast a e'' te, xs') rest
              in case anType $ getAnnotation e1 of
                    Nothing -> (eStart,[]) -- cut here (should not happen in practice)
                    Just te1 -> f (eStart, (e1, teType te1):ets) ets
        _ -> (e,[])

nameOfType :: Type -> Maybe TypeName
nameOfType (ScalarType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
-- a hack to support precision cast from string literals
nameOfType UnknownType = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc "unknown"])
nameOfType (DomainType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (EnumType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (NamedCompositeType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType _ = Nothing

-- hack for various fixups
fixTree :: Data a => Dialect -> a -> a
fixTree = fixMssqlDates

{-


disgusting hack to fix up datediff,datepart, convert and other
functions which accept a fixed list of keywords for one or more of the
arguments for sql server: set the type for the first argument to type
in if it is in the acceptable list.

This is really bad. What happens is that the normal typechecker will
check the keyword as an identifier and (usually!) put in unknown
identifier error. Then, when the function is typechecked, it will
ignore the type for this argument. After we've finished, the type
error is replaced with int type here.

The proper fix:

I think a good way to look at these is to consider them fixed enums
which can only accept a literal (and not an enum valued
expression). We set a flag/enum thing in the typecheck environment of
the identifier, so that it can check the identifier fits one of the
valid functions in the identifier itself. Then, there doesn't need to
be a fix here, and typechecking the function should work without a
hack here too. The typechecking of the function itself still needs
some special casing (e.g. for the convert function in odbc (and
similar in regular sql server syntax), the result type depends on the
value of the 'enum'. This can be implemented in a similar way to the
literal ints being passed to the function type checker.

This will be fixed with the rewrite of the findcallmatch/matchapp/a
million different fns for precision and nullability/tcApplike mess.

-}

fixMssqlDates :: Data a => Dialect -> a -> a
fixMssqlDates d = transformBi $ \x -> case x of
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn == "datediff"
    , map toLower tnn `elem` ["hour"] ->
      App aa nm [Identifier (nai ai) tn,a,b]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a]
    | map toLower fn == "datepart"
    , map toLower tnn `elem` dateparts ->
      App aa nm [Identifier (nai ai) tn,a]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn == "dateadd"
    , map toLower tnn `elem` dateparts ->
      App aa nm [Identifier (nai ai) tn,a,b]
  App aa nm@(Name _ [Nmc fn]) [a,Identifier ai tn@(Name _ [Nmc tnn])]
    | map toLower fn == "convert"
    , map toLower tnn `elem` map fst odbcConvertTypes ->
      App aa nm [a,Identifier (nai ai) tn]
  App aa nm@(Name _ [Nmc fn]) (Identifier ai tn@(Name _ [Nmc tnn]):as)
    | map toLower fn `elem` ["timestampadd","timestampdiff"]
    , map toLower tnn `elem` odbcIntervalTypes ->
      App aa nm (Identifier (nai ai) tn:as)
  x' -> x'
  where
      dateparts :: [String]
      dateparts = ["day","dd","d","month","mm","m","year","yyyy"
                  ,"yy","quarter","qq","q","dayofyear","doy","dy","y"
                  ,"weekday","dw","week","ww","wk","hour","hh"
                  ,"minute","mi","n","second","ss","s","millisecond","ms"
                  ,"microsecond","mcs","nanosecond","ns"]
      -- todo: use canonical tsql name for typeInt
      nai ai = ai {anType = (mkTypeExtraNN . ScalarType) <$> ansiTypeNameToDialect d "int"
                  ,anErrs = []}


-- temp utility function

{-canonicalizeType :: Dialect -> Type -> Type
canonicalizeType d (ScalarType t) = ScalarType $ canonicalizeTypeName d t
canonicalizeType _ t = t-}

{-# LINE 515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 20 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}

-- | Represents a source file position, usually set by the parser.
type SourcePosition = (FilePath,Int,Int)

-- | Statement type is used for getting type information for a
-- parameterized statement. The first part is the args that the
-- parameterized statement needs, and the second is the names and types
-- of the output columns. No way to signal that a statement returns
-- exactly one row at the moment
type ParameterizedStatementType = ([T.Type],[(String,T.Type)])

{-# LINE 529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 52 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}


--some simple wrappers around uniplate for internal use. I'm not sure
--which of these are actually used

-- | An annotation value with no information.
emptyAnnotation :: Annotation
emptyAnnotation = Annotation Nothing Nothing [] Nothing []

-- | get the annotation for the root element of the tree passed
getAnnotation :: Data a => a -> Annotation
getAnnotation = head . childrenBi

--don't know how to do this one with uniplate

-- | Update the first annotation in a tree using the function supplied
updateAnnotation :: Data a => (Annotation -> Annotation) -> a -> a
updateAnnotation f = gmapT (mkT f)

{-# LINE 551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

nameComponents :: Name -> [NameComponent]
nameComponents (Name _ is) = is
-- todo: don't use error
nameComponents (AntiName _) = error "tried to get namecomponents of antiname"
{-# LINE 559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}



data LiftFlavour = LiftAny | LiftAll
                   deriving (Show,Eq,Typeable,Data)

data Direction = Asc | Desc
                 deriving (Show,Eq,Typeable,Data)

data NullsOrder = NullsDefault | NullsFirst | NullsLast
                 deriving (Show,Eq,Typeable,Data)

data Distinct = Distinct | All
                deriving (Show,Eq,Typeable,Data)

-- maybe should improve this, since you can have at least union
-- distinct and union all just like select distinct and select all

data CombineType = Except | Union | Intersect | UnionAll
                   deriving (Show,Eq,Typeable,Data)

data IntervalField = IntervalYear
                   | IntervalMonth
                   | IntervalDay
                   | IntervalHour
                   | IntervalMinute
                   | IntervalSecond
                   | IntervalYearToMonth
                   | IntervalDayToHour
                   | IntervalDayToMinute
                   | IntervalDayToSecond
                   | IntervalHourToMinute
                   | IntervalHourToSecond
                   | IntervalMinuteToSecond
                     deriving (Show,Eq,Typeable,Data)

data ExtractField = ExtractCentury
                  | ExtractDay
                  | ExtractDecade
                  | ExtractDow
                  | ExtractDoy
                  | ExtractEpoch
                  | ExtractHour
                  | ExtractIsodow
                  | ExtractIsoyear
                  | ExtractMicroseconds
                  | ExtractMillennium
                  | ExtractMilliseconds
                  | ExtractMinute
                  | ExtractMonth
                  | ExtractQuarter
                  | ExtractSecond
                  | ExtractTimezone
                  | ExtractTimezoneHour
                  | ExtractTimezoneMinute
                  | ExtractWeek
                  | ExtractYear
                    deriving (Show,Eq,Typeable,Data)

-- todo: this needs fixing, it is currently based on limited frame options
data FrameClause = FrameUnboundedPreceding
                 | FrameUnboundedFull
                 | FrameRowsUnboundedPreceding
                   deriving (Show,Eq,Typeable,Data)


data OdbcLiteralType = OLDate
                     | OLTime
                     | OLTimestamp
                       deriving (Show,Eq,Typeable,Data)
{-# LINE 632 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data JoinType = Inner | LeftOuter| RightOuter | FullOuter | Cross
                deriving (Show,Eq,Typeable,Data)
data JoinHint = Loop | Hash | Merge
                deriving (Show,Eq,Typeable,Data)
data Natural = Natural | Unnatural
               deriving (Show,Eq,Typeable,Data)
{-# LINE 642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

-- | 'default' valued select, use for creating select values
--
-- > makeSelect :: QueryExpr
-- > makeSelect = Select
-- >              {ann = emptyAnnotation
-- >              ,selDistinct = All
-- >              ,selSelectList = (SelectList emptyAnnotation [])
-- >              ,selTref = []
-- >              ,selWhere = Nothing
-- >              ,selGroupBy = []
-- >              ,selHaving = Nothing
-- >              ,selOrderBy = []
-- >              ,selLimit = Nothing
-- >              ,selOffset = Nothing
-- >              ,selOption = []}
--
-- On its own, it isn't valid syntax: to use it you have to replace
-- the select list at minimum
--
-- use something like this
--
-- > s = makeSelect {selSelectList = sl [se $ i "a"]
-- >                ,selTref = [tref "t"]}
-- >     where
-- >         a = emptyAnnotation
-- >         sl = SelectList a
-- >         se = SelExp a
-- >         i = Identifier a
-- >         tref t = Tref a (Name a [Nmc t])

makeSelect :: QueryExpr
makeSelect = Select
             {ann = emptyAnnotation
             ,selDistinct = All
             ,selSelectList = (SelectList emptyAnnotation [])
             ,selTref = []
             ,selWhere = Nothing
             ,selGroupBy = []
             ,selHaving = Nothing
             ,selOrderBy = []
             ,selLimit = Nothing
             ,selOffset = Nothing
             ,selOption = []}
{-# LINE 689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data CopyFromSource = CopyFilename String
                    | Stdin
                      deriving (Show,Eq,Typeable,Data)
data CopyToSource = CopyTable Name [NameComponent]
                  | CopyQuery QueryExpr
                    deriving (Show,Eq,Typeable,Data)
data CopyOption = CopyFormat String
                | CopyDelimiter String
                | CopyErrorLog String
                | CopyErrorVerbosity Int
                | CopyParsers String
                  deriving (Show,Eq,Typeable,Data)

{-# LINE 706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data TablePartitionDateTimeInterval = Year | Month | Day | Hour | Minute | Second | Millisecond
                                 deriving (Show,Eq,Typeable,Data)
{-# LINE 712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1138 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data SetValue
    = SetStr Annotation String
    | SetId Annotation String
    | SetNum Annotation Double
      deriving (Show,Eq,Typeable,Data)


data TriggerWhen = TriggerBefore | TriggerAfter
                   deriving (Show,Eq,Typeable,Data)
data TriggerEvent = TInsert| TUpdate | TDelete | AntiTriggerEvent String
                    deriving (Show,Eq,Typeable,Data)
data TriggerFire = EachRow | EachStatement
                   deriving (Show,Eq,Typeable,Data)

data DropType = Table
              | Domain
              | View
              | Type
              | Database
              | User
              | Login
                deriving (Show,Eq,Typeable,Data)

data Cascade = Cascade | Restrict
               deriving (Show,Eq,Typeable,Data)



data IfExists = Require | IfExists
                deriving (Show,Eq,Typeable,Data)


data RestartIdentity = RestartIdentity | ContinueIdentity
                       deriving (Show,Eq,Typeable,Data)

{-# LINE 751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data Replace = Replace | NoReplace
               deriving (Show,Eq,Typeable,Data)

data Volatility = Volatile | Stable | Immutable
                  deriving (Show,Eq,Typeable,Data)

-- todo: fix the fn body to support to support other languages
-- just as as string for now
-- probably change Language to be a string also

data Language = Sql | Plpgsql
                deriving (Show,Eq,Typeable,Data)
{-# LINE 767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data RaiseType = RNotice | RException | RError
                 deriving (Show,Eq,Typeable,Data)

{-# LINE 774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data QueryHint = QueryHintPartitionGroup | QueryHintColumnarHostGroup
                 deriving (Show,Eq,Typeable,Data)

{-# LINE 781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

-- TODO: move this somewhere better
-- | run canonicalizeTypeName on all the TypeName nodes in an ast
{-canonicalizeTypeNames :: Data a => Dialect -> a -> a
canonicalizeTypeNames d =
   (transformBi $ \x ->
       case x of
         ScalarType s -> ScalarType $ canonicalizeTypeName d s
         x' -> x')
   . (transformBi $ \x ->
       case x of
         SimpleTypeName a tn -> SimpleTypeName a (c tn)
         PrecTypeName a tn i -> PrecTypeName a (c tn) i
         Prec2TypeName a tn i i1 -> Prec2TypeName a (c tn) i i1
         x' -> x')
   where
     c (Name a [Nmc nc]) = Name a [Nmc $ T.unpack $ canonicalizeTypeName d $ T.pack nc]
     c z = z-}

{-# LINE 803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
-- AlterColumnAction -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterColumnAction 
         originalTree         : AlterColumnAction 
   alternatives:
      alternative SetDataType:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SetNotNull:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropNotNull:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SetDefault:
         child ann            : Annotation 
         child def            : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropDefault:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterColumnAction = SetDataType (Annotation) (TypeName)
                       | SetNotNull (Annotation)
                       | DropNotNull (Annotation)
                       | SetDefault (Annotation) (ScalarExpr)
                       | DropDefault (Annotation)
                       deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterColumnAction :: AlterColumnAction ->
                         T_AlterColumnAction
_sem_AlterColumnAction (SetDataType _ann _typ) =
    (_sem_AlterColumnAction_SetDataType (_sem_Annotation _ann) (_sem_TypeName _typ))
_sem_AlterColumnAction (SetNotNull _ann) =
    (_sem_AlterColumnAction_SetNotNull (_sem_Annotation _ann))
_sem_AlterColumnAction (DropNotNull _ann) =
    (_sem_AlterColumnAction_DropNotNull (_sem_Annotation _ann))
_sem_AlterColumnAction (SetDefault _ann _def) =
    (_sem_AlterColumnAction_SetDefault (_sem_Annotation _ann) (_sem_ScalarExpr _def))
_sem_AlterColumnAction (DropDefault _ann) =
    (_sem_AlterColumnAction_DropDefault (_sem_Annotation _ann))
-- semantic domain
type T_AlterColumnAction = Catalog ->
                           TypeCheckFlags ->
                           (Maybe TypeExtra) ->
                           ( AlterColumnAction,AlterColumnAction)
data Inh_AlterColumnAction = Inh_AlterColumnAction {_cat_Inh_AlterColumnAction :: Catalog,_flags_Inh_AlterColumnAction :: TypeCheckFlags,_imCast_Inh_AlterColumnAction :: (Maybe TypeExtra)}
data Syn_AlterColumnAction = Syn_AlterColumnAction {_annotatedTree_Syn_AlterColumnAction :: AlterColumnAction,_originalTree_Syn_AlterColumnAction :: AlterColumnAction}
_wrap_AlterColumnAction :: T_AlterColumnAction ->
                          Inh_AlterColumnAction ->
                          Syn_AlterColumnAction
_wrap_AlterColumnAction sem (Inh_AlterColumnAction _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterColumnAction _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterColumnAction_SetDataType :: T_Annotation ->
                                     T_TypeName ->
                                     T_AlterColumnAction
_sem_AlterColumnAction_SetDataType ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 24, column 37)
              _annOtpe =
                  ({-# LINE 24 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDataType _annIannotatedTree _typIannotatedTree
                   {-# LINE 906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDataType _annIoriginalTree _typIoriginalTree
                   {-# LINE 912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_SetNotNull :: T_Annotation ->
                                    T_AlterColumnAction
_sem_AlterColumnAction_SetNotNull ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 29, column 36)
              _annOtpe =
                  ({-# LINE 29 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetNotNull _annIannotatedTree
                   {-# LINE 991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetNotNull _annIoriginalTree
                   {-# LINE 997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_DropNotNull :: T_Annotation ->
                                     T_AlterColumnAction
_sem_AlterColumnAction_DropNotNull ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 23, column 37)
              _annOtpe =
                  ({-# LINE 23 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropNotNull _annIannotatedTree
                   {-# LINE 1056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropNotNull _annIoriginalTree
                   {-# LINE 1062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_SetDefault :: T_Annotation ->
                                    T_ScalarExpr ->
                                    T_AlterColumnAction
_sem_AlterColumnAction_SetDefault ann_ def_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _defOdownEnv :: Environment
              _defOexpectedCast :: Bool
              _defOexpectedType :: (Maybe TypeExtra)
              _defOodbcFunction :: Bool
              _defOassignmentCastContext :: Bool
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _defOcat :: Catalog
              _defOflags :: TypeCheckFlags
              _defOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _defIannotatedTree :: ScalarExpr
              _defIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _defIoriginalTree :: ScalarExpr
              _defIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 25, column 36)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 26, column 36)
              _defOdownEnv =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 1134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 27, column 36)
              _defOexpectedCast =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 1140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 28, column 36)
              _defOexpectedType =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 1146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 131, column 18)
              _defOodbcFunction =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 1152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 803, column 36)
              _defOassignmentCastContext =
                  ({-# LINE 803 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 1158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDefault _annIannotatedTree _defIannotatedTree
                   {-# LINE 1164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDefault _annIoriginalTree _defIoriginalTree
                   {-# LINE 1170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _defIannotatedTree,_defIcolExprs,_defIoriginalTree,_defIupType) =
                  def_ _defOassignmentCastContext _defOcat _defOdownEnv _defOexpectedCast _defOexpectedType _defOflags _defOimCast _defOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_DropDefault :: T_Annotation ->
                                     T_AlterColumnAction
_sem_AlterColumnAction_DropDefault ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 22, column 37)
              _annOtpe =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropDefault _annIannotatedTree
                   {-# LINE 1249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropDefault _annIoriginalTree
                   {-# LINE 1255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterDatabaseOperation --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterDatabaseOperation 
         originalTree         : AlterDatabaseOperation 
   alternatives:
      alternative RenameDatabase:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterDatabaseOperation = RenameDatabase (Annotation) (Name)
                            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterDatabaseOperation :: AlterDatabaseOperation ->
                              T_AlterDatabaseOperation
_sem_AlterDatabaseOperation (RenameDatabase _ann _newName) =
    (_sem_AlterDatabaseOperation_RenameDatabase (_sem_Annotation _ann) (_sem_Name _newName))
-- semantic domain
type T_AlterDatabaseOperation = Catalog ->
                                TypeCheckFlags ->
                                (Maybe TypeExtra) ->
                                ( AlterDatabaseOperation,AlterDatabaseOperation)
data Inh_AlterDatabaseOperation = Inh_AlterDatabaseOperation {_cat_Inh_AlterDatabaseOperation :: Catalog,_flags_Inh_AlterDatabaseOperation :: TypeCheckFlags,_imCast_Inh_AlterDatabaseOperation :: (Maybe TypeExtra)}
data Syn_AlterDatabaseOperation = Syn_AlterDatabaseOperation {_annotatedTree_Syn_AlterDatabaseOperation :: AlterDatabaseOperation,_originalTree_Syn_AlterDatabaseOperation :: AlterDatabaseOperation}
_wrap_AlterDatabaseOperation :: T_AlterDatabaseOperation ->
                               Inh_AlterDatabaseOperation ->
                               Syn_AlterDatabaseOperation
_wrap_AlterDatabaseOperation sem (Inh_AlterDatabaseOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterDatabaseOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterDatabaseOperation_RenameDatabase :: T_Annotation ->
                                             T_Name ->
                                             T_AlterDatabaseOperation
_sem_AlterDatabaseOperation_RenameDatabase ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterDatabaseOperation
              _lhsOoriginalTree :: AlterDatabaseOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 30, column 45)
              _annOtpe =
                  ({-# LINE 30 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 31, column 45)
              _newNameOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameDatabase _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 1365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameDatabase _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 1371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterSchemaOperation ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterSchemaOperation 
         originalTree         : AlterSchemaOperation 
   alternatives:
      alternative AlterSchemaName:
         child ann            : Annotation 
         child newName        : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSchemaOwner:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterSchemaOperation = AlterSchemaName (Annotation) (NameComponent)
                          | AlterSchemaOwner (Annotation) (Name)
                          deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterSchemaOperation :: AlterSchemaOperation ->
                            T_AlterSchemaOperation
_sem_AlterSchemaOperation (AlterSchemaName _ann _newName) =
    (_sem_AlterSchemaOperation_AlterSchemaName (_sem_Annotation _ann) _newName)
_sem_AlterSchemaOperation (AlterSchemaOwner _ann _newName) =
    (_sem_AlterSchemaOperation_AlterSchemaOwner (_sem_Annotation _ann) (_sem_Name _newName))
-- semantic domain
type T_AlterSchemaOperation = Catalog ->
                              TypeCheckFlags ->
                              (Maybe TypeExtra) ->
                              ( AlterSchemaOperation,AlterSchemaOperation)
data Inh_AlterSchemaOperation = Inh_AlterSchemaOperation {_cat_Inh_AlterSchemaOperation :: Catalog,_flags_Inh_AlterSchemaOperation :: TypeCheckFlags,_imCast_Inh_AlterSchemaOperation :: (Maybe TypeExtra)}
data Syn_AlterSchemaOperation = Syn_AlterSchemaOperation {_annotatedTree_Syn_AlterSchemaOperation :: AlterSchemaOperation,_originalTree_Syn_AlterSchemaOperation :: AlterSchemaOperation}
_wrap_AlterSchemaOperation :: T_AlterSchemaOperation ->
                             Inh_AlterSchemaOperation ->
                             Syn_AlterSchemaOperation
_wrap_AlterSchemaOperation sem (Inh_AlterSchemaOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterSchemaOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterSchemaOperation_AlterSchemaName :: T_Annotation ->
                                            NameComponent ->
                                            T_AlterSchemaOperation
_sem_AlterSchemaOperation_AlterSchemaName ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSchemaOperation
              _lhsOoriginalTree :: AlterSchemaOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 32, column 44)
              _annOtpe =
                  ({-# LINE 32 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaName _annIannotatedTree newName_
                   {-# LINE 1498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaName _annIoriginalTree newName_
                   {-# LINE 1504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSchemaOperation_AlterSchemaOwner :: T_Annotation ->
                                             T_Name ->
                                             T_AlterSchemaOperation
_sem_AlterSchemaOperation_AlterSchemaOwner ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSchemaOperation
              _lhsOoriginalTree :: AlterSchemaOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 33, column 45)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 34, column 45)
              _newNameOtpe =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaOwner _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 1576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaOwner _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 1582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableAction --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterTableAction 
         originalTree         : AlterTableAction 
   alternatives:
      alternative AddColumn:
         child ann            : Annotation 
         child att            : AttributeDef 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropColumn:
         child ann            : Annotation 
         child nm             : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterColumn:
         child ann            : Annotation 
         child nm             : {NameComponent}
         child act            : AlterColumnAction 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AddConstraint:
         child ann            : Annotation 
         child con            : Constraint 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterTableAction = AddColumn (Annotation) (AttributeDef)
                      | DropColumn (Annotation) (NameComponent)
                      | AlterColumn (Annotation) (NameComponent) (AlterColumnAction)
                      | AddConstraint (Annotation) (Constraint)
                      deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterTableAction :: AlterTableAction ->
                        T_AlterTableAction
_sem_AlterTableAction (AddColumn _ann _att) =
    (_sem_AlterTableAction_AddColumn (_sem_Annotation _ann) (_sem_AttributeDef _att))
_sem_AlterTableAction (DropColumn _ann _nm) =
    (_sem_AlterTableAction_DropColumn (_sem_Annotation _ann) _nm)
_sem_AlterTableAction (AlterColumn _ann _nm _act) =
    (_sem_AlterTableAction_AlterColumn (_sem_Annotation _ann) _nm (_sem_AlterColumnAction _act))
_sem_AlterTableAction (AddConstraint _ann _con) =
    (_sem_AlterTableAction_AddConstraint (_sem_Annotation _ann) (_sem_Constraint _con))
-- semantic domain
type T_AlterTableAction = Catalog ->
                          TypeCheckFlags ->
                          (Maybe TypeExtra) ->
                          ( AlterTableAction,AlterTableAction)
data Inh_AlterTableAction = Inh_AlterTableAction {_cat_Inh_AlterTableAction :: Catalog,_flags_Inh_AlterTableAction :: TypeCheckFlags,_imCast_Inh_AlterTableAction :: (Maybe TypeExtra)}
data Syn_AlterTableAction = Syn_AlterTableAction {_annotatedTree_Syn_AlterTableAction :: AlterTableAction,_originalTree_Syn_AlterTableAction :: AlterTableAction}
_wrap_AlterTableAction :: T_AlterTableAction ->
                         Inh_AlterTableAction ->
                         Syn_AlterTableAction
_wrap_AlterTableAction sem (Inh_AlterTableAction _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterTableAction _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterTableAction_AddColumn :: T_Annotation ->
                                  T_AttributeDef ->
                                  T_AlterTableAction
_sem_AlterTableAction_AddColumn ann_ att_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _attOcat :: Catalog
              _attOflags :: TypeCheckFlags
              _attOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _attIannotatedTree :: AttributeDef
              _attIoriginalTree :: AttributeDef
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 35, column 34)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddColumn _annIannotatedTree _attIannotatedTree
                   {-# LINE 1733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddColumn _annIoriginalTree _attIoriginalTree
                   {-# LINE 1739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _attIannotatedTree,_attIoriginalTree) =
                  att_ _attOcat _attOflags _attOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableAction_DropColumn :: T_Annotation ->
                                   NameComponent ->
                                   T_AlterTableAction
_sem_AlterTableAction_DropColumn ann_ nm_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 38, column 35)
              _annOtpe =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropColumn _annIannotatedTree nm_
                   {-# LINE 1819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropColumn _annIoriginalTree nm_
                   {-# LINE 1825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableAction_AlterColumn :: T_Annotation ->
                                    NameComponent ->
                                    T_AlterColumnAction ->
                                    T_AlterTableAction
_sem_AlterTableAction_AlterColumn ann_ nm_ act_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _actOcat :: Catalog
              _actOflags :: TypeCheckFlags
              _actOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _actIannotatedTree :: AlterColumnAction
              _actIoriginalTree :: AlterColumnAction
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 37, column 36)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterColumn _annIannotatedTree nm_ _actIannotatedTree
                   {-# LINE 1891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterColumn _annIoriginalTree nm_ _actIoriginalTree
                   {-# LINE 1897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _actIannotatedTree,_actIoriginalTree) =
                  act_ _actOcat _actOflags _actOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableAction_AddConstraint :: T_Annotation ->
                                      T_Constraint ->
                                      T_AlterTableAction
_sem_AlterTableAction_AddConstraint ann_ con_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _conOcat :: Catalog
              _conOflags :: TypeCheckFlags
              _conOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _conIannotatedTree :: Constraint
              _conIoriginalTree :: Constraint
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 36, column 38)
              _annOtpe =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddConstraint _annIannotatedTree _conIannotatedTree
                   {-# LINE 1982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddConstraint _annIoriginalTree _conIoriginalTree
                   {-# LINE 1988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _conOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _conOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _conOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _conIannotatedTree,_conIoriginalTree) =
                  con_ _conOcat _conOflags _conOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableActionList ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterTableActionList 
         originalTree         : AlterTableActionList 
   alternatives:
      alternative Cons:
         child hd             : AlterTableAction 
         child tl             : AlterTableActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AlterTableActionList = [AlterTableAction]
-- cata
_sem_AlterTableActionList :: AlterTableActionList ->
                            T_AlterTableActionList
_sem_AlterTableActionList list =
    (Prelude.foldr _sem_AlterTableActionList_Cons _sem_AlterTableActionList_Nil (Prelude.map _sem_AlterTableAction list))
-- semantic domain
type T_AlterTableActionList = Catalog ->
                              TypeCheckFlags ->
                              (Maybe TypeExtra) ->
                              ( AlterTableActionList,AlterTableActionList)
data Inh_AlterTableActionList = Inh_AlterTableActionList {_cat_Inh_AlterTableActionList :: Catalog,_flags_Inh_AlterTableActionList :: TypeCheckFlags,_imCast_Inh_AlterTableActionList :: (Maybe TypeExtra)}
data Syn_AlterTableActionList = Syn_AlterTableActionList {_annotatedTree_Syn_AlterTableActionList :: AlterTableActionList,_originalTree_Syn_AlterTableActionList :: AlterTableActionList}
_wrap_AlterTableActionList :: T_AlterTableActionList ->
                             Inh_AlterTableActionList ->
                             Syn_AlterTableActionList
_wrap_AlterTableActionList sem (Inh_AlterTableActionList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterTableActionList _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterTableActionList_Cons :: T_AlterTableAction ->
                                 T_AlterTableActionList ->
                                 T_AlterTableActionList
_sem_AlterTableActionList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableActionList
              _lhsOoriginalTree :: AlterTableActionList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: AlterTableAction
              _hdIoriginalTree :: AlterTableAction
              _tlIannotatedTree :: AlterTableActionList
              _tlIoriginalTree :: AlterTableActionList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 2107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 2113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2149 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2161 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableActionList_Nil :: T_AlterTableActionList
_sem_AlterTableActionList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableActionList
              _lhsOoriginalTree :: AlterTableActionList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 2179 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 2185 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableOperation -----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterTableOperation 
         originalTree         : AlterTableOperation 
   alternatives:
      alternative RenameTable:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RenameColumn:
         child ann            : Annotation 
         child oldName        : {NameComponent}
         child newName        : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterTableActions:
         child ann            : Annotation 
         child actions        : AlterTableActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterTableOperation = RenameTable (Annotation) (Name)
                         | RenameColumn (Annotation) (NameComponent) (NameComponent)
                         | AlterTableActions (Annotation) (AlterTableActionList)
                         deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterTableOperation :: AlterTableOperation ->
                           T_AlterTableOperation
_sem_AlterTableOperation (RenameTable _ann _newName) =
    (_sem_AlterTableOperation_RenameTable (_sem_Annotation _ann) (_sem_Name _newName))
_sem_AlterTableOperation (RenameColumn _ann _oldName _newName) =
    (_sem_AlterTableOperation_RenameColumn (_sem_Annotation _ann) _oldName _newName)
_sem_AlterTableOperation (AlterTableActions _ann _actions) =
    (_sem_AlterTableOperation_AlterTableActions (_sem_Annotation _ann) (_sem_AlterTableActionList _actions))
-- semantic domain
type T_AlterTableOperation = Catalog ->
                             TypeCheckFlags ->
                             (Maybe TypeExtra) ->
                             ( AlterTableOperation,AlterTableOperation)
data Inh_AlterTableOperation = Inh_AlterTableOperation {_cat_Inh_AlterTableOperation :: Catalog,_flags_Inh_AlterTableOperation :: TypeCheckFlags,_imCast_Inh_AlterTableOperation :: (Maybe TypeExtra)}
data Syn_AlterTableOperation = Syn_AlterTableOperation {_annotatedTree_Syn_AlterTableOperation :: AlterTableOperation,_originalTree_Syn_AlterTableOperation :: AlterTableOperation}
_wrap_AlterTableOperation :: T_AlterTableOperation ->
                            Inh_AlterTableOperation ->
                            Syn_AlterTableOperation
_wrap_AlterTableOperation sem (Inh_AlterTableOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterTableOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterTableOperation_RenameTable :: T_Annotation ->
                                       T_Name ->
                                       T_AlterTableOperation
_sem_AlterTableOperation_RenameTable ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableOperation
              _lhsOoriginalTree :: AlterTableOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 41, column 39)
              _annOtpe =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 42, column 39)
              _newNameOtpe =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameTable _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 2294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameTable _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 2300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableOperation_RenameColumn :: T_Annotation ->
                                        NameComponent ->
                                        NameComponent ->
                                        T_AlterTableOperation
_sem_AlterTableOperation_RenameColumn ann_ oldName_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableOperation
              _lhsOoriginalTree :: AlterTableOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 40, column 40)
              _annOtpe =
                  ({-# LINE 40 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameColumn _annIannotatedTree oldName_ newName_
                   {-# LINE 2381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameColumn _annIoriginalTree oldName_ newName_
                   {-# LINE 2387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableOperation_AlterTableActions :: T_Annotation ->
                                             T_AlterTableActionList ->
                                             T_AlterTableOperation
_sem_AlterTableOperation_AlterTableActions ann_ actions_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableOperation
              _lhsOoriginalTree :: AlterTableOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _actionsOcat :: Catalog
              _actionsOflags :: TypeCheckFlags
              _actionsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _actionsIannotatedTree :: AlterTableActionList
              _actionsIoriginalTree :: AlterTableActionList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 39, column 45)
              _annOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTableActions _annIannotatedTree _actionsIannotatedTree
                   {-# LINE 2452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTableActions _annIoriginalTree _actionsIoriginalTree
                   {-# LINE 2458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _actionsIannotatedTree,_actionsIoriginalTree) =
                  actions_ _actionsOcat _actionsOflags _actionsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Annotation --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
         tpe                  : Either [TypeError] TypeExtra
      synthesized attributes:
         annotatedTree        : Annotation 
         originalTree         : Annotation 
   alternatives:
      alternative Annotation:
         child anSrc          : {Maybe SourcePosition}
         child anType         : {Maybe T.TypeExtra}
         child anErrs         : {[T.TypeError]}
         child anImplicitCast : {Maybe T.TypeExtra}
         child anCatUpd       : {[C.CatalogUpdate]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}

-- | Annotation type - one of these is attached to most of the
-- data types used in the ast.
-- the fields in order are:
data Annotation = Annotation {
                             -- | source position for this node
                             anSrc :: ( Maybe SourcePosition)
                             -- | type of the node, 'Nothing' if the tree hasn't been typechecked or if a type error elsewhere prevents determining this node's type
                             ,anType :: ( Maybe T.TypeExtra)
                             -- | any type errors
                             ,anErrs :: ( [T.TypeError])
                             -- | if an implicit cast is needed between this node an its parent, this the target type of cast. If no implicit cast is needed, this is Nothing
                             ,anImplicitCast :: ( Maybe T.TypeExtra)
                             -- | any catalog updates that a statement produces, used only for ddl Statements
                             ,anCatUpd :: ( [C.CatalogUpdate])

    } deriving (Eq,Show,Data,Typeable)

-- cata
_sem_Annotation :: Annotation ->
                  T_Annotation
_sem_Annotation (Annotation _anSrc _anType _anErrs _anImplicitCast _anCatUpd) =
    (_sem_Annotation_Annotation _anSrc _anType _anErrs _anImplicitCast _anCatUpd)
-- semantic domain
type T_Annotation = Catalog ->
                    TypeCheckFlags ->
                    (Maybe TypeExtra) ->
                    (Either [TypeError] TypeExtra) ->
                    ( Annotation,Annotation)
data Inh_Annotation = Inh_Annotation {_cat_Inh_Annotation :: Catalog,_flags_Inh_Annotation :: TypeCheckFlags,_imCast_Inh_Annotation :: (Maybe TypeExtra),_tpe_Inh_Annotation :: (Either [TypeError] TypeExtra)}
data Syn_Annotation = Syn_Annotation {_annotatedTree_Syn_Annotation :: Annotation,_originalTree_Syn_Annotation :: Annotation}
_wrap_Annotation :: T_Annotation ->
                   Inh_Annotation ->
                   Syn_Annotation
_wrap_Annotation sem (Inh_Annotation _lhsIcat _lhsIflags _lhsIimCast _lhsItpe) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsItpe
     in  (Syn_Annotation _lhsOannotatedTree _lhsOoriginalTree))
_sem_Annotation_Annotation :: (Maybe SourcePosition) ->
                             (Maybe T.TypeExtra) ->
                             ([T.TypeError]) ->
                             (Maybe T.TypeExtra) ->
                             ([C.CatalogUpdate]) ->
                             T_Annotation
_sem_Annotation_Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Annotation
              _lhsOoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 139, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 139 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   let t = either (const Nothing) Just _lhsItpe
                       es = either id (const []) _lhsItpe
                   in Annotation anSrc_ t es _lhsIimCast anCatUpd_
                   {-# LINE 2575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_
                   {-# LINE 2581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_
                   {-# LINE 2587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AttributeDef ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AttributeDef 
         originalTree         : AttributeDef 
   alternatives:
      alternative AttributeDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         child def            : MaybeScalarExpr 
         child cons           : RowConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AttributeDef = AttributeDef (Annotation) (NameComponent) (TypeName) (MaybeScalarExpr) (RowConstraintList)
                  deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AttributeDef :: AttributeDef ->
                    T_AttributeDef
_sem_AttributeDef (AttributeDef _ann _name _typ _def _cons) =
    (_sem_AttributeDef_AttributeDef (_sem_Annotation _ann) _name (_sem_TypeName _typ) (_sem_MaybeScalarExpr _def) (_sem_RowConstraintList _cons))
-- semantic domain
type T_AttributeDef = Catalog ->
                      TypeCheckFlags ->
                      (Maybe TypeExtra) ->
                      ( AttributeDef,AttributeDef)
data Inh_AttributeDef = Inh_AttributeDef {_cat_Inh_AttributeDef :: Catalog,_flags_Inh_AttributeDef :: TypeCheckFlags,_imCast_Inh_AttributeDef :: (Maybe TypeExtra)}
data Syn_AttributeDef = Syn_AttributeDef {_annotatedTree_Syn_AttributeDef :: AttributeDef,_originalTree_Syn_AttributeDef :: AttributeDef}
_wrap_AttributeDef :: T_AttributeDef ->
                     Inh_AttributeDef ->
                     Syn_AttributeDef
_wrap_AttributeDef sem (Inh_AttributeDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AttributeDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_AttributeDef_AttributeDef :: T_Annotation ->
                                 NameComponent ->
                                 T_TypeName ->
                                 T_MaybeScalarExpr ->
                                 T_RowConstraintList ->
                                 T_AttributeDef
_sem_AttributeDef_AttributeDef ann_ name_ typ_ def_ cons_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _defOdownEnv :: Environment
              _defOexpectedCast :: Bool
              _defOexpectedType :: (Maybe TypeExtra)
              _defOassignmentCastContext :: Bool
              _lhsOannotatedTree :: AttributeDef
              _lhsOoriginalTree :: AttributeDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _defOcat :: Catalog
              _defOflags :: TypeCheckFlags
              _defOimCast :: (Maybe TypeExtra)
              _consOcat :: Catalog
              _consOflags :: TypeCheckFlags
              _consOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              _defIannotatedTree :: MaybeScalarExpr
              _defIoriginalTree :: MaybeScalarExpr
              _defIupType :: (Maybe TypeExtra)
              _consIannotatedTree :: RowConstraintList
              _consIoriginalTree :: RowConstraintList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 43, column 33)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 44, column 33)
              _defOdownEnv =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 2686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 45, column 33)
              _defOexpectedCast =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 2692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 46, column 33)
              _defOexpectedType =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 2698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 804, column 33)
              _defOassignmentCastContext =
                  ({-# LINE 804 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 2704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AttributeDef _annIannotatedTree name_ _typIannotatedTree _defIannotatedTree _consIannotatedTree
                   {-# LINE 2710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AttributeDef _annIoriginalTree name_ _typIoriginalTree _defIoriginalTree _consIoriginalTree
                   {-# LINE 2716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
              ( _defIannotatedTree,_defIoriginalTree,_defIupType) =
                  def_ _defOassignmentCastContext _defOcat _defOdownEnv _defOexpectedCast _defOexpectedType _defOflags _defOimCast
              ( _consIannotatedTree,_consIoriginalTree) =
                  cons_ _consOcat _consOflags _consOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AttributeDefList --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AttributeDefList 
         originalTree         : AttributeDefList 
   alternatives:
      alternative Cons:
         child hd             : AttributeDef 
         child tl             : AttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AttributeDefList = [AttributeDef]
-- cata
_sem_AttributeDefList :: AttributeDefList ->
                        T_AttributeDefList
_sem_AttributeDefList list =
    (Prelude.foldr _sem_AttributeDefList_Cons _sem_AttributeDefList_Nil (Prelude.map _sem_AttributeDef list))
-- semantic domain
type T_AttributeDefList = Catalog ->
                          TypeCheckFlags ->
                          (Maybe TypeExtra) ->
                          ( AttributeDefList,AttributeDefList)
data Inh_AttributeDefList = Inh_AttributeDefList {_cat_Inh_AttributeDefList :: Catalog,_flags_Inh_AttributeDefList :: TypeCheckFlags,_imCast_Inh_AttributeDefList :: (Maybe TypeExtra)}
data Syn_AttributeDefList = Syn_AttributeDefList {_annotatedTree_Syn_AttributeDefList :: AttributeDefList,_originalTree_Syn_AttributeDefList :: AttributeDefList}
_wrap_AttributeDefList :: T_AttributeDefList ->
                         Inh_AttributeDefList ->
                         Syn_AttributeDefList
_wrap_AttributeDefList sem (Inh_AttributeDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AttributeDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_AttributeDefList_Cons :: T_AttributeDef ->
                             T_AttributeDefList ->
                             T_AttributeDefList
_sem_AttributeDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDefList
              _lhsOoriginalTree :: AttributeDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: AttributeDef
              _hdIoriginalTree :: AttributeDef
              _tlIannotatedTree :: AttributeDefList
              _tlIoriginalTree :: AttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 2875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 2881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2911 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2917 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2923 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AttributeDefList_Nil :: T_AttributeDefList
_sem_AttributeDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDefList
              _lhsOoriginalTree :: AttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 2947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 2953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- CaseScalarExprListScalarExprPair ----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
         thenExpectedType     : Maybe TypeExtra
         whenExpectedType     : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : CaseScalarExprListScalarExprPair 
         originalTree         : CaseScalarExprListScalarExprPair 
         thenType             : Maybe TypeExtra
         upTypes              : [Maybe TypeExtra]
         whenTypes            : [Maybe TypeExtra]
   alternatives:
      alternative Tuple:
         child x1             : ScalarExprList 
         child x2             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type CaseScalarExprListScalarExprPair = ( ScalarExprList,ScalarExpr)
-- cata
_sem_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair ->
                                        T_CaseScalarExprListScalarExprPair
_sem_CaseScalarExprListScalarExprPair ( x1,x2) =
    (_sem_CaseScalarExprListScalarExprPair_Tuple (_sem_ScalarExprList x1) (_sem_ScalarExpr x2))
-- semantic domain
type T_CaseScalarExprListScalarExprPair = Catalog ->
                                          Environment ->
                                          TypeCheckFlags ->
                                          (Maybe TypeExtra) ->
                                          (Maybe TypeExtra) ->
                                          (Maybe TypeExtra) ->
                                          ( CaseScalarExprListScalarExprPair,CaseScalarExprListScalarExprPair,(Maybe TypeExtra),([Maybe TypeExtra]),([Maybe TypeExtra]))
data Inh_CaseScalarExprListScalarExprPair = Inh_CaseScalarExprListScalarExprPair {_cat_Inh_CaseScalarExprListScalarExprPair :: Catalog,_downEnv_Inh_CaseScalarExprListScalarExprPair :: Environment,_flags_Inh_CaseScalarExprListScalarExprPair :: TypeCheckFlags,_imCast_Inh_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra),_thenExpectedType_Inh_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra),_whenExpectedType_Inh_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra)}
data Syn_CaseScalarExprListScalarExprPair = Syn_CaseScalarExprListScalarExprPair {_annotatedTree_Syn_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair,_originalTree_Syn_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair,_thenType_Syn_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra),_upTypes_Syn_CaseScalarExprListScalarExprPair :: ([Maybe TypeExtra]),_whenTypes_Syn_CaseScalarExprListScalarExprPair :: ([Maybe TypeExtra])}
_wrap_CaseScalarExprListScalarExprPair :: T_CaseScalarExprListScalarExprPair ->
                                         Inh_CaseScalarExprListScalarExprPair ->
                                         Syn_CaseScalarExprListScalarExprPair
_wrap_CaseScalarExprListScalarExprPair sem (Inh_CaseScalarExprListScalarExprPair _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenType,_lhsOupTypes,_lhsOwhenTypes) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType
     in  (Syn_CaseScalarExprListScalarExprPair _lhsOannotatedTree _lhsOoriginalTree _lhsOthenType _lhsOupTypes _lhsOwhenTypes))
_sem_CaseScalarExprListScalarExprPair_Tuple :: T_ScalarExprList ->
                                              T_ScalarExpr ->
                                              T_CaseScalarExprListScalarExprPair
_sem_CaseScalarExprListScalarExprPair_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _x2OodbcFunction :: Bool
              _lhsOwhenTypes :: ([Maybe TypeExtra])
              _lhsOthenType :: (Maybe TypeExtra)
              _x1OexpectedTypes :: ([TypeExtra])
              _x1OexpectedCast :: Bool
              _x2OexpectedType :: (Maybe TypeExtra)
              _x2OexpectedCast :: Bool
              _x1OassignmentCastContext :: Bool
              _x2OassignmentCastContext :: Bool
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPair
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPair
              _lhsOupTypes :: ([Maybe TypeExtra])
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1Oflags :: TypeCheckFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2OdownEnv :: Environment
              _x2Oflags :: TypeCheckFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExprList
              _x1IoriginalTree :: ScalarExprList
              _x1IupTypes :: ([Maybe TypeExtra])
              _x2IannotatedTree :: ScalarExpr
              _x2IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _x2IoriginalTree :: ScalarExpr
              _x2IupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 134, column 13)
              _x2OodbcFunction =
                  ({-# LINE 134 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 549, column 13)
              _lhsOwhenTypes =
                  ({-# LINE 549 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x1IupTypes
                   {-# LINE 3061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 550, column 13)
              _lhsOthenType =
                  ({-# LINE 550 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x2IupType
                   {-# LINE 3067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 602, column 11)
              _x1OexpectedTypes =
                  ({-# LINE 602 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe [] repeat _lhsIwhenExpectedType
                   {-# LINE 3073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 603, column 11)
              _x1OexpectedCast =
                  ({-# LINE 603 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 604, column 11)
              _x2OexpectedType =
                  ({-# LINE 604 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
                   {-# LINE 3085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 605, column 11)
              _x2OexpectedCast =
                  ({-# LINE 605 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 3091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 805, column 46)
              _x1OassignmentCastContext =
                  ({-# LINE 805 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 806, column 46)
              _x2OassignmentCastContext =
                  ({-# LINE 806 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 3109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 3115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 554 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x1IupTypes
                   {-# LINE 3133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 3145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 3169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IoriginalTree,_x1IupTypes) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedTypes _x1Oflags _x1OimCast
              ( _x2IannotatedTree,_x2IcolExprs,_x2IoriginalTree,_x2IupType) =
                  x2_ _x2OassignmentCastContext _x2Ocat _x2OdownEnv _x2OexpectedCast _x2OexpectedType _x2Oflags _x2OimCast _x2OodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenType,_lhsOupTypes,_lhsOwhenTypes)))
-- CaseScalarExprListScalarExprPairList ------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
         thenExpectedType     : Maybe TypeExtra
         whenExpectedType     : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : CaseScalarExprListScalarExprPairList 
         originalTree         : CaseScalarExprListScalarExprPairList 
         thenTypes            : [Maybe TypeExtra]
         upTypes              : [Maybe TypeExtra]
         whenTypes            : [[Maybe TypeExtra]]
   alternatives:
      alternative Cons:
         child hd             : CaseScalarExprListScalarExprPair 
         child tl             : CaseScalarExprListScalarExprPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type CaseScalarExprListScalarExprPairList = [CaseScalarExprListScalarExprPair]
-- cata
_sem_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList ->
                                            T_CaseScalarExprListScalarExprPairList
_sem_CaseScalarExprListScalarExprPairList list =
    (Prelude.foldr _sem_CaseScalarExprListScalarExprPairList_Cons _sem_CaseScalarExprListScalarExprPairList_Nil (Prelude.map _sem_CaseScalarExprListScalarExprPair list))
-- semantic domain
type T_CaseScalarExprListScalarExprPairList = Catalog ->
                                              Environment ->
                                              TypeCheckFlags ->
                                              (Maybe TypeExtra) ->
                                              (Maybe TypeExtra) ->
                                              (Maybe TypeExtra) ->
                                              ( CaseScalarExprListScalarExprPairList,CaseScalarExprListScalarExprPairList,([Maybe TypeExtra]),([Maybe TypeExtra]),([[Maybe TypeExtra]]))
data Inh_CaseScalarExprListScalarExprPairList = Inh_CaseScalarExprListScalarExprPairList {_cat_Inh_CaseScalarExprListScalarExprPairList :: Catalog,_downEnv_Inh_CaseScalarExprListScalarExprPairList :: Environment,_flags_Inh_CaseScalarExprListScalarExprPairList :: TypeCheckFlags,_imCast_Inh_CaseScalarExprListScalarExprPairList :: (Maybe TypeExtra),_thenExpectedType_Inh_CaseScalarExprListScalarExprPairList :: (Maybe TypeExtra),_whenExpectedType_Inh_CaseScalarExprListScalarExprPairList :: (Maybe TypeExtra)}
data Syn_CaseScalarExprListScalarExprPairList = Syn_CaseScalarExprListScalarExprPairList {_annotatedTree_Syn_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList,_originalTree_Syn_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList,_thenTypes_Syn_CaseScalarExprListScalarExprPairList :: ([Maybe TypeExtra]),_upTypes_Syn_CaseScalarExprListScalarExprPairList :: ([Maybe TypeExtra]),_whenTypes_Syn_CaseScalarExprListScalarExprPairList :: ([[Maybe TypeExtra]])}
_wrap_CaseScalarExprListScalarExprPairList :: T_CaseScalarExprListScalarExprPairList ->
                                             Inh_CaseScalarExprListScalarExprPairList ->
                                             Syn_CaseScalarExprListScalarExprPairList
_wrap_CaseScalarExprListScalarExprPairList sem (Inh_CaseScalarExprListScalarExprPairList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType
     in  (Syn_CaseScalarExprListScalarExprPairList _lhsOannotatedTree _lhsOoriginalTree _lhsOthenTypes _lhsOupTypes _lhsOwhenTypes))
_sem_CaseScalarExprListScalarExprPairList_Cons :: T_CaseScalarExprListScalarExprPair ->
                                                 T_CaseScalarExprListScalarExprPairList ->
                                                 T_CaseScalarExprListScalarExprPairList
_sem_CaseScalarExprListScalarExprPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([[Maybe TypeExtra]])
              _lhsOthenTypes :: ([Maybe TypeExtra])
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPairList
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPairList
              _lhsOupTypes :: ([Maybe TypeExtra])
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _hdOthenExpectedType :: (Maybe TypeExtra)
              _hdOwhenExpectedType :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _tlOthenExpectedType :: (Maybe TypeExtra)
              _tlOwhenExpectedType :: (Maybe TypeExtra)
              _hdIannotatedTree :: CaseScalarExprListScalarExprPair
              _hdIoriginalTree :: CaseScalarExprListScalarExprPair
              _hdIthenType :: (Maybe TypeExtra)
              _hdIupTypes :: ([Maybe TypeExtra])
              _hdIwhenTypes :: ([Maybe TypeExtra])
              _tlIannotatedTree :: CaseScalarExprListScalarExprPairList
              _tlIoriginalTree :: CaseScalarExprListScalarExprPairList
              _tlIthenTypes :: ([Maybe TypeExtra])
              _tlIupTypes :: ([Maybe TypeExtra])
              _tlIwhenTypes :: ([[Maybe TypeExtra]])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 538, column 10)
              _lhsOwhenTypes =
                  ({-# LINE 538 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIwhenTypes : _tlIwhenTypes
                   {-# LINE 3279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 539, column 10)
              _lhsOthenTypes =
                  ({-# LINE 539 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIthenType : _tlIthenTypes
                   {-# LINE 3285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 3291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 3297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 554 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tlIupTypes
                   {-# LINE 3315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 553 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 3327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOthenExpectedType =
                  ({-# LINE 598 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
                   {-# LINE 3345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOwhenExpectedType =
                  ({-# LINE 599 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIwhenExpectedType
                   {-# LINE 3351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 553 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 3363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOthenExpectedType =
                  ({-# LINE 598 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
                   {-# LINE 3381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOwhenExpectedType =
                  ({-# LINE 599 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIwhenExpectedType
                   {-# LINE 3387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIthenType,_hdIupTypes,_hdIwhenTypes) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast _hdOthenExpectedType _hdOwhenExpectedType
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIthenTypes,_tlIupTypes,_tlIwhenTypes) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast _tlOthenExpectedType _tlOwhenExpectedType
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes)))
_sem_CaseScalarExprListScalarExprPairList_Nil :: T_CaseScalarExprListScalarExprPairList
_sem_CaseScalarExprListScalarExprPairList_Nil =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([[Maybe TypeExtra]])
              _lhsOthenTypes :: ([Maybe TypeExtra])
              _lhsOupTypes :: ([Maybe TypeExtra])
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPairList
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 540, column 9)
              _lhsOwhenTypes =
                  ({-# LINE 540 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 3411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 541, column 9)
              _lhsOthenTypes =
                  ({-# LINE 541 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 3417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 542, column 9)
              _lhsOupTypes =
                  ({-# LINE 542 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 3423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 3429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 3435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes)))
-- Constraint --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : Constraint 
         originalTree         : Constraint 
   alternatives:
      alternative UniqueConstraint:
         child ann            : Annotation 
         child name           : {String}
         child x              : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative PrimaryKeyConstraint:
         child ann            : Annotation 
         child name           : {String}
         child x              : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CheckConstraint:
         child ann            : Annotation 
         child name           : {String}
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReferenceConstraint:
         child ann            : Annotation 
         child name           : {String}
         child atts           : {[NameComponent]}
         child table          : Name 
         child tableAtts      : {[NameComponent]}
         child onUpdate       : {Cascade}
         child onDelete       : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Constraint = UniqueConstraint (Annotation) (String) (([NameComponent]))
                | PrimaryKeyConstraint (Annotation) (String) (([NameComponent]))
                | CheckConstraint (Annotation) (String) (ScalarExpr)
                | ReferenceConstraint (Annotation) (String) (([NameComponent])) (Name) (([NameComponent])) (Cascade) (Cascade)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_Constraint :: Constraint ->
                  T_Constraint
_sem_Constraint (UniqueConstraint _ann _name _x) =
    (_sem_Constraint_UniqueConstraint (_sem_Annotation _ann) _name _x)
_sem_Constraint (PrimaryKeyConstraint _ann _name _x) =
    (_sem_Constraint_PrimaryKeyConstraint (_sem_Annotation _ann) _name _x)
_sem_Constraint (CheckConstraint _ann _name _expr) =
    (_sem_Constraint_CheckConstraint (_sem_Annotation _ann) _name (_sem_ScalarExpr _expr))
_sem_Constraint (ReferenceConstraint _ann _name _atts _table _tableAtts _onUpdate _onDelete) =
    (_sem_Constraint_ReferenceConstraint (_sem_Annotation _ann) _name _atts (_sem_Name _table) _tableAtts _onUpdate _onDelete)
-- semantic domain
type T_Constraint = Catalog ->
                    TypeCheckFlags ->
                    (Maybe TypeExtra) ->
                    ( Constraint,Constraint)
data Inh_Constraint = Inh_Constraint {_cat_Inh_Constraint :: Catalog,_flags_Inh_Constraint :: TypeCheckFlags,_imCast_Inh_Constraint :: (Maybe TypeExtra)}
data Syn_Constraint = Syn_Constraint {_annotatedTree_Syn_Constraint :: Constraint,_originalTree_Syn_Constraint :: Constraint}
_wrap_Constraint :: T_Constraint ->
                   Inh_Constraint ->
                   Syn_Constraint
_wrap_Constraint sem (Inh_Constraint _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_Constraint _lhsOannotatedTree _lhsOoriginalTree))
_sem_Constraint_UniqueConstraint :: T_Annotation ->
                                   String ->
                                   ([NameComponent]) ->
                                   T_Constraint
_sem_Constraint_UniqueConstraint ann_ name_ x_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 54, column 35)
              _annOtpe =
                  ({-# LINE 54 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   UniqueConstraint _annIannotatedTree name_ x_
                   {-# LINE 3549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   UniqueConstraint _annIoriginalTree name_ x_
                   {-# LINE 3555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Constraint_PrimaryKeyConstraint :: T_Annotation ->
                                       String ->
                                       ([NameComponent]) ->
                                       T_Constraint
_sem_Constraint_PrimaryKeyConstraint ann_ name_ x_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 51, column 39)
              _annOtpe =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrimaryKeyConstraint _annIannotatedTree name_ x_
                   {-# LINE 3616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrimaryKeyConstraint _annIoriginalTree name_ x_
                   {-# LINE 3622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Constraint_CheckConstraint :: T_Annotation ->
                                  String ->
                                  T_ScalarExpr ->
                                  T_Constraint
_sem_Constraint_CheckConstraint ann_ name_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 47, column 34)
              _annOtpe =
                  ({-# LINE 47 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 48, column 34)
              _exprOdownEnv =
                  ({-# LINE 48 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 3695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 49, column 34)
              _exprOexpectedCast =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 3701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 50, column 34)
              _exprOexpectedType =
                  ({-# LINE 50 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 3707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 137, column 23)
              _exprOodbcFunction =
                  ({-# LINE 137 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3713 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 807, column 34)
              _exprOassignmentCastContext =
                  ({-# LINE 807 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3719 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CheckConstraint _annIannotatedTree name_ _exprIannotatedTree
                   {-# LINE 3725 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CheckConstraint _annIoriginalTree name_ _exprIoriginalTree
                   {-# LINE 3731 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Constraint_ReferenceConstraint :: T_Annotation ->
                                      String ->
                                      ([NameComponent]) ->
                                      T_Name ->
                                      ([NameComponent]) ->
                                      Cascade ->
                                      Cascade ->
                                      T_Constraint
_sem_Constraint_ReferenceConstraint ann_ name_ atts_ table_ tableAtts_ onUpdate_ onDelete_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _tableOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckFlags
              _tableOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 52, column 38)
              _annOtpe =
                  ({-# LINE 52 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3816 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 53, column 38)
              _tableOtpe =
                  ({-# LINE 53 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3822 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReferenceConstraint _annIannotatedTree name_ atts_ _tableIannotatedTree tableAtts_ onUpdate_ onDelete_
                   {-# LINE 3828 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReferenceConstraint _annIoriginalTree name_ atts_ _tableIoriginalTree tableAtts_ onUpdate_ onDelete_
                   {-# LINE 3834 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3840 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3846 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3852 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ConstraintList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ConstraintList 
         originalTree         : ConstraintList 
   alternatives:
      alternative Cons:
         child hd             : Constraint 
         child tl             : ConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ConstraintList = [Constraint]
-- cata
_sem_ConstraintList :: ConstraintList ->
                      T_ConstraintList
_sem_ConstraintList list =
    (Prelude.foldr _sem_ConstraintList_Cons _sem_ConstraintList_Nil (Prelude.map _sem_Constraint list))
-- semantic domain
type T_ConstraintList = Catalog ->
                        TypeCheckFlags ->
                        (Maybe TypeExtra) ->
                        ( ConstraintList,ConstraintList)
data Inh_ConstraintList = Inh_ConstraintList {_cat_Inh_ConstraintList :: Catalog,_flags_Inh_ConstraintList :: TypeCheckFlags,_imCast_Inh_ConstraintList :: (Maybe TypeExtra)}
data Syn_ConstraintList = Syn_ConstraintList {_annotatedTree_Syn_ConstraintList :: ConstraintList,_originalTree_Syn_ConstraintList :: ConstraintList}
_wrap_ConstraintList :: T_ConstraintList ->
                       Inh_ConstraintList ->
                       Syn_ConstraintList
_wrap_ConstraintList sem (Inh_ConstraintList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ConstraintList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ConstraintList_Cons :: T_Constraint ->
                           T_ConstraintList ->
                           T_ConstraintList
_sem_ConstraintList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ConstraintList
              _lhsOoriginalTree :: ConstraintList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: Constraint
              _hdIoriginalTree :: Constraint
              _tlIannotatedTree :: ConstraintList
              _tlIoriginalTree :: ConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 3953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 3959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ConstraintList_Nil :: T_ConstraintList
_sem_ConstraintList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ConstraintList
              _lhsOoriginalTree :: ConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 4025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 4031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- FnBody ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : FnBody 
         originalTree         : FnBody 
   alternatives:
      alternative SqlFnBody:
         child ann            : Annotation 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative PlpgsqlFnBody:
         child ann            : Annotation 
         child blk            : Statement 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data FnBody = SqlFnBody (Annotation) (StatementList)
            | PlpgsqlFnBody (Annotation) (Statement)
            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_FnBody :: FnBody ->
              T_FnBody
_sem_FnBody (SqlFnBody _ann _sts) =
    (_sem_FnBody_SqlFnBody (_sem_Annotation _ann) (_sem_StatementList _sts))
_sem_FnBody (PlpgsqlFnBody _ann _blk) =
    (_sem_FnBody_PlpgsqlFnBody (_sem_Annotation _ann) (_sem_Statement _blk))
-- semantic domain
type T_FnBody = Catalog ->
                TypeCheckFlags ->
                (Maybe TypeExtra) ->
                ( FnBody,FnBody)
data Inh_FnBody = Inh_FnBody {_cat_Inh_FnBody :: Catalog,_flags_Inh_FnBody :: TypeCheckFlags,_imCast_Inh_FnBody :: (Maybe TypeExtra)}
data Syn_FnBody = Syn_FnBody {_annotatedTree_Syn_FnBody :: FnBody,_originalTree_Syn_FnBody :: FnBody}
_wrap_FnBody :: T_FnBody ->
               Inh_FnBody ->
               Syn_FnBody
_wrap_FnBody sem (Inh_FnBody _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_FnBody _lhsOannotatedTree _lhsOoriginalTree))
_sem_FnBody_SqlFnBody :: T_Annotation ->
                        T_StatementList ->
                        T_FnBody
_sem_FnBody_SqlFnBody ann_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: FnBody
              _lhsOoriginalTree :: FnBody
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 56, column 24)
              _annOtpe =
                  ({-# LINE 56 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SqlFnBody _annIannotatedTree _stsIannotatedTree
                   {-# LINE 4123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SqlFnBody _annIoriginalTree _stsIoriginalTree
                   {-# LINE 4129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_FnBody_PlpgsqlFnBody :: T_Annotation ->
                            T_Statement ->
                            T_FnBody
_sem_FnBody_PlpgsqlFnBody ann_ blk_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: FnBody
              _lhsOoriginalTree :: FnBody
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _blkOcat :: Catalog
              _blkOflags :: TypeCheckFlags
              _blkOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _blkIannotatedTree :: Statement
              _blkIoriginalTree :: Statement
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 55, column 28)
              _annOtpe =
                  ({-# LINE 55 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PlpgsqlFnBody _annIannotatedTree _blkIannotatedTree
                   {-# LINE 4214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PlpgsqlFnBody _annIoriginalTree _blkIoriginalTree
                   {-# LINE 4220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _blkOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _blkOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _blkOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _blkIannotatedTree,_blkIoriginalTree) =
                  blk_ _blkOcat _blkOflags _blkOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- InList ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : InList 
         listType             : Either [TypeError] TypeExtra
         originalTree         : InList 
   alternatives:
      alternative InList:
         child ann            : Annotation 
         child exprs          : ScalarExprList 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative InQueryExpr:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data InList = InList (Annotation) (ScalarExprList)
            | InQueryExpr (Annotation) (QueryExpr)
            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_InList :: InList ->
              T_InList
_sem_InList (InList _ann _exprs) =
    (_sem_InList_InList (_sem_Annotation _ann) (_sem_ScalarExprList _exprs))
_sem_InList (InQueryExpr _ann _sel) =
    (_sem_InList_InQueryExpr (_sem_Annotation _ann) (_sem_QueryExpr _sel))
-- semantic domain
type T_InList = Catalog ->
                Environment ->
                Bool ->
                (Maybe TypeExtra) ->
                TypeCheckFlags ->
                (Maybe TypeExtra) ->
                ( InList,(Either [TypeError] TypeExtra),InList)
data Inh_InList = Inh_InList {_cat_Inh_InList :: Catalog,_downEnv_Inh_InList :: Environment,_expectedCast_Inh_InList :: Bool,_expectedType_Inh_InList :: (Maybe TypeExtra),_flags_Inh_InList :: TypeCheckFlags,_imCast_Inh_InList :: (Maybe TypeExtra)}
data Syn_InList = Syn_InList {_annotatedTree_Syn_InList :: InList,_listType_Syn_InList :: (Either [TypeError] TypeExtra),_originalTree_Syn_InList :: InList}
_wrap_InList :: T_InList ->
               Inh_InList ->
               Syn_InList
_wrap_InList sem (Inh_InList _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_InList _lhsOannotatedTree _lhsOlistType _lhsOoriginalTree))
_sem_InList_InList :: T_Annotation ->
                     T_ScalarExprList ->
                     T_InList
_sem_InList_InList ann_ exprs_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOlistType :: (Either [TypeError] TypeExtra)
              _exprsOexpectedTypes :: ([TypeExtra])
              _exprsOexpectedCast :: Bool
              _annOimCast :: (Maybe TypeExtra)
              _exprsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: InList
              _lhsOoriginalTree :: InList
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exprsOcat :: Catalog
              _exprsOdownEnv :: Environment
              _exprsOflags :: TypeCheckFlags
              _exprsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprsIannotatedTree :: ScalarExprList
              _exprsIoriginalTree :: ScalarExprList
              _exprsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 152, column 9)
              _tpe =
                  ({-# LINE 152 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 4364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 678, column 9)
              _lhsOlistType =
                  ({-# LINE 678 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   mapM (maybe (Left []) Right) _exprsIupTypes
                   >>= resolveResultSetTypeExtra _lhsIcat
                   {-# LINE 4371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 680, column 9)
              _exprsOexpectedTypes =
                  ({-# LINE 680 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe [] repeat _lhsIexpectedType
                   {-# LINE 4377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 682, column 9)
              _exprsOexpectedCast =
                  ({-# LINE 682 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 778, column 12)
              _annOimCast =
                  ({-# LINE 778 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 4389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 808, column 21)
              _exprsOassignmentCastContext =
                  ({-# LINE 808 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InList _annIannotatedTree _exprsIannotatedTree
                   {-# LINE 4401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InList _annIoriginalTree _exprsIoriginalTree
                   {-# LINE 4407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 4437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprsIannotatedTree,_exprsIoriginalTree,_exprsIupTypes) =
                  exprs_ _exprsOassignmentCastContext _exprsOcat _exprsOdownEnv _exprsOexpectedCast _exprsOexpectedTypes _exprsOflags _exprsOimCast
          in  ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree)))
_sem_InList_InQueryExpr :: T_Annotation ->
                          T_QueryExpr ->
                          T_InList
_sem_InList_InQueryExpr ann_ sel_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _selOouterDownEnv :: (Maybe Environment)
              _lhsOlistType :: (Either [TypeError] TypeExtra)
              _selOexpectedType :: (Maybe [TypeExtra])
              _annOimCast :: (Maybe TypeExtra)
              _selOassignmentCastContext :: Bool
              _lhsOannotatedTree :: InList
              _lhsOoriginalTree :: InList
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOtpe :: (Either [TypeError] TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 31, column 17)
              _selOouterDownEnv =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 4500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 152, column 9)
              _tpe =
                  ({-# LINE 152 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 4506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 685, column 9)
              _lhsOlistType =
                  ({-# LINE 685 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   st <- maybe (Left []) Right (map snd <$> _selIupType)
                   case length st of
                             0 -> Left [InternalError
                                        "got subquery with no columns? in inselect"]
                             1 -> Right $ head st
                             _ -> Right $ mkTypeExtra $ AnonymousCompositeType
                                     $ map teType st
                   {-# LINE 4519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 695, column 9)
              _selOexpectedType =
                  ({-# LINE 695 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 4525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 779, column 17)
              _annOimCast =
                  ({-# LINE 779 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 4531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 809, column 26)
              _selOassignmentCastContext =
                  ({-# LINE 809 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InQueryExpr _annIannotatedTree _selIannotatedTree
                   {-# LINE 4543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InQueryExpr _annIoriginalTree _selIoriginalTree
                   {-# LINE 4549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 4579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree)))
-- JoinExpr ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : JoinExpr 
         originalTree         : JoinExpr 
   alternatives:
      alternative JoinOn:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative JoinUsing:
         child ann            : Annotation 
         child x              : {[NameComponent]}
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data JoinExpr = JoinOn (Annotation) (ScalarExpr)
              | JoinUsing (Annotation) (([NameComponent]))
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_JoinExpr :: JoinExpr ->
                T_JoinExpr
_sem_JoinExpr (JoinOn _ann _expr) =
    (_sem_JoinExpr_JoinOn (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_JoinExpr (JoinUsing _ann _x) =
    (_sem_JoinExpr_JoinUsing (_sem_Annotation _ann) _x)
-- semantic domain
type T_JoinExpr = Catalog ->
                  Environment ->
                  TypeCheckFlags ->
                  (Maybe TypeExtra) ->
                  ( JoinExpr,JoinExpr)
data Inh_JoinExpr = Inh_JoinExpr {_cat_Inh_JoinExpr :: Catalog,_downEnv_Inh_JoinExpr :: Environment,_flags_Inh_JoinExpr :: TypeCheckFlags,_imCast_Inh_JoinExpr :: (Maybe TypeExtra)}
data Syn_JoinExpr = Syn_JoinExpr {_annotatedTree_Syn_JoinExpr :: JoinExpr,_originalTree_Syn_JoinExpr :: JoinExpr}
_wrap_JoinExpr :: T_JoinExpr ->
                 Inh_JoinExpr ->
                 Syn_JoinExpr
_wrap_JoinExpr sem (Inh_JoinExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_JoinExpr _lhsOannotatedTree _lhsOoriginalTree))
_sem_JoinExpr_JoinOn :: T_Annotation ->
                       T_ScalarExpr ->
                       T_JoinExpr
_sem_JoinExpr_JoinOn ann_ expr_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _exprOodbcFunction :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOexpectedCast :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: JoinExpr
              _lhsOoriginalTree :: JoinExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 156, column 9)
              _tpe =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 4687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 140, column 14)
              _exprOodbcFunction =
                  ({-# LINE 140 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 742, column 7)
              _exprOexpectedType =
                  ({-# LINE 742 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   bt <- ansiTypeNameToDialect (tcfDialect _lhsIflags) "boolean"
                   Just $ TypeExtra (ScalarType bt) Nothing Nothing
                        $ maybe False teNullable _exprIupType
                   {-# LINE 4702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 746, column 7)
              _exprOexpectedCast =
                  ({-# LINE 746 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 810, column 23)
              _exprOassignmentCastContext =
                  ({-# LINE 810 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinOn _annIannotatedTree _exprIannotatedTree
                   {-# LINE 4720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinOn _annIoriginalTree _exprIoriginalTree
                   {-# LINE 4726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 4762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_JoinExpr_JoinUsing :: T_Annotation ->
                          ([NameComponent]) ->
                          T_JoinExpr
_sem_JoinExpr_JoinUsing ann_ x_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: JoinExpr
              _lhsOoriginalTree :: JoinExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 156, column 9)
              _tpe =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 4813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinUsing _annIannotatedTree x_
                   {-# LINE 4819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinUsing _annIoriginalTree x_
                   {-# LINE 4825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 4861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeBoolExpr -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeBoolExpr 
         originalTree         : MaybeBoolExpr 
   alternatives:
      alternative Just:
         child just           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeBoolExpr = Maybe (ScalarExpr)
-- cata
_sem_MaybeBoolExpr :: MaybeBoolExpr ->
                     T_MaybeBoolExpr
_sem_MaybeBoolExpr (Prelude.Just x) =
    (_sem_MaybeBoolExpr_Just (_sem_ScalarExpr x))
_sem_MaybeBoolExpr Prelude.Nothing =
    _sem_MaybeBoolExpr_Nothing
-- semantic domain
type T_MaybeBoolExpr = Catalog ->
                       Environment ->
                       TypeCheckFlags ->
                       (Maybe TypeExtra) ->
                       ( MaybeBoolExpr,MaybeBoolExpr)
data Inh_MaybeBoolExpr = Inh_MaybeBoolExpr {_cat_Inh_MaybeBoolExpr :: Catalog,_downEnv_Inh_MaybeBoolExpr :: Environment,_flags_Inh_MaybeBoolExpr :: TypeCheckFlags,_imCast_Inh_MaybeBoolExpr :: (Maybe TypeExtra)}
data Syn_MaybeBoolExpr = Syn_MaybeBoolExpr {_annotatedTree_Syn_MaybeBoolExpr :: MaybeBoolExpr,_originalTree_Syn_MaybeBoolExpr :: MaybeBoolExpr}
_wrap_MaybeBoolExpr :: T_MaybeBoolExpr ->
                      Inh_MaybeBoolExpr ->
                      Syn_MaybeBoolExpr
_wrap_MaybeBoolExpr sem (Inh_MaybeBoolExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_MaybeBoolExpr _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeBoolExpr_Just :: T_ScalarExpr ->
                          T_MaybeBoolExpr
_sem_MaybeBoolExpr_Just just_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _justOodbcFunction :: Bool
              _justOexpectedType :: (Maybe TypeExtra)
              _justOexpectedCast :: Bool
              _justOassignmentCastContext :: Bool
              _lhsOannotatedTree :: MaybeBoolExpr
              _lhsOoriginalTree :: MaybeBoolExpr
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: ScalarExpr
              _justIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _justIoriginalTree :: ScalarExpr
              _justIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 143, column 12)
              _justOodbcFunction =
                  ({-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 758, column 7)
              _justOexpectedType =
                  ({-# LINE 758 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 4941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 759, column 7)
              _justOexpectedCast =
                  ({-# LINE 759 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 811, column 26)
              _justOassignmentCastContext =
                  ({-# LINE 811 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 4959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 4965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupType) =
                  just_ _justOassignmentCastContext _justOcat _justOdownEnv _justOexpectedCast _justOexpectedType _justOflags _justOimCast _justOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeBoolExpr_Nothing :: T_MaybeBoolExpr
_sem_MaybeBoolExpr_Nothing =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeBoolExpr
              _lhsOoriginalTree :: MaybeBoolExpr
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeNameComponentList --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeNameComponentList 
         originalTree         : MaybeNameComponentList 
   alternatives:
      alternative Just:
         child just           : NameComponentList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeNameComponentList = Maybe (NameComponentList)
-- cata
_sem_MaybeNameComponentList :: MaybeNameComponentList ->
                              T_MaybeNameComponentList
_sem_MaybeNameComponentList (Prelude.Just x) =
    (_sem_MaybeNameComponentList_Just (_sem_NameComponentList x))
_sem_MaybeNameComponentList Prelude.Nothing =
    _sem_MaybeNameComponentList_Nothing
-- semantic domain
type T_MaybeNameComponentList = Catalog ->
                                TypeCheckFlags ->
                                (Maybe TypeExtra) ->
                                ( MaybeNameComponentList,MaybeNameComponentList)
data Inh_MaybeNameComponentList = Inh_MaybeNameComponentList {_cat_Inh_MaybeNameComponentList :: Catalog,_flags_Inh_MaybeNameComponentList :: TypeCheckFlags,_imCast_Inh_MaybeNameComponentList :: (Maybe TypeExtra)}
data Syn_MaybeNameComponentList = Syn_MaybeNameComponentList {_annotatedTree_Syn_MaybeNameComponentList :: MaybeNameComponentList,_originalTree_Syn_MaybeNameComponentList :: MaybeNameComponentList}
_wrap_MaybeNameComponentList :: T_MaybeNameComponentList ->
                               Inh_MaybeNameComponentList ->
                               Syn_MaybeNameComponentList
_wrap_MaybeNameComponentList sem (Inh_MaybeNameComponentList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_MaybeNameComponentList _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeNameComponentList_Just :: T_NameComponentList ->
                                   T_MaybeNameComponentList
_sem_MaybeNameComponentList_Just just_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeNameComponentList
              _lhsOoriginalTree :: MaybeNameComponentList
              _justOcat :: Catalog
              _justOflags :: TypeCheckFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: NameComponentList
              _justIoriginalTree :: NameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 5098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 5104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeNameComponentList_Nothing :: T_MaybeNameComponentList
_sem_MaybeNameComponentList_Nothing =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeNameComponentList
              _lhsOoriginalTree :: MaybeNameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5150 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5156 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeScalarExpr ---------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeScalarExpr 
         originalTree         : MaybeScalarExpr 
         upType               : Maybe TypeExtra
   alternatives:
      alternative Just:
         child just           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeScalarExpr = Maybe (ScalarExpr)
-- cata
_sem_MaybeScalarExpr :: MaybeScalarExpr ->
                       T_MaybeScalarExpr
_sem_MaybeScalarExpr (Prelude.Just x) =
    (_sem_MaybeScalarExpr_Just (_sem_ScalarExpr x))
_sem_MaybeScalarExpr Prelude.Nothing =
    _sem_MaybeScalarExpr_Nothing
-- semantic domain
type T_MaybeScalarExpr = Bool ->
                         Catalog ->
                         Environment ->
                         Bool ->
                         (Maybe TypeExtra) ->
                         TypeCheckFlags ->
                         (Maybe TypeExtra) ->
                         ( MaybeScalarExpr,MaybeScalarExpr,(Maybe TypeExtra))
data Inh_MaybeScalarExpr = Inh_MaybeScalarExpr {_assignmentCastContext_Inh_MaybeScalarExpr :: Bool,_cat_Inh_MaybeScalarExpr :: Catalog,_downEnv_Inh_MaybeScalarExpr :: Environment,_expectedCast_Inh_MaybeScalarExpr :: Bool,_expectedType_Inh_MaybeScalarExpr :: (Maybe TypeExtra),_flags_Inh_MaybeScalarExpr :: TypeCheckFlags,_imCast_Inh_MaybeScalarExpr :: (Maybe TypeExtra)}
data Syn_MaybeScalarExpr = Syn_MaybeScalarExpr {_annotatedTree_Syn_MaybeScalarExpr :: MaybeScalarExpr,_originalTree_Syn_MaybeScalarExpr :: MaybeScalarExpr,_upType_Syn_MaybeScalarExpr :: (Maybe TypeExtra)}
_wrap_MaybeScalarExpr :: T_MaybeScalarExpr ->
                        Inh_MaybeScalarExpr ->
                        Syn_MaybeScalarExpr
_wrap_MaybeScalarExpr sem (Inh_MaybeScalarExpr _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_MaybeScalarExpr _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_MaybeScalarExpr_Just :: T_ScalarExpr ->
                            T_MaybeScalarExpr
_sem_MaybeScalarExpr_Just just_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _justOodbcFunction :: Bool
              _lhsOannotatedTree :: MaybeScalarExpr
              _lhsOoriginalTree :: MaybeScalarExpr
              _lhsOupType :: (Maybe TypeExtra)
              _justOassignmentCastContext :: Bool
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOexpectedCast :: Bool
              _justOexpectedType :: (Maybe TypeExtra)
              _justOflags :: TypeCheckFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: ScalarExpr
              _justIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _justIoriginalTree :: ScalarExpr
              _justIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 146, column 12)
              _justOodbcFunction =
                  ({-# LINE 146 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 5257 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 5263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 109 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _justIupType
                   {-# LINE 5281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 5287 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5293 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 5299 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOexpectedCast =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 5305 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOexpectedType =
                  ({-# LINE 110 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 5311 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5317 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupType) =
                  just_ _justOassignmentCastContext _justOcat _justOdownEnv _justOexpectedCast _justOexpectedType _justOflags _justOimCast _justOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_MaybeScalarExpr_Nothing :: T_MaybeScalarExpr
_sem_MaybeScalarExpr_Nothing =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: MaybeScalarExpr
              _lhsOoriginalTree :: MaybeScalarExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 120, column 15)
              _lhsOupType =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 5344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5350 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- MaybeSelectList ---------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeSelectList 
         originalTree         : MaybeSelectList 
   alternatives:
      alternative Just:
         child just           : SelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeSelectList = Maybe (SelectList)
-- cata
_sem_MaybeSelectList :: MaybeSelectList ->
                       T_MaybeSelectList
_sem_MaybeSelectList (Prelude.Just x) =
    (_sem_MaybeSelectList_Just (_sem_SelectList x))
_sem_MaybeSelectList Prelude.Nothing =
    _sem_MaybeSelectList_Nothing
-- semantic domain
type T_MaybeSelectList = Catalog ->
                         TypeCheckFlags ->
                         (Maybe TypeExtra) ->
                         ( MaybeSelectList,MaybeSelectList)
data Inh_MaybeSelectList = Inh_MaybeSelectList {_cat_Inh_MaybeSelectList :: Catalog,_flags_Inh_MaybeSelectList :: TypeCheckFlags,_imCast_Inh_MaybeSelectList :: (Maybe TypeExtra)}
data Syn_MaybeSelectList = Syn_MaybeSelectList {_annotatedTree_Syn_MaybeSelectList :: MaybeSelectList,_originalTree_Syn_MaybeSelectList :: MaybeSelectList}
_wrap_MaybeSelectList :: T_MaybeSelectList ->
                        Inh_MaybeSelectList ->
                        Syn_MaybeSelectList
_wrap_MaybeSelectList sem (Inh_MaybeSelectList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_MaybeSelectList _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeSelectList_Just :: T_SelectList ->
                            T_MaybeSelectList
_sem_MaybeSelectList_Just just_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _justOdownEnv :: Environment
              _justOexpectedCast :: Bool
              _justOexpectedType :: (Maybe [TypeExtra])
              _justOassignmentCastContext :: Bool
              _lhsOannotatedTree :: MaybeSelectList
              _lhsOoriginalTree :: MaybeSelectList
              _justOcat :: Catalog
              _justOflags :: TypeCheckFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: SelectList
              _justIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _justIoriginalTree :: SelectList
              _justIupEnv :: Environment
              _justIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 57, column 28)
              _justOdownEnv =
                  ({-# LINE 57 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 5437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 58, column 28)
              _justOexpectedCast =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 5443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 59, column 28)
              _justOexpectedType =
                  ({-# LINE 59 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 5449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 812, column 28)
              _justOassignmentCastContext =
                  ({-# LINE 812 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 5461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 5467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupEnv,_justIupType) =
                  just_ _justOassignmentCastContext _justOcat _justOdownEnv _justOexpectedCast _justOexpectedType _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeSelectList_Nothing :: T_MaybeSelectList
_sem_MaybeSelectList_Nothing =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeSelectList
              _lhsOoriginalTree :: MaybeSelectList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeTablePartitionDef --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeTablePartitionDef 
         originalTree         : MaybeTablePartitionDef 
   alternatives:
      alternative Just:
         child just           : TablePartitionDef 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeTablePartitionDef = Maybe (TablePartitionDef)
-- cata
_sem_MaybeTablePartitionDef :: MaybeTablePartitionDef ->
                              T_MaybeTablePartitionDef
_sem_MaybeTablePartitionDef (Prelude.Just x) =
    (_sem_MaybeTablePartitionDef_Just (_sem_TablePartitionDef x))
_sem_MaybeTablePartitionDef Prelude.Nothing =
    _sem_MaybeTablePartitionDef_Nothing
-- semantic domain
type T_MaybeTablePartitionDef = Catalog ->
                                TypeCheckFlags ->
                                (Maybe TypeExtra) ->
                                ( MaybeTablePartitionDef,MaybeTablePartitionDef)
data Inh_MaybeTablePartitionDef = Inh_MaybeTablePartitionDef {_cat_Inh_MaybeTablePartitionDef :: Catalog,_flags_Inh_MaybeTablePartitionDef :: TypeCheckFlags,_imCast_Inh_MaybeTablePartitionDef :: (Maybe TypeExtra)}
data Syn_MaybeTablePartitionDef = Syn_MaybeTablePartitionDef {_annotatedTree_Syn_MaybeTablePartitionDef :: MaybeTablePartitionDef,_originalTree_Syn_MaybeTablePartitionDef :: MaybeTablePartitionDef}
_wrap_MaybeTablePartitionDef :: T_MaybeTablePartitionDef ->
                               Inh_MaybeTablePartitionDef ->
                               Syn_MaybeTablePartitionDef
_wrap_MaybeTablePartitionDef sem (Inh_MaybeTablePartitionDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_MaybeTablePartitionDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeTablePartitionDef_Just :: T_TablePartitionDef ->
                                   T_MaybeTablePartitionDef
_sem_MaybeTablePartitionDef_Just just_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeTablePartitionDef
              _lhsOoriginalTree :: MaybeTablePartitionDef
              _justOcat :: Catalog
              _justOflags :: TypeCheckFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: TablePartitionDef
              _justIoriginalTree :: TablePartitionDef
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 5593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 5599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeTablePartitionDef_Nothing :: T_MaybeTablePartitionDef
_sem_MaybeTablePartitionDef_Nothing =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeTablePartitionDef
              _lhsOoriginalTree :: MaybeTablePartitionDef
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 5651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Name --------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
         tpe                  : Either [TypeError] TypeExtra
      synthesized attributes:
         annotatedTree        : Name 
         originalTree         : Name 
   alternatives:
      alternative Name:
         child ann            : Annotation 
         child is             : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AntiName:
         child string         : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Name = Name (Annotation) (([NameComponent]))
          | AntiName (String)
          deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_Name :: Name ->
            T_Name
_sem_Name (Name _ann _is) =
    (_sem_Name_Name (_sem_Annotation _ann) _is)
_sem_Name (AntiName _string) =
    (_sem_Name_AntiName _string)
-- semantic domain
type T_Name = Catalog ->
              TypeCheckFlags ->
              (Maybe TypeExtra) ->
              (Either [TypeError] TypeExtra) ->
              ( Name,Name)
data Inh_Name = Inh_Name {_cat_Inh_Name :: Catalog,_flags_Inh_Name :: TypeCheckFlags,_imCast_Inh_Name :: (Maybe TypeExtra),_tpe_Inh_Name :: (Either [TypeError] TypeExtra)}
data Syn_Name = Syn_Name {_annotatedTree_Syn_Name :: Name,_originalTree_Syn_Name :: Name}
_wrap_Name :: T_Name ->
             Inh_Name ->
             Syn_Name
_wrap_Name sem (Inh_Name _lhsIcat _lhsIflags _lhsIimCast _lhsItpe) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsItpe
     in  (Syn_Name _lhsOannotatedTree _lhsOoriginalTree))
_sem_Name_Name :: T_Annotation ->
                 ([NameComponent]) ->
                 T_Name
_sem_Name_Name ann_ is_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Name
              _lhsOoriginalTree :: Name
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Name _annIannotatedTree is_
                   {-# LINE 5734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Name _annIoriginalTree is_
                   {-# LINE 5740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsItpe
                   {-# LINE 5776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Name_AntiName :: String ->
                     T_Name
_sem_Name_AntiName string_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Name
              _lhsOoriginalTree :: Name
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiName string_
                   {-# LINE 5794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiName string_
                   {-# LINE 5800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameComponentList -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : NameComponentList 
         originalTree         : NameComponentList 
   alternatives:
      alternative Cons:
         child hd             : {NameComponent}
         child tl             : NameComponentList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameComponentList = [(NameComponent)]
-- cata
_sem_NameComponentList :: NameComponentList ->
                         T_NameComponentList
_sem_NameComponentList list =
    (Prelude.foldr _sem_NameComponentList_Cons _sem_NameComponentList_Nil list)
-- semantic domain
type T_NameComponentList = Catalog ->
                           TypeCheckFlags ->
                           (Maybe TypeExtra) ->
                           ( NameComponentList,NameComponentList)
data Inh_NameComponentList = Inh_NameComponentList {_cat_Inh_NameComponentList :: Catalog,_flags_Inh_NameComponentList :: TypeCheckFlags,_imCast_Inh_NameComponentList :: (Maybe TypeExtra)}
data Syn_NameComponentList = Syn_NameComponentList {_annotatedTree_Syn_NameComponentList :: NameComponentList,_originalTree_Syn_NameComponentList :: NameComponentList}
_wrap_NameComponentList :: T_NameComponentList ->
                          Inh_NameComponentList ->
                          Syn_NameComponentList
_wrap_NameComponentList sem (Inh_NameComponentList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_NameComponentList _lhsOannotatedTree _lhsOoriginalTree))
_sem_NameComponentList_Cons :: NameComponent ->
                              T_NameComponentList ->
                              T_NameComponentList
_sem_NameComponentList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameComponentList
              _lhsOoriginalTree :: NameComponentList
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _tlIannotatedTree :: NameComponentList
              _tlIoriginalTree :: NameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) hd_ _tlIannotatedTree
                   {-# LINE 5874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) hd_ _tlIoriginalTree
                   {-# LINE 5880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_NameComponentList_Nil :: T_NameComponentList
_sem_NameComponentList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameComponentList
              _lhsOoriginalTree :: NameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 5926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 5932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5944 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameTypeNameListPair ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : NameTypeNameListPair 
         originalTree         : NameTypeNameListPair 
   alternatives:
      alternative Tuple:
         child x1             : Name 
         child x2             : TypeNameList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameTypeNameListPair = ( Name,TypeNameList)
-- cata
_sem_NameTypeNameListPair :: NameTypeNameListPair ->
                            T_NameTypeNameListPair
_sem_NameTypeNameListPair ( x1,x2) =
    (_sem_NameTypeNameListPair_Tuple (_sem_Name x1) (_sem_TypeNameList x2))
-- semantic domain
type T_NameTypeNameListPair = Catalog ->
                              TypeCheckFlags ->
                              (Maybe TypeExtra) ->
                              ( NameTypeNameListPair,NameTypeNameListPair)
data Inh_NameTypeNameListPair = Inh_NameTypeNameListPair {_cat_Inh_NameTypeNameListPair :: Catalog,_flags_Inh_NameTypeNameListPair :: TypeCheckFlags,_imCast_Inh_NameTypeNameListPair :: (Maybe TypeExtra)}
data Syn_NameTypeNameListPair = Syn_NameTypeNameListPair {_annotatedTree_Syn_NameTypeNameListPair :: NameTypeNameListPair,_originalTree_Syn_NameTypeNameListPair :: NameTypeNameListPair}
_wrap_NameTypeNameListPair :: T_NameTypeNameListPair ->
                             Inh_NameTypeNameListPair ->
                             Syn_NameTypeNameListPair
_wrap_NameTypeNameListPair sem (Inh_NameTypeNameListPair _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_NameTypeNameListPair _lhsOannotatedTree _lhsOoriginalTree))
_sem_NameTypeNameListPair_Tuple :: T_Name ->
                                  T_TypeNameList ->
                                  T_NameTypeNameListPair
_sem_NameTypeNameListPair_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _x1Otpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: NameTypeNameListPair
              _lhsOoriginalTree :: NameTypeNameListPair
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: Name
              _x1IoriginalTree :: Name
              _x2IannotatedTree :: TypeNameList
              _x2IoriginalTree :: TypeNameList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 60, column 34)
              _x1Otpe =
                  ({-# LINE 60 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 6008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 6014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 6020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IoriginalTree) =
                  x1_ _x1Ocat _x1Oflags _x1OimCast _x1Otpe
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameTypeNameListPairList ------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : NameTypeNameListPairList 
         originalTree         : NameTypeNameListPairList 
   alternatives:
      alternative Cons:
         child hd             : NameTypeNameListPair 
         child tl             : NameTypeNameListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameTypeNameListPairList = [NameTypeNameListPair]
-- cata
_sem_NameTypeNameListPairList :: NameTypeNameListPairList ->
                                T_NameTypeNameListPairList
_sem_NameTypeNameListPairList list =
    (Prelude.foldr _sem_NameTypeNameListPairList_Cons _sem_NameTypeNameListPairList_Nil (Prelude.map _sem_NameTypeNameListPair list))
-- semantic domain
type T_NameTypeNameListPairList = Catalog ->
                                  TypeCheckFlags ->
                                  (Maybe TypeExtra) ->
                                  ( NameTypeNameListPairList,NameTypeNameListPairList)
data Inh_NameTypeNameListPairList = Inh_NameTypeNameListPairList {_cat_Inh_NameTypeNameListPairList :: Catalog,_flags_Inh_NameTypeNameListPairList :: TypeCheckFlags,_imCast_Inh_NameTypeNameListPairList :: (Maybe TypeExtra)}
data Syn_NameTypeNameListPairList = Syn_NameTypeNameListPairList {_annotatedTree_Syn_NameTypeNameListPairList :: NameTypeNameListPairList,_originalTree_Syn_NameTypeNameListPairList :: NameTypeNameListPairList}
_wrap_NameTypeNameListPairList :: T_NameTypeNameListPairList ->
                                 Inh_NameTypeNameListPairList ->
                                 Syn_NameTypeNameListPairList
_wrap_NameTypeNameListPairList sem (Inh_NameTypeNameListPairList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_NameTypeNameListPairList _lhsOannotatedTree _lhsOoriginalTree))
_sem_NameTypeNameListPairList_Cons :: T_NameTypeNameListPair ->
                                     T_NameTypeNameListPairList ->
                                     T_NameTypeNameListPairList
_sem_NameTypeNameListPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPairList
              _lhsOoriginalTree :: NameTypeNameListPairList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: NameTypeNameListPair
              _hdIoriginalTree :: NameTypeNameListPair
              _tlIannotatedTree :: NameTypeNameListPairList
              _tlIoriginalTree :: NameTypeNameListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 6139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 6145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_NameTypeNameListPairList_Nil :: T_NameTypeNameListPairList
_sem_NameTypeNameListPairList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPairList
              _lhsOoriginalTree :: NameTypeNameListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 6211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 6217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- OnExpr ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : OnExpr 
         originalTree         : OnExpr 
   alternatives:
      alternative Just:
         child just           : JoinExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type OnExpr = Maybe (JoinExpr)
-- cata
_sem_OnExpr :: OnExpr ->
              T_OnExpr
_sem_OnExpr (Prelude.Just x) =
    (_sem_OnExpr_Just (_sem_JoinExpr x))
_sem_OnExpr Prelude.Nothing =
    _sem_OnExpr_Nothing
-- semantic domain
type T_OnExpr = Catalog ->
                Environment ->
                TypeCheckFlags ->
                (Maybe TypeExtra) ->
                ( OnExpr,OnExpr)
data Inh_OnExpr = Inh_OnExpr {_cat_Inh_OnExpr :: Catalog,_downEnv_Inh_OnExpr :: Environment,_flags_Inh_OnExpr :: TypeCheckFlags,_imCast_Inh_OnExpr :: (Maybe TypeExtra)}
data Syn_OnExpr = Syn_OnExpr {_annotatedTree_Syn_OnExpr :: OnExpr,_originalTree_Syn_OnExpr :: OnExpr}
_wrap_OnExpr :: T_OnExpr ->
               Inh_OnExpr ->
               Syn_OnExpr
_wrap_OnExpr sem (Inh_OnExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_OnExpr _lhsOannotatedTree _lhsOoriginalTree))
_sem_OnExpr_Just :: T_JoinExpr ->
                   T_OnExpr
_sem_OnExpr_Just just_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: OnExpr
              _lhsOoriginalTree :: OnExpr
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: JoinExpr
              _justIoriginalTree :: JoinExpr
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 6295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 6301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 6325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOdownEnv _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_OnExpr_Nothing :: T_OnExpr
_sem_OnExpr_Nothing =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: OnExpr
              _lhsOoriginalTree :: OnExpr
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ParamDef ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ParamDef 
         originalTree         : ParamDef 
   alternatives:
      alternative ParamDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ParamDefTp:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data ParamDef = ParamDef (Annotation) (NameComponent) (TypeName)
              | ParamDefTp (Annotation) (TypeName)
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_ParamDef :: ParamDef ->
                T_ParamDef
_sem_ParamDef (ParamDef _ann _name _typ) =
    (_sem_ParamDef_ParamDef (_sem_Annotation _ann) _name (_sem_TypeName _typ))
_sem_ParamDef (ParamDefTp _ann _typ) =
    (_sem_ParamDef_ParamDefTp (_sem_Annotation _ann) (_sem_TypeName _typ))
-- semantic domain
type T_ParamDef = Catalog ->
                  TypeCheckFlags ->
                  (Maybe TypeExtra) ->
                  ( ParamDef,ParamDef)
data Inh_ParamDef = Inh_ParamDef {_cat_Inh_ParamDef :: Catalog,_flags_Inh_ParamDef :: TypeCheckFlags,_imCast_Inh_ParamDef :: (Maybe TypeExtra)}
data Syn_ParamDef = Syn_ParamDef {_annotatedTree_Syn_ParamDef :: ParamDef,_originalTree_Syn_ParamDef :: ParamDef}
_wrap_ParamDef :: T_ParamDef ->
                 Inh_ParamDef ->
                 Syn_ParamDef
_wrap_ParamDef sem (Inh_ParamDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ParamDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_ParamDef_ParamDef :: T_Annotation ->
                         NameComponent ->
                         T_TypeName ->
                         T_ParamDef
_sem_ParamDef_ParamDef ann_ name_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ParamDef
              _lhsOoriginalTree :: ParamDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 61, column 25)
              _annOtpe =
                  ({-# LINE 61 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 6449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDef _annIannotatedTree name_ _typIannotatedTree
                   {-# LINE 6455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDef _annIoriginalTree name_ _typIoriginalTree
                   {-# LINE 6461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ParamDef_ParamDefTp :: T_Annotation ->
                           T_TypeName ->
                           T_ParamDef
_sem_ParamDef_ParamDefTp ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ParamDef
              _lhsOoriginalTree :: ParamDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 62, column 27)
              _annOtpe =
                  ({-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 6541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDefTp _annIannotatedTree _typIannotatedTree
                   {-# LINE 6547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDefTp _annIoriginalTree _typIoriginalTree
                   {-# LINE 6553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6589 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6595 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6601 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ParamDefList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ParamDefList 
         originalTree         : ParamDefList 
   alternatives:
      alternative Cons:
         child hd             : ParamDef 
         child tl             : ParamDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ParamDefList = [ParamDef]
-- cata
_sem_ParamDefList :: ParamDefList ->
                    T_ParamDefList
_sem_ParamDefList list =
    (Prelude.foldr _sem_ParamDefList_Cons _sem_ParamDefList_Nil (Prelude.map _sem_ParamDef list))
-- semantic domain
type T_ParamDefList = Catalog ->
                      TypeCheckFlags ->
                      (Maybe TypeExtra) ->
                      ( ParamDefList,ParamDefList)
data Inh_ParamDefList = Inh_ParamDefList {_cat_Inh_ParamDefList :: Catalog,_flags_Inh_ParamDefList :: TypeCheckFlags,_imCast_Inh_ParamDefList :: (Maybe TypeExtra)}
data Syn_ParamDefList = Syn_ParamDefList {_annotatedTree_Syn_ParamDefList :: ParamDefList,_originalTree_Syn_ParamDefList :: ParamDefList}
_wrap_ParamDefList :: T_ParamDefList ->
                     Inh_ParamDefList ->
                     Syn_ParamDefList
_wrap_ParamDefList sem (Inh_ParamDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ParamDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ParamDefList_Cons :: T_ParamDef ->
                         T_ParamDefList ->
                         T_ParamDefList
_sem_ParamDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDefList
              _lhsOoriginalTree :: ParamDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ParamDef
              _hdIoriginalTree :: ParamDef
              _tlIannotatedTree :: ParamDefList
              _tlIoriginalTree :: ParamDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 6672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 6678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ParamDefList_Nil :: T_ParamDefList
_sem_ParamDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDefList
              _lhsOoriginalTree :: ParamDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 6744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 6750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- QueryExpr ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
         outerDownEnv         : Maybe Environment
      synthesized attributes:
         annotatedTree        : QueryExpr 
         originalTree         : QueryExpr 
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative Select:
         child ann            : Annotation 
         child selDistinct    : {Distinct}
         child selSelectList  : SelectList 
         child selTref        : TableRefList 
         child selWhere       : MaybeBoolExpr 
         child selGroupBy     : ScalarExprList 
         child selHaving      : MaybeBoolExpr 
         child selOrderBy     : ScalarExprDirectionPairList 
         child selLimit       : MaybeScalarExpr 
         child selOffset      : MaybeScalarExpr 
         child selOption      : {[QueryHint]}
         visit 0:
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local tpe         : {Either [TypeError] TypeExtra}
            local selGroupBy  : _
            local annotatedTree : _
            local originalTree : _
      alternative CombineQueryExpr:
         child ann            : Annotation 
         child cqType         : {CombineType}
         child cqQe0          : QueryExpr 
         child cqQe1          : QueryExpr 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local annotatedTree : _
            local originalTree : _
      alternative Values:
         child ann            : Annotation 
         child qeValues       : ScalarExprListList 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local annotatedTree : _
            local originalTree : _
      alternative WithQueryExpr:
         child ann            : Annotation 
         child withs          : WithQueryList 
         child withQe         : QueryExpr 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local annotatedTree : _
            local originalTree : _
-}

data QueryExpr
    = Select { ann:: (Annotation)
             ,selDistinct :: ( Distinct)
             ,selSelectList :: ( SelectList)
             ,selTref :: ( TableRefList)
             ,selWhere :: ( MaybeBoolExpr)
             ,selGroupBy :: ( ScalarExprList)
             ,selHaving :: ( MaybeBoolExpr)
             ,selOrderBy :: ( ScalarExprDirectionPairList)
             ,selLimit :: ( MaybeScalarExpr)
             ,selOffset :: ( MaybeScalarExpr)
             ,selOption :: ( [QueryHint])
        }
    |  CombineQueryExpr { ann:: (Annotation)
                       ,cqType :: ( CombineType)
                       ,cqQe0 :: ( QueryExpr)
                       ,cqQe1 :: ( QueryExpr)
        }
    |  Values { ann:: (Annotation)
             ,qeValues:: (ScalarExprListList)
        }
    |  WithQueryExpr { ann :: ( Annotation)
                    ,withs :: ( WithQueryList)
                    ,withQe :: ( QueryExpr)

-- todo: represent parens explicitly in queryexpr
--    | QueryExprParens ex:: QueryExpr


    } deriving (Eq,Show,Data,Typeable)

-- cata
_sem_QueryExpr :: QueryExpr ->
                 T_QueryExpr
_sem_QueryExpr (Select _ann _selDistinct _selSelectList _selTref _selWhere _selGroupBy _selHaving _selOrderBy _selLimit _selOffset _selOption) =
    (_sem_QueryExpr_Select (_sem_Annotation _ann) _selDistinct (_sem_SelectList _selSelectList) (_sem_TableRefList _selTref) (_sem_MaybeBoolExpr _selWhere) (_sem_ScalarExprList _selGroupBy) (_sem_MaybeBoolExpr _selHaving) (_sem_ScalarExprDirectionPairList _selOrderBy) (_sem_MaybeScalarExpr _selLimit) (_sem_MaybeScalarExpr _selOffset) _selOption)
_sem_QueryExpr (CombineQueryExpr _ann _cqType _cqQe0 _cqQe1) =
    (_sem_QueryExpr_CombineQueryExpr (_sem_Annotation _ann) _cqType (_sem_QueryExpr _cqQe0) (_sem_QueryExpr _cqQe1))
_sem_QueryExpr (Values _ann _qeValues) =
    (_sem_QueryExpr_Values (_sem_Annotation _ann) (_sem_ScalarExprListList _qeValues))
_sem_QueryExpr (WithQueryExpr _ann _withs _withQe) =
    (_sem_QueryExpr_WithQueryExpr (_sem_Annotation _ann) (_sem_WithQueryList _withs) (_sem_QueryExpr _withQe))
-- semantic domain
type T_QueryExpr = Bool ->
                   Catalog ->
                   (Maybe [TypeExtra]) ->
                   TypeCheckFlags ->
                   (Maybe TypeExtra) ->
                   (Maybe Environment) ->
                   ( QueryExpr,QueryExpr,(Maybe [(Text,TypeExtra)]))
data Inh_QueryExpr = Inh_QueryExpr {_assignmentCastContext_Inh_QueryExpr :: Bool,_cat_Inh_QueryExpr :: Catalog,_expectedType_Inh_QueryExpr :: (Maybe [TypeExtra]),_flags_Inh_QueryExpr :: TypeCheckFlags,_imCast_Inh_QueryExpr :: (Maybe TypeExtra),_outerDownEnv_Inh_QueryExpr :: (Maybe Environment)}
data Syn_QueryExpr = Syn_QueryExpr {_annotatedTree_Syn_QueryExpr :: QueryExpr,_originalTree_Syn_QueryExpr :: QueryExpr,_upType_Syn_QueryExpr :: (Maybe [(Text,TypeExtra)])}
_wrap_QueryExpr :: T_QueryExpr ->
                  Inh_QueryExpr ->
                  Syn_QueryExpr
_wrap_QueryExpr sem (Inh_QueryExpr _lhsIassignmentCastContext _lhsIcat _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIouterDownEnv) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIouterDownEnv
     in  (Syn_QueryExpr _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_QueryExpr_Select :: T_Annotation ->
                        Distinct ->
                        T_SelectList ->
                        T_TableRefList ->
                        T_MaybeBoolExpr ->
                        T_ScalarExprList ->
                        T_MaybeBoolExpr ->
                        T_ScalarExprDirectionPairList ->
                        T_MaybeScalarExpr ->
                        T_MaybeScalarExpr ->
                        ([QueryHint]) ->
                        T_QueryExpr
_sem_QueryExpr_Select ann_ selDistinct_ selSelectList_ selTref_ selWhere_ selGroupBy_ selHaving_ selOrderBy_ selLimit_ selOffset_ selOption_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _selGroupByOexpectedCast :: Bool
              _selLimitOdownEnv :: Environment
              _selLimitOexpectedCast :: Bool
              _selOffsetOdownEnv :: Environment
              _selOffsetOexpectedCast :: Bool
              _selSelectListOexpectedCast :: Bool
              _selSelectListOdownEnv :: Environment
              _selGroupByOdownEnv :: Environment
              _selHavingOdownEnv :: Environment
              _selOrderByOdownEnv :: Environment
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _selWhereOdownEnv :: Environment
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _lhsOannotatedTree :: QueryExpr
              _selGroupByOexpectedTypes :: ([TypeExtra])
              _selLimitOexpectedType :: (Maybe TypeExtra)
              _selOffsetOexpectedType :: (Maybe TypeExtra)
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _selSelectListOassignmentCastContext :: Bool
              _selSelectListOcat :: Catalog
              _selSelectListOexpectedType :: (Maybe [TypeExtra])
              _selSelectListOflags :: TypeCheckFlags
              _selSelectListOimCast :: (Maybe TypeExtra)
              _selTrefOcat :: Catalog
              _selTrefOflags :: TypeCheckFlags
              _selTrefOimCast :: (Maybe TypeExtra)
              _selWhereOcat :: Catalog
              _selWhereOflags :: TypeCheckFlags
              _selWhereOimCast :: (Maybe TypeExtra)
              _selGroupByOassignmentCastContext :: Bool
              _selGroupByOcat :: Catalog
              _selGroupByOflags :: TypeCheckFlags
              _selGroupByOimCast :: (Maybe TypeExtra)
              _selHavingOcat :: Catalog
              _selHavingOflags :: TypeCheckFlags
              _selHavingOimCast :: (Maybe TypeExtra)
              _selOrderByOcat :: Catalog
              _selOrderByOflags :: TypeCheckFlags
              _selOrderByOimCast :: (Maybe TypeExtra)
              _selLimitOassignmentCastContext :: Bool
              _selLimitOcat :: Catalog
              _selLimitOflags :: TypeCheckFlags
              _selLimitOimCast :: (Maybe TypeExtra)
              _selOffsetOassignmentCastContext :: Bool
              _selOffsetOcat :: Catalog
              _selOffsetOflags :: TypeCheckFlags
              _selOffsetOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selSelectListIannotatedTree :: SelectList
              _selSelectListIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _selSelectListIoriginalTree :: SelectList
              _selSelectListIupEnv :: Environment
              _selSelectListIupType :: (Maybe [(Text,TypeExtra)])
              _selTrefIannotatedTree :: TableRefList
              _selTrefIoriginalTree :: TableRefList
              _selTrefIupEnv :: Environment
              _selWhereIannotatedTree :: MaybeBoolExpr
              _selWhereIoriginalTree :: MaybeBoolExpr
              _selGroupByIannotatedTree :: ScalarExprList
              _selGroupByIoriginalTree :: ScalarExprList
              _selGroupByIupTypes :: ([Maybe TypeExtra])
              _selHavingIannotatedTree :: MaybeBoolExpr
              _selHavingIoriginalTree :: MaybeBoolExpr
              _selOrderByIannotatedTree :: ScalarExprDirectionPairList
              _selOrderByIoriginalTree :: ScalarExprDirectionPairList
              _selLimitIannotatedTree :: MaybeScalarExpr
              _selLimitIoriginalTree :: MaybeScalarExpr
              _selLimitIupType :: (Maybe TypeExtra)
              _selOffsetIannotatedTree :: MaybeScalarExpr
              _selOffsetIoriginalTree :: MaybeScalarExpr
              _selOffsetIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 63, column 24)
              _selGroupByOexpectedCast =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 6958 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 64, column 24)
              _selLimitOdownEnv =
                  ({-# LINE 64 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 6964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 65, column 24)
              _selLimitOexpectedCast =
                  ({-# LINE 65 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 6970 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 66, column 24)
              _selOffsetOdownEnv =
                  ({-# LINE 66 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 6976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 67, column 24)
              _selOffsetOexpectedCast =
                  ({-# LINE 67 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 6982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 68, column 24)
              _selSelectListOexpectedCast =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 6988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 40, column 9)
              _selSelectListOdownEnv =
                  ({-# LINE 40 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
                   {-# LINE 6994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 41, column 9)
              _selGroupByOdownEnv =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
                   {-# LINE 7000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 42, column 9)
              _selHavingOdownEnv =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
                   {-# LINE 7006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 62, column 9)
              _selOrderByOdownEnv =
                  ({-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   E.orderByEnvironment _selSelectListIupEnv _selTrefIupEnv
                   {-# LINE 7012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 63, column 9)
              _tpee =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe (Left []) Right _selSelectListIupType
                   {-# LINE 7018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 66, column 9)
              _selWhereOdownEnv =
                  ({-# LINE 66 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe _selTrefIupEnv
                    (\e -> E.createCorrelatedSubqueryEnvironment e _selTrefIupEnv)
                    _lhsIouterDownEnv
                   {-# LINE 7026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 76, column 9)
              _tpe =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 7032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 79, column 9)
              _lhsOupType =
                  ({-# LINE 79 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 7038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 172, column 9)
              _selGroupBy =
                  ({-# LINE 172 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   case _selGroupByIannotatedTree of
                       [App e nm@(Name _ [Nmc "cube"]) es] ->
                         [App e{anType = (Just (mkTypeExtra $ ScalarType "int4"))
                               ,anErrs = []
                               } nm es]
                       x -> x
                   {-# LINE 7049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 181, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Select _annIannotatedTree
                          selDistinct_
                          _selSelectListIannotatedTree
                          _selTrefIannotatedTree
                          _selWhereIannotatedTree
                          _selGroupBy
                          _selHavingIannotatedTree
                          _selOrderByIannotatedTree
                          _selLimitIannotatedTree
                          _selOffsetIannotatedTree
                          selOption_
                   {-# LINE 7065 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 763, column 7)
              _selGroupByOexpectedTypes =
                  ({-# LINE 763 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 7071 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 764, column 7)
              _selLimitOexpectedType =
                  ({-# LINE 764 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 7077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 765, column 7)
              _selOffsetOexpectedType =
                  ({-# LINE 765 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 7083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Select _annIannotatedTree selDistinct_ _selSelectListIannotatedTree _selTrefIannotatedTree _selWhereIannotatedTree _selGroupByIannotatedTree _selHavingIannotatedTree _selOrderByIannotatedTree _selLimitIannotatedTree _selOffsetIannotatedTree selOption_
                   {-# LINE 7089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Select _annIoriginalTree selDistinct_ _selSelectListIoriginalTree _selTrefIoriginalTree _selWhereIoriginalTree _selGroupByIoriginalTree _selHavingIoriginalTree _selOrderByIoriginalTree _selLimitIoriginalTree _selOffsetIoriginalTree selOption_
                   {-# LINE 7095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 7125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOexpectedType =
                  ({-# LINE 159 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 7143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7149 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selTrefOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7161 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selTrefOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7167 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selTrefOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7173 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selWhereOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7179 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selWhereOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7185 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selWhereOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7215 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selHavingOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selHavingOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selHavingOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOrderByOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7239 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOrderByOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOrderByOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7257 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7287 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7293 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7299 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selSelectListIannotatedTree,_selSelectListIcolExprs,_selSelectListIoriginalTree,_selSelectListIupEnv,_selSelectListIupType) =
                  selSelectList_ _selSelectListOassignmentCastContext _selSelectListOcat _selSelectListOdownEnv _selSelectListOexpectedCast _selSelectListOexpectedType _selSelectListOflags _selSelectListOimCast
              ( _selTrefIannotatedTree,_selTrefIoriginalTree,_selTrefIupEnv) =
                  selTref_ _selTrefOcat _selTrefOflags _selTrefOimCast
              ( _selWhereIannotatedTree,_selWhereIoriginalTree) =
                  selWhere_ _selWhereOcat _selWhereOdownEnv _selWhereOflags _selWhereOimCast
              ( _selGroupByIannotatedTree,_selGroupByIoriginalTree,_selGroupByIupTypes) =
                  selGroupBy_ _selGroupByOassignmentCastContext _selGroupByOcat _selGroupByOdownEnv _selGroupByOexpectedCast _selGroupByOexpectedTypes _selGroupByOflags _selGroupByOimCast
              ( _selHavingIannotatedTree,_selHavingIoriginalTree) =
                  selHaving_ _selHavingOcat _selHavingOdownEnv _selHavingOflags _selHavingOimCast
              ( _selOrderByIannotatedTree,_selOrderByIoriginalTree) =
                  selOrderBy_ _selOrderByOcat _selOrderByOdownEnv _selOrderByOflags _selOrderByOimCast
              ( _selLimitIannotatedTree,_selLimitIoriginalTree,_selLimitIupType) =
                  selLimit_ _selLimitOassignmentCastContext _selLimitOcat _selLimitOdownEnv _selLimitOexpectedCast _selLimitOexpectedType _selLimitOflags _selLimitOimCast
              ( _selOffsetIannotatedTree,_selOffsetIoriginalTree,_selOffsetIupType) =
                  selOffset_ _selOffsetOassignmentCastContext _selOffsetOcat _selOffsetOdownEnv _selOffsetOexpectedCast _selOffsetOexpectedType _selOffsetOflags _selOffsetOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_QueryExpr_CombineQueryExpr :: T_Annotation ->
                                  CombineType ->
                                  T_QueryExpr ->
                                  T_QueryExpr ->
                                  T_QueryExpr
_sem_QueryExpr_CombineQueryExpr ann_ cqType_ cqQe0_ cqQe1_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _lhsOannotatedTree :: QueryExpr
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _cqQe0OassignmentCastContext :: Bool
              _cqQe0Ocat :: Catalog
              _cqQe0OexpectedType :: (Maybe [TypeExtra])
              _cqQe0Oflags :: TypeCheckFlags
              _cqQe0OimCast :: (Maybe TypeExtra)
              _cqQe0OouterDownEnv :: (Maybe Environment)
              _cqQe1OassignmentCastContext :: Bool
              _cqQe1Ocat :: Catalog
              _cqQe1OexpectedType :: (Maybe [TypeExtra])
              _cqQe1Oflags :: TypeCheckFlags
              _cqQe1OimCast :: (Maybe TypeExtra)
              _cqQe1OouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _cqQe0IannotatedTree :: QueryExpr
              _cqQe0IoriginalTree :: QueryExpr
              _cqQe0IupType :: (Maybe [(Text,TypeExtra)])
              _cqQe1IannotatedTree :: QueryExpr
              _cqQe1IoriginalTree :: QueryExpr
              _cqQe1IupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 76, column 9)
              _tpe =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 7365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 79, column 9)
              _lhsOupType =
                  ({-# LINE 79 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 7371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 90, column 9)
              _tpee =
                  ({-# LINE 90 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   do
                   a <- maybe (Left []) Right _cqQe0IupType
                   b <- maybe (Left []) Right _cqQe1IupType
                   let uts = zipWithM (\(_,te1) (_,te2) -> resolveResultSetTypeExtra _lhsIcat [te1,te2])
                                 a b
                   case uts of
                     Left{} -> Left [IncompatibleUnionTypes (CompositeType a) (CompositeType b)]
                     Right uts' -> return $ zipWith (\(n,_) te -> (n,te)) a uts'
                   {-# LINE 7384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CombineQueryExpr _annIannotatedTree cqType_ _cqQe0IannotatedTree _cqQe1IannotatedTree
                   {-# LINE 7390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CombineQueryExpr _annIoriginalTree cqType_ _cqQe0IoriginalTree _cqQe1IoriginalTree
                   {-# LINE 7396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 7432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 7450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OouterDownEnv =
                  ({-# LINE 23 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
                   {-# LINE 7468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 7486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OouterDownEnv =
                  ({-# LINE 23 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
                   {-# LINE 7504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _cqQe0IannotatedTree,_cqQe0IoriginalTree,_cqQe0IupType) =
                  cqQe0_ _cqQe0OassignmentCastContext _cqQe0Ocat _cqQe0OexpectedType _cqQe0Oflags _cqQe0OimCast _cqQe0OouterDownEnv
              ( _cqQe1IannotatedTree,_cqQe1IoriginalTree,_cqQe1IupType) =
                  cqQe1_ _cqQe1OassignmentCastContext _cqQe1Ocat _cqQe1OexpectedType _cqQe1Oflags _cqQe1OimCast _cqQe1OouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_QueryExpr_Values :: T_Annotation ->
                        T_ScalarExprListList ->
                        T_QueryExpr
_sem_QueryExpr_Values ann_ qeValues_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _qeValuesOdownEnv :: Environment
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _qeValuesOexpectedCast :: Bool
              _lhsOannotatedTree :: QueryExpr
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _qeValuesOassignmentCastContext :: Bool
              _qeValuesOcat :: Catalog
              _qeValuesOexpectedType :: (Maybe [TypeExtra])
              _qeValuesOflags :: TypeCheckFlags
              _qeValuesOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _qeValuesIannotatedTree :: ScalarExprListList
              _qeValuesIoriginalTree :: ScalarExprListList
              _qeValuesIupType :: (Either [TypeError] [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 69, column 24)
              _qeValuesOdownEnv =
                  ({-# LINE 69 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 7548 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 76, column 9)
              _tpe =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 7554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 79, column 9)
              _lhsOupType =
                  ({-# LINE 79 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 7560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 87, column 9)
              _tpee =
                  ({-# LINE 87 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _qeValuesIupType
                   {-# LINE 7566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 88, column 9)
              _qeValuesOexpectedCast =
                  ({-# LINE 88 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   True
                   {-# LINE 7572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Values _annIannotatedTree _qeValuesIannotatedTree
                   {-# LINE 7578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Values _annIoriginalTree _qeValuesIoriginalTree
                   {-# LINE 7584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7608 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7614 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 7620 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7626 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7632 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOexpectedType =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 7638 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _qeValuesIannotatedTree,_qeValuesIoriginalTree,_qeValuesIupType) =
                  qeValues_ _qeValuesOassignmentCastContext _qeValuesOcat _qeValuesOdownEnv _qeValuesOexpectedCast _qeValuesOexpectedType _qeValuesOflags _qeValuesOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_QueryExpr_WithQueryExpr :: T_Annotation ->
                               T_WithQueryList ->
                               T_QueryExpr ->
                               T_QueryExpr
_sem_QueryExpr_WithQueryExpr ann_ withs_ withQe_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _lhsOannotatedTree :: QueryExpr
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _withsOcat :: Catalog
              _withsOflags :: TypeCheckFlags
              _withsOimCast :: (Maybe TypeExtra)
              _withQeOassignmentCastContext :: Bool
              _withQeOcat :: Catalog
              _withQeOexpectedType :: (Maybe [TypeExtra])
              _withQeOflags :: TypeCheckFlags
              _withQeOimCast :: (Maybe TypeExtra)
              _withQeOouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _withsIannotatedTree :: WithQueryList
              _withsIoriginalTree :: WithQueryList
              _withQeIannotatedTree :: QueryExpr
              _withQeIoriginalTree :: QueryExpr
              _withQeIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 76, column 9)
              _tpe =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 7697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 79, column 9)
              _lhsOupType =
                  ({-# LINE 79 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 7703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 85, column 9)
              _tpee =
                  ({-# LINE 85 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe (Left []) Right _withQeIupType
                   {-# LINE 7709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQueryExpr _annIannotatedTree _withsIannotatedTree _withQeIannotatedTree
                   {-# LINE 7715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQueryExpr _annIoriginalTree _withsIoriginalTree _withQeIoriginalTree
                   {-# LINE 7721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 7757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 7781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 7793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOouterDownEnv =
                  ({-# LINE 23 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
                   {-# LINE 7811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _withsIannotatedTree,_withsIoriginalTree) =
                  withs_ _withsOcat _withsOflags _withsOimCast
              ( _withQeIannotatedTree,_withQeIoriginalTree,_withQeIupType) =
                  withQe_ _withQeOassignmentCastContext _withQeOcat _withQeOexpectedType _withQeOflags _withQeOimCast _withQeOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- Root --------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
      synthesized attributes:
         annotatedTree        : Root 
         originalTree         : Root 
   alternatives:
      alternative Root:
         child statements     : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Root = Root (StatementList)
          deriving ( Show)
-- cata
_sem_Root :: Root ->
            T_Root
_sem_Root (Root _statements) =
    (_sem_Root_Root (_sem_StatementList _statements))
-- semantic domain
type T_Root = Catalog ->
              TypeCheckFlags ->
              ( Root,Root)
data Inh_Root = Inh_Root {_cat_Inh_Root :: Catalog,_flags_Inh_Root :: TypeCheckFlags}
data Syn_Root = Syn_Root {_annotatedTree_Syn_Root :: Root,_originalTree_Syn_Root :: Root}
_wrap_Root :: T_Root ->
             Inh_Root ->
             Syn_Root
_wrap_Root sem (Inh_Root _lhsIcat _lhsIflags) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags
     in  (Syn_Root _lhsOannotatedTree _lhsOoriginalTree))
_sem_Root_Root :: T_StatementList ->
                 T_Root
_sem_Root_Root statements_ =
    (\ _lhsIcat
       _lhsIflags ->
         (let _statementsOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: Root
              _lhsOoriginalTree :: Root
              _statementsOcat :: Catalog
              _statementsOflags :: TypeCheckFlags
              _statementsIannotatedTree :: StatementList
              _statementsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 132, column 8)
              _statementsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 7871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Root _statementsIannotatedTree
                   {-# LINE 7877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Root _statementsIoriginalTree
                   {-# LINE 7883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _statementsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _statementsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _statementsIannotatedTree,_statementsIoriginalTree) =
                  statements_ _statementsOcat _statementsOflags _statementsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- RowConstraint -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : RowConstraint 
         originalTree         : RowConstraint 
   alternatives:
      alternative NullConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative NotNullConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative IdentityConstraint:
         child ann            : Annotation 
         child name           : {String}
         child seedAndInc     : {(Maybe (Integer,Integer))}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowCheckConstraint:
         child ann            : Annotation 
         child name           : {String}
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowUniqueConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowPrimaryKeyConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowReferenceConstraint:
         child ann            : Annotation 
         child name           : {String}
         child table          : Name 
         child att            : {Maybe NameComponent}
         child onUpdate       : {Cascade}
         child onDelete       : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data RowConstraint = NullConstraint (Annotation) (String)
                   | NotNullConstraint (Annotation) (String)
                   | IdentityConstraint (Annotation) (String) (((Maybe (Integer,Integer))))
                   | RowCheckConstraint (Annotation) (String) (ScalarExpr)
                   | RowUniqueConstraint (Annotation) (String)
                   | RowPrimaryKeyConstraint (Annotation) (String)
                   | RowReferenceConstraint (Annotation) (String) (Name) ((Maybe NameComponent)) (Cascade) (Cascade)
                   deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_RowConstraint :: RowConstraint ->
                     T_RowConstraint
_sem_RowConstraint (NullConstraint _ann _name) =
    (_sem_RowConstraint_NullConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (NotNullConstraint _ann _name) =
    (_sem_RowConstraint_NotNullConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (IdentityConstraint _ann _name _seedAndInc) =
    (_sem_RowConstraint_IdentityConstraint (_sem_Annotation _ann) _name _seedAndInc)
_sem_RowConstraint (RowCheckConstraint _ann _name _expr) =
    (_sem_RowConstraint_RowCheckConstraint (_sem_Annotation _ann) _name (_sem_ScalarExpr _expr))
_sem_RowConstraint (RowUniqueConstraint _ann _name) =
    (_sem_RowConstraint_RowUniqueConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (RowPrimaryKeyConstraint _ann _name) =
    (_sem_RowConstraint_RowPrimaryKeyConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (RowReferenceConstraint _ann _name _table _att _onUpdate _onDelete) =
    (_sem_RowConstraint_RowReferenceConstraint (_sem_Annotation _ann) _name (_sem_Name _table) _att _onUpdate _onDelete)
-- semantic domain
type T_RowConstraint = Catalog ->
                       TypeCheckFlags ->
                       (Maybe TypeExtra) ->
                       ( RowConstraint,RowConstraint)
data Inh_RowConstraint = Inh_RowConstraint {_cat_Inh_RowConstraint :: Catalog,_flags_Inh_RowConstraint :: TypeCheckFlags,_imCast_Inh_RowConstraint :: (Maybe TypeExtra)}
data Syn_RowConstraint = Syn_RowConstraint {_annotatedTree_Syn_RowConstraint :: RowConstraint,_originalTree_Syn_RowConstraint :: RowConstraint}
_wrap_RowConstraint :: T_RowConstraint ->
                      Inh_RowConstraint ->
                      Syn_RowConstraint
_wrap_RowConstraint sem (Inh_RowConstraint _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_RowConstraint _lhsOannotatedTree _lhsOoriginalTree))
_sem_RowConstraint_NullConstraint :: T_Annotation ->
                                    String ->
                                    T_RowConstraint
_sem_RowConstraint_NullConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 72, column 36)
              _annOtpe =
                  ({-# LINE 72 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullConstraint _annIannotatedTree name_
                   {-# LINE 8035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullConstraint _annIoriginalTree name_
                   {-# LINE 8041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8053 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8059 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8065 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8071 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_NotNullConstraint :: T_Annotation ->
                                       String ->
                                       T_RowConstraint
_sem_RowConstraint_NotNullConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 71, column 39)
              _annOtpe =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NotNullConstraint _annIannotatedTree name_
                   {-# LINE 8101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NotNullConstraint _annIoriginalTree name_
                   {-# LINE 8107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_IdentityConstraint :: T_Annotation ->
                                        String ->
                                        ((Maybe (Integer,Integer))) ->
                                        T_RowConstraint
_sem_RowConstraint_IdentityConstraint ann_ name_ seedAndInc_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 70, column 40)
              _annOtpe =
                  ({-# LINE 70 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   IdentityConstraint _annIannotatedTree name_ seedAndInc_
                   {-# LINE 8168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   IdentityConstraint _annIoriginalTree name_ seedAndInc_
                   {-# LINE 8174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowCheckConstraint :: T_Annotation ->
                                        String ->
                                        T_ScalarExpr ->
                                        T_RowConstraint
_sem_RowConstraint_RowCheckConstraint ann_ name_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 73, column 40)
              _annOtpe =
                  ({-# LINE 73 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 74, column 40)
              _exprOdownEnv =
                  ({-# LINE 74 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 8247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 75, column 40)
              _exprOexpectedCast =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 8253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 76, column 40)
              _exprOexpectedType =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 8259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 149, column 26)
              _exprOodbcFunction =
                  ({-# LINE 149 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 8265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 813, column 40)
              _exprOassignmentCastContext =
                  ({-# LINE 813 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 8271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowCheckConstraint _annIannotatedTree name_ _exprIannotatedTree
                   {-# LINE 8277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowCheckConstraint _annIoriginalTree name_ _exprIoriginalTree
                   {-# LINE 8283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowUniqueConstraint :: T_Annotation ->
                                         String ->
                                         T_RowConstraint
_sem_RowConstraint_RowUniqueConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 80, column 41)
              _annOtpe =
                  ({-# LINE 80 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowUniqueConstraint _annIannotatedTree name_
                   {-# LINE 8363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowUniqueConstraint _annIoriginalTree name_
                   {-# LINE 8369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowPrimaryKeyConstraint :: T_Annotation ->
                                             String ->
                                             T_RowConstraint
_sem_RowConstraint_RowPrimaryKeyConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 77, column 45)
              _annOtpe =
                  ({-# LINE 77 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowPrimaryKeyConstraint _annIannotatedTree name_
                   {-# LINE 8429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowPrimaryKeyConstraint _annIoriginalTree name_
                   {-# LINE 8435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowReferenceConstraint :: T_Annotation ->
                                            String ->
                                            T_Name ->
                                            (Maybe NameComponent) ->
                                            Cascade ->
                                            Cascade ->
                                            T_RowConstraint
_sem_RowConstraint_RowReferenceConstraint ann_ name_ table_ att_ onUpdate_ onDelete_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _tableOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckFlags
              _tableOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 78, column 44)
              _annOtpe =
                  ({-# LINE 78 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 79, column 44)
              _tableOtpe =
                  ({-# LINE 79 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 8505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowReferenceConstraint _annIannotatedTree name_ _tableIannotatedTree att_ onUpdate_ onDelete_
                   {-# LINE 8511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowReferenceConstraint _annIoriginalTree name_ _tableIoriginalTree att_ onUpdate_ onDelete_
                   {-# LINE 8517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- RowConstraintList -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : RowConstraintList 
         originalTree         : RowConstraintList 
   alternatives:
      alternative Cons:
         child hd             : RowConstraint 
         child tl             : RowConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type RowConstraintList = [RowConstraint]
-- cata
_sem_RowConstraintList :: RowConstraintList ->
                         T_RowConstraintList
_sem_RowConstraintList list =
    (Prelude.foldr _sem_RowConstraintList_Cons _sem_RowConstraintList_Nil (Prelude.map _sem_RowConstraint list))
-- semantic domain
type T_RowConstraintList = Catalog ->
                           TypeCheckFlags ->
                           (Maybe TypeExtra) ->
                           ( RowConstraintList,RowConstraintList)
data Inh_RowConstraintList = Inh_RowConstraintList {_cat_Inh_RowConstraintList :: Catalog,_flags_Inh_RowConstraintList :: TypeCheckFlags,_imCast_Inh_RowConstraintList :: (Maybe TypeExtra)}
data Syn_RowConstraintList = Syn_RowConstraintList {_annotatedTree_Syn_RowConstraintList :: RowConstraintList,_originalTree_Syn_RowConstraintList :: RowConstraintList}
_wrap_RowConstraintList :: T_RowConstraintList ->
                          Inh_RowConstraintList ->
                          Syn_RowConstraintList
_wrap_RowConstraintList sem (Inh_RowConstraintList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_RowConstraintList _lhsOannotatedTree _lhsOoriginalTree))
_sem_RowConstraintList_Cons :: T_RowConstraint ->
                              T_RowConstraintList ->
                              T_RowConstraintList
_sem_RowConstraintList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraintList
              _lhsOoriginalTree :: RowConstraintList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: RowConstraint
              _hdIoriginalTree :: RowConstraint
              _tlIannotatedTree :: RowConstraintList
              _tlIoriginalTree :: RowConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 8636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 8642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8654 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraintList_Nil :: T_RowConstraintList
_sem_RowConstraintList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraintList
              _lhsOoriginalTree :: RowConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 8708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 8714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExpr --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
         odbcFunction         : Bool
      synthesized attributes:
         annotatedTree        : ScalarExpr 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : ScalarExpr 
         upType               : Maybe TypeExtra
   alternatives:
      alternative NumberLit:
         child ann            : Annotation 
         child d              : {String}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local digChars    : _
            local annotatedTree : _
            local originalTree : _
      alternative StringLit:
         child ann            : Annotation 
         child value          : {String}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative NullLit:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative BooleanLit:
         child ann            : Annotation 
         child b              : {Bool}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative TypedStringLit:
         child ann            : Annotation 
         child tn             : TypeName 
         child value          : {String}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Interval:
         child ann            : Annotation 
         child value          : {String}
         child field          : {IntervalField}
         child prec           : {Maybe Int}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Identifier:
         child ann            : Annotation 
         child i              : Name 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local elkp        : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Star:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local starCS      : _
            local annotatedTree : _
            local originalTree : _
      alternative QStar:
         child ann            : Annotation 
         child q              : {NameComponent}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local starCS      : _
            local annotatedTree : _
            local originalTree : _
      alternative PositionalArg:
         child ann            : Annotation 
         child p              : {Integer}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Placeholder:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative PrefixOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg            : ScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative PostfixOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg            : ScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative BinaryOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg0           : ScalarExpr 
         child arg1           : ScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative SpecialOp:
         child ann            : Annotation 
         child opName         : Name 
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative Extract:
         child ann            : Annotation 
         child field          : {ExtractField}
         child e              : ScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative App:
         child ann            : Annotation 
         child funName        : Name 
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : {Either [TypeError] TypeExtra}
            local funName     : _
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative AggregateApp:
         child ann            : Annotation 
         child aggDistinct    : {Distinct}
         child fn             : ScalarExpr 
         child orderBy        : ScalarExprDirectionPairList 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative WindowApp:
         child ann            : Annotation 
         child fn             : ScalarExpr 
         child partitionBy    : ScalarExprList 
         child orderBy        : ScalarExprDirectionPairList 
         child frm            : {Maybe FrameClause}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Cast:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child tn             : TypeName 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative ImplicitCast:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child te             : {TypeExtra}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Case:
         child ann            : Annotation 
         child cases          : CaseScalarExprListScalarExprPairList 
         child els            : MaybeScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local whenTypes   : _
            local thenTypes   : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative CaseSimple:
         child ann            : Annotation 
         child value          : ScalarExpr 
         child cases          : CaseScalarExprListScalarExprPairList 
         child els            : MaybeScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local whenTypes   : _
            local thenTypes   : _
            local whent       : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Parens:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative InPredicate:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child i              : {Bool}
         child list           : InList 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local rt          : {Either [TypeError] TypeExtra}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Exists:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative ScalarSubQuery:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative LiftApp:
         child ann            : Annotation 
         child oper           : Name 
         child flav           : {LiftFlavour}
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative OdbcLiteral:
         child ann            : Annotation 
         child olt            : {OdbcLiteralType}
         child val            : {String}
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative OdbcFunc:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local upType      : _
            local dialectTypeName : {Text -> Either [TypeError] Text}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative AntiScalarExpr:
         child string         : {String}
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data ScalarExpr = NumberLit (Annotation) (String)
                | StringLit (Annotation) (String)
                | NullLit (Annotation)
                | BooleanLit (Annotation) (Bool)
                | TypedStringLit (Annotation) (TypeName) (String)
                | Interval (Annotation) (String) (IntervalField) ((Maybe Int))
                | Identifier (Annotation) (Name)
                | Star (Annotation)
                | QStar (Annotation) (NameComponent)
                | PositionalArg (Annotation) (Integer)
                | Placeholder (Annotation)
                | PrefixOp (Annotation) (Name) (ScalarExpr)
                | PostfixOp (Annotation) (Name) (ScalarExpr)
                | BinaryOp (Annotation) (Name) (ScalarExpr) (ScalarExpr)
                | SpecialOp (Annotation) (Name) (ScalarExprList)
                | Extract (Annotation) (ExtractField) (ScalarExpr)
                | App (Annotation) (Name) (ScalarExprList)
                | AggregateApp (Annotation) (Distinct) (ScalarExpr) (ScalarExprDirectionPairList)
                | WindowApp (Annotation) (ScalarExpr) (ScalarExprList) (ScalarExprDirectionPairList) ((Maybe FrameClause))
                | Cast (Annotation) (ScalarExpr) (TypeName)
                | ImplicitCast (Annotation) (ScalarExpr) (TypeExtra)
                | Case (Annotation) (CaseScalarExprListScalarExprPairList) (MaybeScalarExpr)
                | CaseSimple (Annotation) (ScalarExpr) (CaseScalarExprListScalarExprPairList) (MaybeScalarExpr)
                | Parens (Annotation) (ScalarExpr)
                | InPredicate (Annotation) (ScalarExpr) (Bool) (InList)
                | Exists (Annotation) (QueryExpr)
                | ScalarSubQuery (Annotation) (QueryExpr)
                | LiftApp (Annotation) (Name) (LiftFlavour) (ScalarExprList)
                | OdbcLiteral (Annotation) (OdbcLiteralType) (String)
                | OdbcFunc (Annotation) (ScalarExpr)
                | AntiScalarExpr (String)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_ScalarExpr :: ScalarExpr ->
                  T_ScalarExpr
_sem_ScalarExpr (NumberLit _ann _d) =
    (_sem_ScalarExpr_NumberLit (_sem_Annotation _ann) _d)
_sem_ScalarExpr (StringLit _ann _value) =
    (_sem_ScalarExpr_StringLit (_sem_Annotation _ann) _value)
_sem_ScalarExpr (NullLit _ann) =
    (_sem_ScalarExpr_NullLit (_sem_Annotation _ann))
_sem_ScalarExpr (BooleanLit _ann _b) =
    (_sem_ScalarExpr_BooleanLit (_sem_Annotation _ann) _b)
_sem_ScalarExpr (TypedStringLit _ann _tn _value) =
    (_sem_ScalarExpr_TypedStringLit (_sem_Annotation _ann) (_sem_TypeName _tn) _value)
_sem_ScalarExpr (Interval _ann _value _field _prec) =
    (_sem_ScalarExpr_Interval (_sem_Annotation _ann) _value _field _prec)
_sem_ScalarExpr (Identifier _ann _i) =
    (_sem_ScalarExpr_Identifier (_sem_Annotation _ann) (_sem_Name _i))
_sem_ScalarExpr (Star _ann) =
    (_sem_ScalarExpr_Star (_sem_Annotation _ann))
_sem_ScalarExpr (QStar _ann _q) =
    (_sem_ScalarExpr_QStar (_sem_Annotation _ann) _q)
_sem_ScalarExpr (PositionalArg _ann _p) =
    (_sem_ScalarExpr_PositionalArg (_sem_Annotation _ann) _p)
_sem_ScalarExpr (Placeholder _ann) =
    (_sem_ScalarExpr_Placeholder (_sem_Annotation _ann))
_sem_ScalarExpr (PrefixOp _ann _opName _arg) =
    (_sem_ScalarExpr_PrefixOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExpr _arg))
_sem_ScalarExpr (PostfixOp _ann _opName _arg) =
    (_sem_ScalarExpr_PostfixOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExpr _arg))
_sem_ScalarExpr (BinaryOp _ann _opName _arg0 _arg1) =
    (_sem_ScalarExpr_BinaryOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExpr _arg0) (_sem_ScalarExpr _arg1))
_sem_ScalarExpr (SpecialOp _ann _opName _args) =
    (_sem_ScalarExpr_SpecialOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExprList _args))
_sem_ScalarExpr (Extract _ann _field _e) =
    (_sem_ScalarExpr_Extract (_sem_Annotation _ann) _field (_sem_ScalarExpr _e))
_sem_ScalarExpr (App _ann _funName _args) =
    (_sem_ScalarExpr_App (_sem_Annotation _ann) (_sem_Name _funName) (_sem_ScalarExprList _args))
_sem_ScalarExpr (AggregateApp _ann _aggDistinct _fn _orderBy) =
    (_sem_ScalarExpr_AggregateApp (_sem_Annotation _ann) _aggDistinct (_sem_ScalarExpr _fn) (_sem_ScalarExprDirectionPairList _orderBy))
_sem_ScalarExpr (WindowApp _ann _fn _partitionBy _orderBy _frm) =
    (_sem_ScalarExpr_WindowApp (_sem_Annotation _ann) (_sem_ScalarExpr _fn) (_sem_ScalarExprList _partitionBy) (_sem_ScalarExprDirectionPairList _orderBy) _frm)
_sem_ScalarExpr (Cast _ann _expr _tn) =
    (_sem_ScalarExpr_Cast (_sem_Annotation _ann) (_sem_ScalarExpr _expr) (_sem_TypeName _tn))
_sem_ScalarExpr (ImplicitCast _ann _expr _te) =
    (_sem_ScalarExpr_ImplicitCast (_sem_Annotation _ann) (_sem_ScalarExpr _expr) _te)
_sem_ScalarExpr (Case _ann _cases _els) =
    (_sem_ScalarExpr_Case (_sem_Annotation _ann) (_sem_CaseScalarExprListScalarExprPairList _cases) (_sem_MaybeScalarExpr _els))
_sem_ScalarExpr (CaseSimple _ann _value _cases _els) =
    (_sem_ScalarExpr_CaseSimple (_sem_Annotation _ann) (_sem_ScalarExpr _value) (_sem_CaseScalarExprListScalarExprPairList _cases) (_sem_MaybeScalarExpr _els))
_sem_ScalarExpr (Parens _ann _ex) =
    (_sem_ScalarExpr_Parens (_sem_Annotation _ann) (_sem_ScalarExpr _ex))
_sem_ScalarExpr (InPredicate _ann _expr _i _list) =
    (_sem_ScalarExpr_InPredicate (_sem_Annotation _ann) (_sem_ScalarExpr _expr) _i (_sem_InList _list))
_sem_ScalarExpr (Exists _ann _sel) =
    (_sem_ScalarExpr_Exists (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_ScalarExpr (ScalarSubQuery _ann _sel) =
    (_sem_ScalarExpr_ScalarSubQuery (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_ScalarExpr (LiftApp _ann _oper _flav _args) =
    (_sem_ScalarExpr_LiftApp (_sem_Annotation _ann) (_sem_Name _oper) _flav (_sem_ScalarExprList _args))
_sem_ScalarExpr (OdbcLiteral _ann _olt _val) =
    (_sem_ScalarExpr_OdbcLiteral (_sem_Annotation _ann) _olt _val)
_sem_ScalarExpr (OdbcFunc _ann _ex) =
    (_sem_ScalarExpr_OdbcFunc (_sem_Annotation _ann) (_sem_ScalarExpr _ex))
_sem_ScalarExpr (AntiScalarExpr _string) =
    (_sem_ScalarExpr_AntiScalarExpr _string)
-- semantic domain
type T_ScalarExpr = Bool ->
                    Catalog ->
                    Environment ->
                    Bool ->
                    (Maybe TypeExtra) ->
                    TypeCheckFlags ->
                    (Maybe TypeExtra) ->
                    Bool ->
                    ( ScalarExpr,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),ScalarExpr,(Maybe TypeExtra))
data Inh_ScalarExpr = Inh_ScalarExpr {_assignmentCastContext_Inh_ScalarExpr :: Bool,_cat_Inh_ScalarExpr :: Catalog,_downEnv_Inh_ScalarExpr :: Environment,_expectedCast_Inh_ScalarExpr :: Bool,_expectedType_Inh_ScalarExpr :: (Maybe TypeExtra),_flags_Inh_ScalarExpr :: TypeCheckFlags,_imCast_Inh_ScalarExpr :: (Maybe TypeExtra),_odbcFunction_Inh_ScalarExpr :: Bool}
data Syn_ScalarExpr = Syn_ScalarExpr {_annotatedTree_Syn_ScalarExpr :: ScalarExpr,_colExprs_Syn_ScalarExpr :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_ScalarExpr :: ScalarExpr,_upType_Syn_ScalarExpr :: (Maybe TypeExtra)}
_wrap_ScalarExpr :: T_ScalarExpr ->
                   Inh_ScalarExpr ->
                   Syn_ScalarExpr
_wrap_ScalarExpr sem (Inh_ScalarExpr _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIodbcFunction) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIodbcFunction
     in  (Syn_ScalarExpr _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupType))
_sem_ScalarExpr_NumberLit :: T_Annotation ->
                            String ->
                            T_ScalarExpr
_sem_ScalarExpr_NumberLit ann_ d_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 9219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 9225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 9231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 9237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 9248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 9254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 249, column 9)
              _tpe =
                  ({-# LINE 249 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   if all (`elem` _digChars    ) d_
                   then (mkTypeExtraNN . ScalarType) <$> classifyInteger (tcfDialect _lhsIflags) d_
                   else (mkTypeExtraNN . ScalarType) <$> (_dialectTypeName     "numeric")
                   {-# LINE 9262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 253, column 9)
              _digChars =
                  ({-# LINE 253 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   concatMap show [(0::Int)..9]
                   {-# LINE 9268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NumberLit _annIannotatedTree d_
                   {-# LINE 9274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NumberLit _annIoriginalTree d_
                   {-# LINE 9280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9292 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_StringLit :: T_Annotation ->
                            String ->
                            T_ScalarExpr
_sem_ScalarExpr_StringLit ann_ value_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 9351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 9357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 9363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 9369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 9380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 9386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 257, column 9)
              _tpe =
                  ({-# LINE 257 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ (mkTypeExtraNN UnknownType) {tePrecision = Just $ length value_}
                   {-# LINE 9392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   StringLit _annIannotatedTree value_
                   {-# LINE 9398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   StringLit _annIoriginalTree value_
                   {-# LINE 9404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9428 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_NullLit :: T_Annotation ->
                          T_ScalarExpr
_sem_ScalarExpr_NullLit ann_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 9474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 9480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 9486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 9492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 9503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 9509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 260, column 10)
              _tpe =
                  ({-# LINE 260 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtra UnknownType
                   {-# LINE 9515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullLit _annIannotatedTree
                   {-# LINE 9521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullLit _annIoriginalTree
                   {-# LINE 9527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_BooleanLit :: T_Annotation ->
                             Bool ->
                             T_ScalarExpr
_sem_ScalarExpr_BooleanLit ann_ b_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 9598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 9604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 9610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 9616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 9627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 9633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 240, column 9)
              _tpe =
                  ({-# LINE 240 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap (mkTypeExtraNN . ScalarType) $ _dialectTypeName     "boolean"
                   {-# LINE 9639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BooleanLit _annIannotatedTree b_
                   {-# LINE 9645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BooleanLit _annIoriginalTree b_
                   {-# LINE 9651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_TypedStringLit :: T_Annotation ->
                                 T_TypeName ->
                                 String ->
                                 T_ScalarExpr
_sem_ScalarExpr_TypedStringLit ann_ tn_ value_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: TypeName
              _tnInamedType :: (Maybe TypeExtra)
              _tnIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 9729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 9735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 9741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 9747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 9758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 9764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 270, column 10)
              _tpe =
                  ({-# LINE 270 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _tnInamedType
                   {-# LINE 9770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypedStringLit _annIannotatedTree _tnIannotatedTree value_
                   {-# LINE 9776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypedStringLit _annIoriginalTree _tnIoriginalTree value_
                   {-# LINE 9782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnInamedType,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Interval :: T_Annotation ->
                           String ->
                           IntervalField ->
                           (Maybe Int) ->
                           T_ScalarExpr
_sem_ScalarExpr_Interval ann_ value_ field_ prec_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 9875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 9881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 9887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 9893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 9904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 9910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 282, column 9)
              _tpe =
                  ({-# LINE 282 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtraNN $ ScalarType "interval"
                   {-# LINE 9916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Interval _annIannotatedTree value_ field_ prec_
                   {-# LINE 9922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Interval _annIoriginalTree value_ field_ prec_
                   {-# LINE 9928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Identifier :: T_Annotation ->
                             T_Name ->
                             T_ScalarExpr
_sem_ScalarExpr_Identifier ann_ i_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _iOtpe :: (Either [TypeError] TypeExtra)
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _iOcat :: Catalog
              _iOflags :: TypeCheckFlags
              _iOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _iIannotatedTree :: Name
              _iIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10040 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 325, column 10)
              _elkp =
                  ({-# LINE 325 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   E.envLookupIdentifier (nameComponents _iIoriginalTree) _lhsIdownEnv
                   {-# LINE 10046 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 326, column 10)
              _tpe =
                  ({-# LINE 326 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _elkp
                   {-# LINE 10052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 328, column 10)
              _lhsOannotatedTree =
                  ({-# LINE 328 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _annotatedTree
                   {-# LINE 10058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 329, column 10)
              _annotatedTree =
                  ({-# LINE 329 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let t = Identifier _annIannotatedTree _iIannotatedTree
                   in fromMaybe t $ do
                       case tcfAddQualifiers _lhsIflags of
                         False -> Nothing
                         True -> do
                                ((q,i),_) <- either (const Nothing) Just _elkp
                                if q /= ""
                                  then
                                       return $ Identifier _annIannotatedTree
                                                  (Name emptyAnnotation [Nmc $ T.unpack q, Nmc $ T.unpack i])
                                  else return t
                   {-# LINE 10074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 349, column 10)
              _iOtpe =
                  ({-# LINE 349 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 10080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Identifier _annIoriginalTree _iIoriginalTree
                   {-# LINE 10086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _iOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _iOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _iOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 10122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _iIannotatedTree,_iIoriginalTree) =
                  i_ _iOcat _iOflags _iOimCast _iOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Star :: T_Annotation ->
                       T_ScalarExpr
_sem_ScalarExpr_Star ann_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 710, column 9)
              _tpe =
                  ({-# LINE 710 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     Star _ ->
                       E.envExpandStar Nothing _lhsIdownEnv
                       >>= _starCS
                     QStar _ q -> do
                       E.envExpandStar (Just q) _lhsIdownEnv
                       >>= _starCS
                     _ -> Left [InternalError "wrong ctor in sem rule for star, qstar in scalarexprs.ag"]
                   {-# LINE 10219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 719, column 9)
              _starCS =
                  ({-# LINE 719 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right . mkTypeExtraNN . CompositeType . map (\((_q,n),t) -> (n,t))
                   {-# LINE 10225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Star _annIannotatedTree
                   {-# LINE 10231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Star _annIoriginalTree
                   {-# LINE 10237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_QStar :: T_Annotation ->
                        NameComponent ->
                        T_ScalarExpr
_sem_ScalarExpr_QStar ann_ q_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 710, column 9)
              _tpe =
                  ({-# LINE 710 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     Star _ ->
                       E.envExpandStar Nothing _lhsIdownEnv
                       >>= _starCS
                     QStar _ q -> do
                       E.envExpandStar (Just q) _lhsIdownEnv
                       >>= _starCS
                     _ -> Left [InternalError "wrong ctor in sem rule for star, qstar in scalarexprs.ag"]
                   {-# LINE 10357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 719, column 9)
              _starCS =
                  ({-# LINE 719 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right . mkTypeExtraNN . CompositeType . map (\((_q,n),t) -> (n,t))
                   {-# LINE 10363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QStar _annIannotatedTree q_
                   {-# LINE 10369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QStar _annIoriginalTree q_
                   {-# LINE 10375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_PositionalArg :: T_Annotation ->
                                Integer ->
                                T_ScalarExpr
_sem_ScalarExpr_PositionalArg ann_ p_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 731, column 9)
              _tpe =
                  ({-# LINE 731 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 10487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PositionalArg _annIannotatedTree p_
                   {-# LINE 10493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PositionalArg _annIoriginalTree p_
                   {-# LINE 10499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Placeholder :: T_Annotation ->
                              T_ScalarExpr
_sem_ScalarExpr_Placeholder ann_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 300, column 10)
              _tpe =
                  ({-# LINE 300 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtraNN UnknownType
                   {-# LINE 10610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Placeholder _annIannotatedTree
                   {-# LINE 10616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Placeholder _annIoriginalTree
                   {-# LINE 10622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_PrefixOp :: T_Annotation ->
                           T_Name ->
                           T_ScalarExpr ->
                           T_ScalarExpr
_sem_ScalarExpr_PrefixOp ann_ opName_ arg_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _argOodbcFunction :: Bool
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argOexpectedType :: (Maybe TypeExtra)
              _argOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _argOassignmentCastContext :: Bool
              _argOcat :: Catalog
              _argOdownEnv :: Environment
              _argOflags :: TypeCheckFlags
              _argOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _argIannotatedTree :: ScalarExpr
              _argIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _argIoriginalTree :: ScalarExpr
              _argIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 175, column 26)
              _argOodbcFunction =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 10755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 210, column 9)
              _opNameOtpe =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 10761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 364, column 10)
              _tpe =
                  ({-# LINE 364 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 10767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 433, column 10)
              _ttpe =
                  ({-# LINE 433 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat (nameComponents _opNameIoriginalTree) (getMaybeIntsFromLiterals [_argIoriginalTree]) [_argIupType]
                   {-# LINE 10773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 434, column 10)
              _argOexpectedType =
                  ({-# LINE 434 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t],_) -> Just t
                     _ -> Nothing
                   {-# LINE 10781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 456, column 9)
              _argOexpectedCast =
                  ({-# LINE 456 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 10787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrefixOp _annIannotatedTree _opNameIannotatedTree _argIannotatedTree
                   {-# LINE 10793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrefixOp _annIoriginalTree _opNameIoriginalTree _argIoriginalTree
                   {-# LINE 10799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 10841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 10847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 10859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 10871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _argIannotatedTree,_argIcolExprs,_argIoriginalTree,_argIupType) =
                  arg_ _argOassignmentCastContext _argOcat _argOdownEnv _argOexpectedCast _argOexpectedType _argOflags _argOimCast _argOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_PostfixOp :: T_Annotation ->
                            T_Name ->
                            T_ScalarExpr ->
                            T_ScalarExpr
_sem_ScalarExpr_PostfixOp ann_ opName_ arg_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _argOodbcFunction :: Bool
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argOexpectedType :: (Maybe TypeExtra)
              _argOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _argOassignmentCastContext :: Bool
              _argOcat :: Catalog
              _argOdownEnv :: Environment
              _argOflags :: TypeCheckFlags
              _argOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _argIannotatedTree :: ScalarExpr
              _argIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _argIoriginalTree :: ScalarExpr
              _argIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 10978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 175, column 26)
              _argOodbcFunction =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 10984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 210, column 9)
              _opNameOtpe =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 10990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 364, column 10)
              _tpe =
                  ({-# LINE 364 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 10996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 433, column 10)
              _ttpe =
                  ({-# LINE 433 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat (nameComponents _opNameIoriginalTree) (getMaybeIntsFromLiterals [_argIoriginalTree]) [_argIupType]
                   {-# LINE 11002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 434, column 10)
              _argOexpectedType =
                  ({-# LINE 434 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t],_) -> Just t
                     _ -> Nothing
                   {-# LINE 11010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 456, column 9)
              _argOexpectedCast =
                  ({-# LINE 456 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PostfixOp _annIannotatedTree _opNameIannotatedTree _argIannotatedTree
                   {-# LINE 11022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PostfixOp _annIoriginalTree _opNameIoriginalTree _argIoriginalTree
                   {-# LINE 11028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11040 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11046 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _argIannotatedTree,_argIcolExprs,_argIoriginalTree,_argIupType) =
                  arg_ _argOassignmentCastContext _argOcat _argOdownEnv _argOexpectedCast _argOexpectedType _argOflags _argOimCast _argOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_BinaryOp :: T_Annotation ->
                           T_Name ->
                           T_ScalarExpr ->
                           T_ScalarExpr ->
                           T_ScalarExpr
_sem_ScalarExpr_BinaryOp ann_ opName_ arg0_ arg1_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _arg0OodbcFunction :: Bool
              _arg1OodbcFunction :: Bool
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _arg0OexpectedType :: (Maybe TypeExtra)
              _arg1OexpectedType :: (Maybe TypeExtra)
              _arg0OexpectedCast :: Bool
              _arg1OexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _arg0OassignmentCastContext :: Bool
              _arg0Ocat :: Catalog
              _arg0OdownEnv :: Environment
              _arg0Oflags :: TypeCheckFlags
              _arg0OimCast :: (Maybe TypeExtra)
              _arg1OassignmentCastContext :: Bool
              _arg1Ocat :: Catalog
              _arg1OdownEnv :: Environment
              _arg1Oflags :: TypeCheckFlags
              _arg1OimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _arg0IannotatedTree :: ScalarExpr
              _arg0IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _arg0IoriginalTree :: ScalarExpr
              _arg0IupType :: (Maybe TypeExtra)
              _arg1IannotatedTree :: ScalarExpr
              _arg1IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _arg1IoriginalTree :: ScalarExpr
              _arg1IupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11185 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 11220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 176, column 16)
              _arg0OodbcFunction =
                  ({-# LINE 176 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 177, column 16)
              _arg1OodbcFunction =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 210, column 9)
              _opNameOtpe =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 11238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 364, column 10)
              _tpe =
                  ({-# LINE 364 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 11244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 425, column 10)
              _ttpe =
                  ({-# LINE 425 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags)
                             _lhsIcat (nameComponents _opNameIoriginalTree) (getMaybeIntsFromLiterals [_arg0IoriginalTree,_arg1IoriginalTree])
                             [_arg0IupType,_arg1IupType]
                   {-# LINE 11252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 428, column 10)
              (_arg0OexpectedType,_arg1OexpectedType) =
                  ({-# LINE 428 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t0,t1],_) -> (Just t0,Just t1)
                     _ -> (Nothing,Nothing)
                   {-# LINE 11260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 458, column 9)
              _arg0OexpectedCast =
                  ({-# LINE 458 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 459, column 9)
              _arg1OexpectedCast =
                  ({-# LINE 459 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BinaryOp _annIannotatedTree _opNameIannotatedTree _arg0IannotatedTree _arg1IannotatedTree
                   {-# LINE 11278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BinaryOp _annIoriginalTree _opNameIoriginalTree _arg0IoriginalTree _arg1IoriginalTree
                   {-# LINE 11284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11314 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0OassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0OdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11350 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1OassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1OdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _arg0IannotatedTree,_arg0IcolExprs,_arg0IoriginalTree,_arg0IupType) =
                  arg0_ _arg0OassignmentCastContext _arg0Ocat _arg0OdownEnv _arg0OexpectedCast _arg0OexpectedType _arg0Oflags _arg0OimCast _arg0OodbcFunction
              ( _arg1IannotatedTree,_arg1IcolExprs,_arg1IoriginalTree,_arg1IupType) =
                  arg1_ _arg1OassignmentCastContext _arg1Ocat _arg1OdownEnv _arg1OexpectedCast _arg1OexpectedType _arg1Oflags _arg1OimCast _arg1OodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_SpecialOp :: T_Annotation ->
                            T_Name ->
                            T_ScalarExprList ->
                            T_ScalarExpr
_sem_ScalarExpr_SpecialOp ann_ opName_ args_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argsOexpectedTypes :: ([TypeExtra])
              _argsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _argsOassignmentCastContext :: Bool
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 11493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 210, column 9)
              _opNameOtpe =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 11499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 364, column 10)
              _tpe =
                  ({-# LINE 364 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 11505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 439, column 10)
              _ttpe =
                  ({-# LINE 439 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat (nameComponents _opNameIoriginalTree) (getMaybeIntsFromLiterals _argsIoriginalTree) _argsIupTypes
                   {-# LINE 11511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 440, column 10)
              _argsOexpectedTypes =
                  ({-# LINE 440 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const []) id $ fmap fst _ttpe
                   {-# LINE 11517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 454, column 9)
              _argsOexpectedCast =
                  ({-# LINE 454 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SpecialOp _annIannotatedTree _opNameIannotatedTree _argsIannotatedTree
                   {-# LINE 11529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SpecialOp _annIoriginalTree _opNameIoriginalTree _argsIoriginalTree
                   {-# LINE 11535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11589 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11595 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11601 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Extract :: T_Annotation ->
                          ExtractField ->
                          T_ScalarExpr ->
                          T_ScalarExpr
_sem_ScalarExpr_Extract ann_ field_ e_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _eOodbcFunction :: Bool
              _eOexpectedType :: (Maybe TypeExtra)
              _eOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _eOassignmentCastContext :: Bool
              _eOcat :: Catalog
              _eOdownEnv :: Environment
              _eOflags :: TypeCheckFlags
              _eOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _eIannotatedTree :: ScalarExpr
              _eIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _eIoriginalTree :: ScalarExpr
              _eIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 11706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 171, column 15)
              _eOodbcFunction =
                  ({-# LINE 171 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 284, column 9)
              _tpe =
                  ({-# LINE 284 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   x <- maybe (Left []) Right _eIupType
                   if (teType x) `elem` (map ScalarType $ diDatetimeTypes $ tcfDialect _lhsIflags)
                     then do
                          i <- ScalarType <$> _dialectTypeName     "int"
                          return $ TypeExtra i Nothing Nothing $ teNullable x
                     else Left [NoMatchingOperator "extract" [teType x]]
                   {-# LINE 11724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 292, column 9)
              _eOexpectedType =
                  ({-# LINE 292 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   x <- _eIupType
                   either (const Nothing)
                          (Just . TypeExtra (teType x) Nothing Nothing . teNullable)
                          _tpe
                   {-# LINE 11734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 298, column 9)
              _eOexpectedCast =
                  ({-# LINE 298 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Extract _annIannotatedTree field_ _eIannotatedTree
                   {-# LINE 11746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Extract _annIoriginalTree field_ _eIoriginalTree
                   {-# LINE 11752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _eIannotatedTree,_eIcolExprs,_eIoriginalTree,_eIupType) =
                  e_ _eOassignmentCastContext _eOcat _eOdownEnv _eOexpectedCast _eOexpectedType _eOflags _eOimCast _eOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_App :: T_Annotation ->
                      T_Name ->
                      T_ScalarExprList ->
                      T_ScalarExpr
_sem_ScalarExpr_App ann_ funName_ args_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _funNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _argsOexpectedTypes :: ([TypeExtra])
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _funNameOcat :: Catalog
              _funNameOflags :: TypeCheckFlags
              _funNameOimCast :: (Maybe TypeExtra)
              _argsOassignmentCastContext :: Bool
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _funNameIannotatedTree :: Name
              _funNameIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 11909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 208, column 9)
              _funNameOtpe =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 11915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 364, column 10)
              _tpe =
                  ({-# LINE 364 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 11921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 366, column 10)
              _argsOexpectedTypes =
                  ({-# LINE 366 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const []) id $ fmap fst _ttpe
                   {-# LINE 11927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 380, column 10)
              _funName =
                  ({-# LINE 380 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let y = if _lhsIodbcFunction
                           then let f [] = []
                                    f [Nmc x] = [Nmc $ "!odbc-" ++ x]
                                    f [QNmc x] = [QNmc $ "!odbc-" ++ x]
                                    f [x] = [x]
                                    f (x:xs) = x:f xs
                                in (\(Name a nms) -> Name a (f nms)) _funNameIoriginalTree
                           else _funNameIoriginalTree
                   in                    y
                   {-# LINE 11941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 403, column 10)
              _ttpe =
                  ({-# LINE 403 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     (App _ (Name _ [Nmc "count"]) [Star _]) ->
                         tcAppLike (tcfDialect _lhsIflags)
                                   _lhsIcat (nameComponents _funName    )
                                   (getMaybeIntsFromLiterals _argsIoriginalTree)
                                   [Just $ mkTypeExtraNN UnknownType]
                     (App _ (Name _ [Nmc n]) [_,Identifier _ (Name _ [Nmc tyi])])
                         | _lhsIodbcFunction && map toLower n == "convert" -> do
                         (ts,_r) <- do
                                   t <- _dialectTypeName     "int"
                                   tcAppLike (tcfDialect _lhsIflags)
                                     _lhsIcat (nameComponents _funName    ) (getMaybeIntsFromLiterals _argsIoriginalTree)
                                     [Just $ mkTypeExtraNN UnknownType, Just $ mkTypeExtraNN $ ScalarType t]
                         r' <- maybe (Left [UnrecognisedIdentifier $ T.pack tyi]) (Right . mkTypeExtra)
                                  $ lookup (map toLower tyi) odbcConvertTypes
                         Right (ts, r')
                     _ -> tcAppLike (tcfDialect _lhsIflags)
                                    _lhsIcat (nameComponents _funName    ) (getMaybeIntsFromLiterals _argsIoriginalTree) _argsIupTypes
                   {-# LINE 11964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 454, column 9)
              _argsOexpectedCast =
                  ({-# LINE 454 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11970 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   App _annIannotatedTree _funNameIannotatedTree _argsIannotatedTree
                   {-# LINE 11976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   App _annIoriginalTree _funNameIoriginalTree _argsIoriginalTree
                   {-# LINE 11982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _funNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _funNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _funNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _funNameIannotatedTree,_funNameIoriginalTree) =
                  funName_ _funNameOcat _funNameOflags _funNameOimCast _funNameOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_AggregateApp :: T_Annotation ->
                               Distinct ->
                               T_ScalarExpr ->
                               T_ScalarExprDirectionPairList ->
                               T_ScalarExpr
_sem_ScalarExpr_AggregateApp ann_ aggDistinct_ fn_ orderBy_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _fnOodbcFunction :: Bool
              _fnOexpectedCast :: Bool
              _fnOexpectedType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _fnOassignmentCastContext :: Bool
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOflags :: TypeCheckFlags
              _fnOimCast :: (Maybe TypeExtra)
              _orderByOcat :: Catalog
              _orderByOdownEnv :: Environment
              _orderByOflags :: TypeCheckFlags
              _orderByOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fnIannotatedTree :: ScalarExpr
              _fnIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr
              _fnIupType :: (Maybe TypeExtra)
              _orderByIannotatedTree :: ScalarExprDirectionPairList
              _orderByIoriginalTree :: ScalarExprDirectionPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 12160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 178, column 20)
              _fnOodbcFunction =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 442, column 10)
              _tpe =
                  ({-# LINE 442 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _fnIoriginalTree of
                     (App _ fnm@(Name _ [Nmc "count"]) [Star _]) ->
                          fmap snd $ tcAppLike (tcfDialect _lhsIflags) _lhsIcat (nameComponents fnm) [] [Just $ mkTypeExtraNN UnknownType]
                     _ -> maybe (Left []) Right _fnIupType
                   {-# LINE 12175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 461, column 9)
              _fnOexpectedCast =
                  ({-# LINE 461 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 749, column 28)
              _fnOexpectedType =
                  ({-# LINE 749 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 12187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AggregateApp _annIannotatedTree aggDistinct_ _fnIannotatedTree _orderByIannotatedTree
                   {-# LINE 12193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AggregateApp _annIoriginalTree aggDistinct_ _fnIoriginalTree _orderByIoriginalTree
                   {-# LINE 12199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOassignmentCastContext _fnOcat _fnOdownEnv _fnOexpectedCast _fnOexpectedType _fnOflags _fnOimCast _fnOodbcFunction
              ( _orderByIannotatedTree,_orderByIoriginalTree) =
                  orderBy_ _orderByOcat _orderByOdownEnv _orderByOflags _orderByOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_WindowApp :: T_Annotation ->
                            T_ScalarExpr ->
                            T_ScalarExprList ->
                            T_ScalarExprDirectionPairList ->
                            (Maybe FrameClause) ->
                            T_ScalarExpr
_sem_ScalarExpr_WindowApp ann_ fn_ partitionBy_ orderBy_ frm_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _fnOodbcFunction :: Bool
              _fnOexpectedCast :: Bool
              _partitionByOexpectedCast :: Bool
              _fnOexpectedType :: (Maybe TypeExtra)
              _partitionByOexpectedTypes :: ([TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _fnOassignmentCastContext :: Bool
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOflags :: TypeCheckFlags
              _fnOimCast :: (Maybe TypeExtra)
              _partitionByOassignmentCastContext :: Bool
              _partitionByOcat :: Catalog
              _partitionByOdownEnv :: Environment
              _partitionByOflags :: TypeCheckFlags
              _partitionByOimCast :: (Maybe TypeExtra)
              _orderByOcat :: Catalog
              _orderByOdownEnv :: Environment
              _orderByOflags :: TypeCheckFlags
              _orderByOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fnIannotatedTree :: ScalarExpr
              _fnIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr
              _fnIupType :: (Maybe TypeExtra)
              _partitionByIannotatedTree :: ScalarExprList
              _partitionByIoriginalTree :: ScalarExprList
              _partitionByIupTypes :: ([Maybe TypeExtra])
              _orderByIannotatedTree :: ScalarExprDirectionPairList
              _orderByIoriginalTree :: ScalarExprDirectionPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 12394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 179, column 17)
              _fnOodbcFunction =
                  ({-# LINE 179 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 448, column 10)
              _tpe =
                  ({-# LINE 448 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _fnIupType
                   {-# LINE 12406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 461, column 9)
              _fnOexpectedCast =
                  ({-# LINE 461 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 464, column 9)
              _partitionByOexpectedCast =
                  ({-# LINE 464 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 749, column 28)
              _fnOexpectedType =
                  ({-# LINE 749 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 12424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 771, column 15)
              _partitionByOexpectedTypes =
                  ({-# LINE 771 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 12430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WindowApp _annIannotatedTree _fnIannotatedTree _partitionByIannotatedTree _orderByIannotatedTree frm_
                   {-# LINE 12436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WindowApp _annIoriginalTree _fnIoriginalTree _partitionByIoriginalTree _orderByIoriginalTree frm_
                   {-# LINE 12442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12460 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOassignmentCastContext _fnOcat _fnOdownEnv _fnOexpectedCast _fnOexpectedType _fnOflags _fnOimCast _fnOodbcFunction
              ( _partitionByIannotatedTree,_partitionByIoriginalTree,_partitionByIupTypes) =
                  partitionBy_ _partitionByOassignmentCastContext _partitionByOcat _partitionByOdownEnv _partitionByOexpectedCast _partitionByOexpectedTypes _partitionByOflags _partitionByOimCast
              ( _orderByIannotatedTree,_orderByIoriginalTree) =
                  orderBy_ _orderByOcat _orderByOdownEnv _orderByOflags _orderByOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Cast :: T_Annotation ->
                       T_ScalarExpr ->
                       T_TypeName ->
                       T_ScalarExpr
_sem_ScalarExpr_Cast ann_ expr_ tn_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _exprOodbcFunction :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _exprOassignmentCastContext :: Bool
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              _tnIannotatedTree :: TypeName
              _tnInamedType :: (Maybe TypeExtra)
              _tnIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 12657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 172, column 12)
              _exprOodbcFunction =
                  ({-# LINE 172 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 272, column 10)
              _tpe =
                  ({-# LINE 272 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let nullability = fromMaybe False $ teNullable <$> _exprIupType
                       setNullability te = te{teNullable = nullability}
                   in maybe (Left []) (Right . setNullability) _tnInamedType
                   {-# LINE 12671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 276, column 10)
              _exprOexpectedType =
                  ({-# LINE 276 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 12677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 277, column 10)
              _exprOexpectedCast =
                  ({-# LINE 277 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Cast _annIannotatedTree _exprIannotatedTree _tnIannotatedTree
                   {-# LINE 12689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Cast _annIoriginalTree _exprIoriginalTree _tnIoriginalTree
                   {-# LINE 12695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12713 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12719 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12725 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12731 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
              ( _tnIannotatedTree,_tnInamedType,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_ImplicitCast :: T_Annotation ->
                               T_ScalarExpr ->
                               TypeExtra ->
                               T_ScalarExpr
_sem_ScalarExpr_ImplicitCast ann_ expr_ te_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _exprOodbcFunction :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _exprOassignmentCastContext :: Bool
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 12866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 173, column 20)
              _exprOodbcFunction =
                  ({-# LINE 173 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 279, column 9)
              _tpe =
                  ({-# LINE 279 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right te_
                   {-# LINE 12878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 280, column 9)
              _exprOexpectedType =
                  ({-# LINE 280 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 12884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ImplicitCast _annIannotatedTree _exprIannotatedTree te_
                   {-# LINE 12890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ImplicitCast _annIoriginalTree _exprIoriginalTree te_
                   {-# LINE 12896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOexpectedCast =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 12944 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12950 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12956 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Case :: T_Annotation ->
                       T_CaseScalarExprListScalarExprPairList ->
                       T_MaybeScalarExpr ->
                       T_ScalarExpr
_sem_ScalarExpr_Case ann_ cases_ els_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _casesOwhenExpectedType :: (Maybe TypeExtra)
              _casesOthenExpectedType :: (Maybe TypeExtra)
              _elsOexpectedType :: (Maybe TypeExtra)
              _elsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _casesOcat :: Catalog
              _casesOdownEnv :: Environment
              _casesOflags :: TypeCheckFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOassignmentCastContext :: Bool
              _elsOcat :: Catalog
              _elsOdownEnv :: Environment
              _elsOflags :: TypeCheckFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _casesIannotatedTree :: CaseScalarExprListScalarExprPairList
              _casesIoriginalTree :: CaseScalarExprListScalarExprPairList
              _casesIthenTypes :: ([Maybe TypeExtra])
              _casesIupTypes :: ([Maybe TypeExtra])
              _casesIwhenTypes :: ([[Maybe TypeExtra]])
              _elsIannotatedTree :: MaybeScalarExpr
              _elsIoriginalTree :: MaybeScalarExpr
              _elsIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 13062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 558, column 9)
              _whenTypes =
                  ({-# LINE 558 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIwhenTypes
                   {-# LINE 13068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 559, column 9)
              _thenTypes =
                  ({-# LINE 559 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIthenTypes ++ maybe [] ((:[]) . Just) _elsIupType
                   {-# LINE 13074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 561, column 9)
              _tpe =
                  ({-# LINE 561 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   wt <- mapM (maybe (Left []) Right) $ concat _whenTypes
                   bt <- ScalarType <$> _dialectTypeName     "boolean"
                   when (any ((/= bt) . teType) wt)
                       $ Left [WrongTypes bt $ map teType wt]
                   tt <- mapM (maybe (Left []) Right) _thenTypes
                   resolveResultSetTypeExtra _lhsIcat tt
                   {-# LINE 13086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 570, column 9)
              _casesOwhenExpectedType =
                  ({-# LINE 570 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   ws <- sequence $ concat _whenTypes
                   w <- either (const Nothing) Just $ resolveResultSetTypeExtra _lhsIcat ws
                   bt <- ScalarType <$> either (const Nothing) Just (_dialectTypeName     "boolean")
                   Just $ TypeExtra bt Nothing Nothing $ teNullable w
                   {-# LINE 13096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 576, column 9)
              _casesOthenExpectedType =
                  ({-# LINE 576 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 577, column 9)
              _elsOexpectedType =
                  ({-# LINE 577 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13108 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 578, column 9)
              _elsOexpectedCast =
                  ({-# LINE 578 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 13114 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Case _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 13120 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Case _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 13126 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13132 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13138 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13144 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13150 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13156 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOdownEnv =
                  ({-# LINE 553 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _casesIannotatedTree,_casesIoriginalTree,_casesIthenTypes,_casesIupTypes,_casesIwhenTypes) =
                  cases_ _casesOcat _casesOdownEnv _casesOflags _casesOimCast _casesOthenExpectedType _casesOwhenExpectedType
              ( _elsIannotatedTree,_elsIoriginalTree,_elsIupType) =
                  els_ _elsOassignmentCastContext _elsOcat _elsOdownEnv _elsOexpectedCast _elsOexpectedType _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_CaseSimple :: T_Annotation ->
                             T_ScalarExpr ->
                             T_CaseScalarExprListScalarExprPairList ->
                             T_MaybeScalarExpr ->
                             T_ScalarExpr
_sem_ScalarExpr_CaseSimple ann_ value_ cases_ els_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _valueOodbcFunction :: Bool
              _casesOwhenExpectedType :: (Maybe TypeExtra)
              _valueOexpectedType :: (Maybe TypeExtra)
              _valueOexpectedCast :: Bool
              _casesOthenExpectedType :: (Maybe TypeExtra)
              _elsOexpectedType :: (Maybe TypeExtra)
              _elsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _valueOassignmentCastContext :: Bool
              _valueOcat :: Catalog
              _valueOdownEnv :: Environment
              _valueOflags :: TypeCheckFlags
              _valueOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOdownEnv :: Environment
              _casesOflags :: TypeCheckFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOassignmentCastContext :: Bool
              _elsOcat :: Catalog
              _elsOdownEnv :: Environment
              _elsOflags :: TypeCheckFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _valueIannotatedTree :: ScalarExpr
              _valueIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _valueIoriginalTree :: ScalarExpr
              _valueIupType :: (Maybe TypeExtra)
              _casesIannotatedTree :: CaseScalarExprListScalarExprPairList
              _casesIoriginalTree :: CaseScalarExprListScalarExprPairList
              _casesIthenTypes :: ([Maybe TypeExtra])
              _casesIupTypes :: ([Maybe TypeExtra])
              _casesIwhenTypes :: ([[Maybe TypeExtra]])
              _elsIannotatedTree :: MaybeScalarExpr
              _elsIoriginalTree :: MaybeScalarExpr
              _elsIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 13325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 174, column 18)
              _valueOodbcFunction =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 558, column 9)
              _whenTypes =
                  ({-# LINE 558 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIwhenTypes
                   {-# LINE 13337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 559, column 9)
              _thenTypes =
                  ({-# LINE 559 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIthenTypes ++ maybe [] ((:[]) . Just) _elsIupType
                   {-# LINE 13343 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 580, column 9)
              _whent =
                  ({-# LINE 580 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   wt <- mapM (maybe (Left []) Right) $ concat _whenTypes
                   vt <- maybe (Left []) Right _valueIupType
                   resolveResultSetTypeExtra _lhsIcat (vt : wt)
                   {-# LINE 13352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 585, column 9)
              _tpe =
                  ({-# LINE 585 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   _ <- _whent
                   tt <- mapM (maybe (Left []) Right) _thenTypes
                   resolveResultSetTypeExtra _lhsIcat tt
                   {-# LINE 13361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 590, column 9)
              _casesOwhenExpectedType =
                  ({-# LINE 590 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _whent
                   {-# LINE 13367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 591, column 9)
              _valueOexpectedType =
                  ({-# LINE 591 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _whent
                   {-# LINE 13373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 592, column 9)
              _valueOexpectedCast =
                  ({-# LINE 592 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 593, column 9)
              _casesOthenExpectedType =
                  ({-# LINE 593 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 594, column 9)
              _elsOexpectedType =
                  ({-# LINE 594 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 595, column 9)
              _elsOexpectedCast =
                  ({-# LINE 595 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 13397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseSimple _annIannotatedTree _valueIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 13403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseSimple _annIoriginalTree _valueIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 13409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOdownEnv =
                  ({-# LINE 553 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _valueIannotatedTree,_valueIcolExprs,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOassignmentCastContext _valueOcat _valueOdownEnv _valueOexpectedCast _valueOexpectedType _valueOflags _valueOimCast _valueOodbcFunction
              ( _casesIannotatedTree,_casesIoriginalTree,_casesIthenTypes,_casesIupTypes,_casesIwhenTypes) =
                  cases_ _casesOcat _casesOdownEnv _casesOflags _casesOimCast _casesOthenExpectedType _casesOwhenExpectedType
              ( _elsIannotatedTree,_elsIoriginalTree,_elsIupType) =
                  els_ _elsOassignmentCastContext _elsOcat _elsOdownEnv _elsOexpectedCast _elsOexpectedType _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Parens :: T_Annotation ->
                         T_ScalarExpr ->
                         T_ScalarExpr
_sem_ScalarExpr_Parens ann_ ex_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _exOodbcFunction :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _exOassignmentCastContext :: Bool
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 13617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 181, column 14)
              _exOodbcFunction =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 611, column 5)
              _tpe =
                  ({-# LINE 611 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _exIupType
                   {-# LINE 13629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Parens _annIannotatedTree _exIannotatedTree
                   {-# LINE 13635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Parens _annIoriginalTree _exIoriginalTree
                   {-# LINE 13641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13653 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedCast =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 13689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedType =
                  ({-# LINE 110 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 13695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_InPredicate :: T_Annotation ->
                              T_ScalarExpr ->
                              Bool ->
                              T_InList ->
                              T_ScalarExpr
_sem_ScalarExpr_InPredicate ann_ expr_ i_ list_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _exprOodbcFunction :: Bool
              _rt :: (Either [TypeError] TypeExtra)
              _listOexpectedType :: (Maybe TypeExtra)
              _exprOexpectedType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _exprOassignmentCastContext :: Bool
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _listOcat :: Catalog
              _listOdownEnv :: Environment
              _listOexpectedCast :: Bool
              _listOflags :: TypeCheckFlags
              _listOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              _listIannotatedTree :: InList
              _listIlistType :: (Either [TypeError] TypeExtra)
              _listIoriginalTree :: InList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13792 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13798 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 13815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 180, column 19)
              _exprOodbcFunction =
                  ({-# LINE 180 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 665, column 9)
              _rt =
                  ({-# LINE 665 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   lt <- _listIlistType
                   expt <- maybe (Left []) Right _exprIupType
                   resolveResultSetTypeExtra _lhsIcat [expt, lt]
                   {-# LINE 13830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 669, column 9)
              _tpe =
                  ({-# LINE 669 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   r <- _rt
                   bt <- ScalarType <$> _dialectTypeName     "boolean"
                   return $ TypeExtra bt Nothing Nothing $ teNullable r
                   {-# LINE 13839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 673, column 9)
              _listOexpectedType =
                  ({-# LINE 673 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _rt
                   {-# LINE 13845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 674, column 9)
              _exprOexpectedType =
                  ({-# LINE 674 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _rt
                   {-# LINE 13851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InPredicate _annIannotatedTree _exprIannotatedTree i_ _listIannotatedTree
                   {-# LINE 13857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InPredicate _annIoriginalTree _exprIoriginalTree i_ _listIoriginalTree
                   {-# LINE 13863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOexpectedCast =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 13911 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13917 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13923 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOexpectedCast =
                  ({-# LINE 658 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 13941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
              ( _listIannotatedTree,_listIlistType,_listIoriginalTree) =
                  list_ _listOcat _listOdownEnv _listOexpectedCast _listOexpectedType _listOflags _listOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Exists :: T_Annotation ->
                         T_QueryExpr ->
                         T_ScalarExpr
_sem_ScalarExpr_Exists ann_ sel_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _selOassignmentCastContext :: Bool
              _selOcat :: Catalog
              _selOflags :: TypeCheckFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 14048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 624, column 9)
              _tpe =
                  ({-# LINE 624 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   (mkTypeExtraNN . ScalarType) <$> (_dialectTypeName     "boolean")
                   {-# LINE 14054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 646, column 9)
              _selOouterDownEnv =
                  ({-# LINE 646 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just _lhsIdownEnv
                   {-# LINE 14060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 648, column 9)
              _selOexpectedType =
                  ({-# LINE 648 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 14066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Exists _annIannotatedTree _selIannotatedTree
                   {-# LINE 14072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Exists _annIoriginalTree _selIoriginalTree
                   {-# LINE 14078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14108 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14114 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14120 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14126 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_ScalarSubQuery :: T_Annotation ->
                                 T_QueryExpr ->
                                 T_ScalarExpr
_sem_ScalarExpr_ScalarSubQuery ann_ sel_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _selOassignmentCastContext :: Bool
              _selOcat :: Catalog
              _selOflags :: TypeCheckFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 14219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 634, column 9)
              _tpe =
                  ({-# LINE 634 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   selType <- maybe (Left []) Right _selIupType
                   case length selType of
                     0 -> Left [InternalError "no columns in scalar subquery?"]
                     1 -> Right $ snd $ head selType
                     _ -> Right $ mkTypeExtra $ AnonymousCompositeType
                             $ map (teType . snd) selType
                   {-# LINE 14231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 644, column 9)
              _selOouterDownEnv =
                  ({-# LINE 644 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just _lhsIdownEnv
                   {-# LINE 14237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 648, column 9)
              _selOexpectedType =
                  ({-# LINE 648 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 14243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarSubQuery _annIannotatedTree _selIannotatedTree
                   {-# LINE 14249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarSubQuery _annIoriginalTree _selIoriginalTree
                   {-# LINE 14255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_LiftApp :: T_Annotation ->
                          T_Name ->
                          LiftFlavour ->
                          T_ScalarExprList ->
                          T_ScalarExpr
_sem_ScalarExpr_LiftApp ann_ oper_ flav_ args_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _argsOexpectedCast :: Bool
              _argsOexpectedTypes :: ([TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _operOcat :: Catalog
              _operOflags :: TypeCheckFlags
              _operOimCast :: (Maybe TypeExtra)
              _operOtpe :: (Either [TypeError] TypeExtra)
              _argsOassignmentCastContext :: Bool
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _operIannotatedTree :: Name
              _operIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 14405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 454, column 9)
              _argsOexpectedCast =
                  ({-# LINE 454 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 731, column 9)
              _tpe =
                  ({-# LINE 731 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 14417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 768, column 13)
              _argsOexpectedTypes =
                  ({-# LINE 768 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 14423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LiftApp _annIannotatedTree _operIannotatedTree flav_ _argsIannotatedTree
                   {-# LINE 14429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LiftApp _annIoriginalTree _operIoriginalTree flav_ _argsIoriginalTree
                   {-# LINE 14435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _operOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   _tpe
                   {-# LINE 14483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _operIannotatedTree,_operIoriginalTree) =
                  oper_ _operOcat _operOflags _operOimCast _operOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_OdbcLiteral :: T_Annotation ->
                              OdbcLiteralType ->
                              String ->
                              T_ScalarExpr
_sem_ScalarExpr_OdbcLiteral ann_ olt_ val_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 14600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 306, column 10)
              _tpe =
                  ({-# LINE 306 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case olt_ of
                     OLDate -> (mkTypeExtra . ScalarType) <$> _dialectTypeName     "date"
                     OLTime -> (mkTypeExtra . ScalarType) <$> _dialectTypeName     "time"
                     OLTimestamp -> (mkTypeExtra . ScalarType) <$> _dialectTypeName     "timestamp"
                   {-# LINE 14609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcLiteral _annIannotatedTree olt_ val_
                   {-# LINE 14615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcLiteral _annIoriginalTree olt_ val_
                   {-# LINE 14621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_OdbcFunc :: T_Annotation ->
                           T_ScalarExpr ->
                           T_ScalarExpr
_sem_ScalarExpr_OdbcFunc ann_ ex_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _dialectTypeName :: (Text -> Either [TypeError] Text)
              _exOodbcFunction :: Bool
              _exOcat :: Catalog
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _exOassignmentCastContext :: Bool
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 36, column 9)
              _upType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 37, column 9)
              _lhsOupType =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 38, column 9)
              _annOimCast =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _dialectTypeName =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right . ansiTypeNameToDialect (tcfDialect _lhsIflags)
                   {-# LINE 14739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 182, column 16)
              _exOodbcFunction =
                  ({-# LINE 182 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 14745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 312, column 10)
              _exOcat =
                  ({-# LINE 312 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   id _lhsIcat
                   {-# LINE 14751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 313, column 10)
              _tpe =
                  ({-# LINE 313 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _exIoriginalTree of
                     Extract {} -> maybe (Left []) Right _exIupType
                     App {} -> maybe (Left []) Right _exIupType
                     _ -> Left [OdbcFuncBadContent]
                   {-# LINE 14760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcFunc _annIannotatedTree _exIannotatedTree
                   {-# LINE 14766 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcFunc _annIoriginalTree _exIoriginalTree
                   {-# LINE 14772 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedCast =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 14814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedType =
                  ({-# LINE 110 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 14820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_AntiScalarExpr :: String ->
                                 T_ScalarExpr
_sem_ScalarExpr_AntiScalarExpr string_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _lhsOupType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 232, column 21)
              _lhsOcolExprs =
                  ({-# LINE 232 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   [(Nmc "?anti?",Nothing,_originalTree)]
                   {-# LINE 14858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 102, column 9)
              _lhsOupType =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 731, column 9)
              _tpe =
                  ({-# LINE 731 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 14870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiScalarExpr string_
                   {-# LINE 14876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiScalarExpr string_
                   {-# LINE 14882 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
-- ScalarExprDirectionPair -------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprDirectionPair 
         originalTree         : ScalarExprDirectionPair 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExpr 
         child x2             : {Direction}
         child x3             : {NullsOrder}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprDirectionPair = ( ScalarExpr,(Direction),(NullsOrder))
-- cata
_sem_ScalarExprDirectionPair :: ScalarExprDirectionPair ->
                               T_ScalarExprDirectionPair
_sem_ScalarExprDirectionPair ( x1,x2,x3) =
    (_sem_ScalarExprDirectionPair_Tuple (_sem_ScalarExpr x1) x2 x3)
-- semantic domain
type T_ScalarExprDirectionPair = Catalog ->
                                 Environment ->
                                 TypeCheckFlags ->
                                 (Maybe TypeExtra) ->
                                 ( ScalarExprDirectionPair,ScalarExprDirectionPair)
data Inh_ScalarExprDirectionPair = Inh_ScalarExprDirectionPair {_cat_Inh_ScalarExprDirectionPair :: Catalog,_downEnv_Inh_ScalarExprDirectionPair :: Environment,_flags_Inh_ScalarExprDirectionPair :: TypeCheckFlags,_imCast_Inh_ScalarExprDirectionPair :: (Maybe TypeExtra)}
data Syn_ScalarExprDirectionPair = Syn_ScalarExprDirectionPair {_annotatedTree_Syn_ScalarExprDirectionPair :: ScalarExprDirectionPair,_originalTree_Syn_ScalarExprDirectionPair :: ScalarExprDirectionPair}
_wrap_ScalarExprDirectionPair :: T_ScalarExprDirectionPair ->
                                Inh_ScalarExprDirectionPair ->
                                Syn_ScalarExprDirectionPair
_wrap_ScalarExprDirectionPair sem (Inh_ScalarExprDirectionPair _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprDirectionPair _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprDirectionPair_Tuple :: T_ScalarExpr ->
                                     Direction ->
                                     NullsOrder ->
                                     T_ScalarExprDirectionPair
_sem_ScalarExprDirectionPair_Tuple x1_ x2_ x3_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _x1OexpectedCast :: Bool
              _x1OodbcFunction :: Bool
              _x1OexpectedType :: (Maybe TypeExtra)
              _x1OassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprDirectionPair
              _lhsOoriginalTree :: ScalarExprDirectionPair
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1Oflags :: TypeCheckFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExpr
              _x1IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _x1IoriginalTree :: ScalarExpr
              _x1IupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 81, column 37)
              _x1OexpectedCast =
                  ({-# LINE 81 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 14964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 152, column 13)
              _x1OodbcFunction =
                  ({-# LINE 152 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14970 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 754, column 11)
              _x1OexpectedType =
                  ({-# LINE 754 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 14976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 814, column 37)
              _x1OassignmentCastContext =
                  ({-# LINE 814 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,x2_,x3_)
                   {-# LINE 14988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,x2_,x3_)
                   {-# LINE 14994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IcolExprs,_x1IoriginalTree,_x1IupType) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedType _x1Oflags _x1OimCast _x1OodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprDirectionPairList ---------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprDirectionPairList 
         originalTree         : ScalarExprDirectionPairList 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprDirectionPair 
         child tl             : ScalarExprDirectionPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprDirectionPairList = [ScalarExprDirectionPair]
-- cata
_sem_ScalarExprDirectionPairList :: ScalarExprDirectionPairList ->
                                   T_ScalarExprDirectionPairList
_sem_ScalarExprDirectionPairList list =
    (Prelude.foldr _sem_ScalarExprDirectionPairList_Cons _sem_ScalarExprDirectionPairList_Nil (Prelude.map _sem_ScalarExprDirectionPair list))
-- semantic domain
type T_ScalarExprDirectionPairList = Catalog ->
                                     Environment ->
                                     TypeCheckFlags ->
                                     (Maybe TypeExtra) ->
                                     ( ScalarExprDirectionPairList,ScalarExprDirectionPairList)
data Inh_ScalarExprDirectionPairList = Inh_ScalarExprDirectionPairList {_cat_Inh_ScalarExprDirectionPairList :: Catalog,_downEnv_Inh_ScalarExprDirectionPairList :: Environment,_flags_Inh_ScalarExprDirectionPairList :: TypeCheckFlags,_imCast_Inh_ScalarExprDirectionPairList :: (Maybe TypeExtra)}
data Syn_ScalarExprDirectionPairList = Syn_ScalarExprDirectionPairList {_annotatedTree_Syn_ScalarExprDirectionPairList :: ScalarExprDirectionPairList,_originalTree_Syn_ScalarExprDirectionPairList :: ScalarExprDirectionPairList}
_wrap_ScalarExprDirectionPairList :: T_ScalarExprDirectionPairList ->
                                    Inh_ScalarExprDirectionPairList ->
                                    Syn_ScalarExprDirectionPairList
_wrap_ScalarExprDirectionPairList sem (Inh_ScalarExprDirectionPairList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprDirectionPairList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprDirectionPairList_Cons :: T_ScalarExprDirectionPair ->
                                        T_ScalarExprDirectionPairList ->
                                        T_ScalarExprDirectionPairList
_sem_ScalarExprDirectionPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprDirectionPairList
              _lhsOoriginalTree :: ScalarExprDirectionPairList
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprDirectionPair
              _hdIoriginalTree :: ScalarExprDirectionPair
              _tlIannotatedTree :: ScalarExprDirectionPairList
              _tlIoriginalTree :: ScalarExprDirectionPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 15104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 15110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ScalarExprDirectionPairList_Nil :: T_ScalarExprDirectionPairList
_sem_ScalarExprDirectionPairList_Nil =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprDirectionPairList
              _lhsOoriginalTree :: ScalarExprDirectionPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedTypes        : [TypeExtra]
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprList 
         originalTree         : ScalarExprList 
         upTypes              : [Maybe TypeExtra]
   alternatives:
      alternative Cons:
         child hd             : ScalarExpr 
         child tl             : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprList = [ScalarExpr]
-- cata
_sem_ScalarExprList :: ScalarExprList ->
                      T_ScalarExprList
_sem_ScalarExprList list =
    (Prelude.foldr _sem_ScalarExprList_Cons _sem_ScalarExprList_Nil (Prelude.map _sem_ScalarExpr list))
-- semantic domain
type T_ScalarExprList = Bool ->
                        Catalog ->
                        Environment ->
                        Bool ->
                        ([TypeExtra]) ->
                        TypeCheckFlags ->
                        (Maybe TypeExtra) ->
                        ( ScalarExprList,ScalarExprList,([Maybe TypeExtra]))
data Inh_ScalarExprList = Inh_ScalarExprList {_assignmentCastContext_Inh_ScalarExprList :: Bool,_cat_Inh_ScalarExprList :: Catalog,_downEnv_Inh_ScalarExprList :: Environment,_expectedCast_Inh_ScalarExprList :: Bool,_expectedTypes_Inh_ScalarExprList :: ([TypeExtra]),_flags_Inh_ScalarExprList :: TypeCheckFlags,_imCast_Inh_ScalarExprList :: (Maybe TypeExtra)}
data Syn_ScalarExprList = Syn_ScalarExprList {_annotatedTree_Syn_ScalarExprList :: ScalarExprList,_originalTree_Syn_ScalarExprList :: ScalarExprList,_upTypes_Syn_ScalarExprList :: ([Maybe TypeExtra])}
_wrap_ScalarExprList :: T_ScalarExprList ->
                       Inh_ScalarExprList ->
                       Syn_ScalarExprList
_wrap_ScalarExprList sem (Inh_ScalarExprList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedTypes _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedTypes _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprList _lhsOannotatedTree _lhsOoriginalTree _lhsOupTypes))
_sem_ScalarExprList_Cons :: T_ScalarExpr ->
                           T_ScalarExprList ->
                           T_ScalarExprList
_sem_ScalarExprList_Cons hd_ tl_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedTypes
       _lhsIflags
       _lhsIimCast ->
         (let _hdOodbcFunction :: Bool
              _lhsOupTypes :: ([Maybe TypeExtra])
              _hdOexpectedType :: (Maybe TypeExtra)
              _tlOexpectedTypes :: ([TypeExtra])
              _hdOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExprList
              _lhsOoriginalTree :: ScalarExprList
              _hdOassignmentCastContext :: Bool
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOassignmentCastContext :: Bool
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOexpectedCast :: Bool
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExpr
              _hdIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdIoriginalTree :: ScalarExpr
              _hdIupType :: (Maybe TypeExtra)
              _tlIannotatedTree :: ScalarExprList
              _tlIoriginalTree :: ScalarExprList
              _tlIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 155, column 12)
              _hdOodbcFunction =
                  ({-# LINE 155 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 15300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 196, column 9)
              _lhsOupTypes =
                  ({-# LINE 196 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIupType : _tlIupTypes
                   {-# LINE 15306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 197, column 9)
              (_hdOexpectedType,_tlOexpectedTypes) =
                  ({-# LINE 197 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedTypes of
                       (x:xs) -> (Just x,xs)
                       [] -> (Nothing,[])
                   {-# LINE 15314 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 201, column 9)
              _hdOexpectedCast =
                  ({-# LINE 201 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 15320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 15326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 15332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15350 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15356 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOexpectedCast =
                  ({-# LINE 192 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 15398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOassignmentCastContext _hdOcat _hdOdownEnv _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast _hdOodbcFunction
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupTypes) =
                  tl_ _tlOassignmentCastContext _tlOcat _tlOdownEnv _tlOexpectedCast _tlOexpectedTypes _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes)))
_sem_ScalarExprList_Nil :: T_ScalarExprList
_sem_ScalarExprList_Nil =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedTypes
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupTypes :: ([Maybe TypeExtra])
              _lhsOannotatedTree :: ScalarExprList
              _lhsOoriginalTree :: ScalarExprList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 202, column 11)
              _lhsOupTypes =
                  ({-# LINE 202 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 15433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes)))
-- ScalarExprListList ------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprListList 
         originalTree         : ScalarExprListList 
         upType               : Either [TypeError] [(Text,TypeExtra)]
   alternatives:
      alternative Cons:
         child hd             : ScalarExprTransposedList 
         child tl             : ScalarExprListList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListList = [ScalarExprTransposedList]
-- cata
_sem_ScalarExprListList :: ScalarExprListList ->
                          T_ScalarExprListList
_sem_ScalarExprListList list =
    (Prelude.foldr _sem_ScalarExprListList_Cons _sem_ScalarExprListList_Nil (Prelude.map _sem_ScalarExprTransposedList list))
-- semantic domain
type T_ScalarExprListList = Bool ->
                            Catalog ->
                            Environment ->
                            Bool ->
                            (Maybe [TypeExtra]) ->
                            TypeCheckFlags ->
                            (Maybe TypeExtra) ->
                            ( ScalarExprListList,ScalarExprListList,(Either [TypeError] [(Text,TypeExtra)]))
data Inh_ScalarExprListList = Inh_ScalarExprListList {_assignmentCastContext_Inh_ScalarExprListList :: Bool,_cat_Inh_ScalarExprListList :: Catalog,_downEnv_Inh_ScalarExprListList :: Environment,_expectedCast_Inh_ScalarExprListList :: Bool,_expectedType_Inh_ScalarExprListList :: (Maybe [TypeExtra]),_flags_Inh_ScalarExprListList :: TypeCheckFlags,_imCast_Inh_ScalarExprListList :: (Maybe TypeExtra)}
data Syn_ScalarExprListList = Syn_ScalarExprListList {_annotatedTree_Syn_ScalarExprListList :: ScalarExprListList,_originalTree_Syn_ScalarExprListList :: ScalarExprListList,_upType_Syn_ScalarExprListList :: (Either [TypeError] [(Text,TypeExtra)])}
_wrap_ScalarExprListList :: T_ScalarExprListList ->
                           Inh_ScalarExprListList ->
                           Syn_ScalarExprListList
_wrap_ScalarExprListList sem (Inh_ScalarExprListList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprListList _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_ScalarExprListList_Cons :: T_ScalarExprTransposedList ->
                               T_ScalarExprListList ->
                               T_ScalarExprListList
_sem_ScalarExprListList_Cons hd_ tl_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Either [TypeError] [(Text,TypeExtra)])
              _hdOexpectedCast :: Bool
              _tlOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExprListList
              _lhsOoriginalTree :: ScalarExprListList
              _hdOcat :: Catalog
              _hdOexpectedType :: (Maybe [TypeExtra])
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOassignmentCastContext :: Bool
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOexpectedType :: (Maybe [TypeExtra])
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprTransposedList
              _hdIoriginalTree :: ScalarExprTransposedList
              _hdIupType :: (Maybe [TypeExtra])
              _tlIannotatedTree :: ScalarExprListList
              _tlIoriginalTree :: ScalarExprListList
              _tlIupType :: (Either [TypeError] [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 124, column 9)
              _lhsOupType =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   do
                   a <- maybe (Left [InternalError "type error in VALUES clause"]) Right _hdIupType
                   b <- _tlIupType
                   unless (not $ null a) $ Left [InternalError "empty row in VALUES clause"]
                   let a' = map ("",) a
                       itError = Left [IncompatibleUnionTypes (CompositeType a') (CompositeType b)]
                   unless (null b || length a == length b) itError
                   if null b
                     then return $ zip [T.pack ("values%" ++ show k) | k <- [(0::Int)..]] a
                     else
                       do
                       let uts = zipWithM (\te1 (_,te2) -> resolveResultSetTypeExtra _lhsIcat [te1,te2])
                                     a b
                       case uts of
                         Left{} -> itError
                         Right uts' -> return $ zipWith (\(n,_) te -> (n,te)) b uts'
                   {-# LINE 15561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 142, column 9)
              _hdOexpectedCast =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 15567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 143, column 9)
              _tlOexpectedCast =
                  ({-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 15573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 15579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 15585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOexpectedType =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 15609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOexpectedType =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 15645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOcat _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupType) =
                  tl_ _tlOassignmentCastContext _tlOcat _tlOdownEnv _tlOexpectedCast _tlOexpectedType _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExprListList_Nil :: T_ScalarExprListList
_sem_ScalarExprListList_Nil =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Either [TypeError] [(Text,TypeExtra)])
              _lhsOannotatedTree :: ScalarExprListList
              _lhsOoriginalTree :: ScalarExprListList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 144, column 11)
              _lhsOupType =
                  ({-# LINE 144 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Right []
                   {-# LINE 15680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- ScalarExprListStatementListTriple ---------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprListStatementListTriple 
         originalTree         : ScalarExprListStatementListTriple 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExprList 
         child x2             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListStatementListTriple = ( ScalarExprList,StatementList)
-- cata
_sem_ScalarExprListStatementListTriple :: ScalarExprListStatementListTriple ->
                                         T_ScalarExprListStatementListTriple
_sem_ScalarExprListStatementListTriple ( x1,x2) =
    (_sem_ScalarExprListStatementListTriple_Tuple (_sem_ScalarExprList x1) (_sem_StatementList x2))
-- semantic domain
type T_ScalarExprListStatementListTriple = Catalog ->
                                           TypeCheckFlags ->
                                           (Maybe TypeExtra) ->
                                           ( ScalarExprListStatementListTriple,ScalarExprListStatementListTriple)
data Inh_ScalarExprListStatementListTriple = Inh_ScalarExprListStatementListTriple {_cat_Inh_ScalarExprListStatementListTriple :: Catalog,_flags_Inh_ScalarExprListStatementListTriple :: TypeCheckFlags,_imCast_Inh_ScalarExprListStatementListTriple :: (Maybe TypeExtra)}
data Syn_ScalarExprListStatementListTriple = Syn_ScalarExprListStatementListTriple {_annotatedTree_Syn_ScalarExprListStatementListTriple :: ScalarExprListStatementListTriple,_originalTree_Syn_ScalarExprListStatementListTriple :: ScalarExprListStatementListTriple}
_wrap_ScalarExprListStatementListTriple :: T_ScalarExprListStatementListTriple ->
                                          Inh_ScalarExprListStatementListTriple ->
                                          Syn_ScalarExprListStatementListTriple
_wrap_ScalarExprListStatementListTriple sem (Inh_ScalarExprListStatementListTriple _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprListStatementListTriple _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprListStatementListTriple_Tuple :: T_ScalarExprList ->
                                               T_StatementList ->
                                               T_ScalarExprListStatementListTriple
_sem_ScalarExprListStatementListTriple_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _x1OdownEnv :: Environment
              _x1OexpectedCast :: Bool
              _x1OexpectedTypes :: ([TypeExtra])
              _x1OassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprListStatementListTriple
              _lhsOoriginalTree :: ScalarExprListStatementListTriple
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExprList
              _x1IoriginalTree :: ScalarExprList
              _x1IupTypes :: ([Maybe TypeExtra])
              _x2IannotatedTree :: StatementList
              _x2IoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 82, column 47)
              _x1OdownEnv =
                  ({-# LINE 82 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 15772 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 83, column 47)
              _x1OexpectedCast =
                  ({-# LINE 83 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 15778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 84, column 47)
              _x1OexpectedTypes =
                  ({-# LINE 84 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 15784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 815, column 47)
              _x1OassignmentCastContext =
                  ({-# LINE 815 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 15790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 15796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 15802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IoriginalTree,_x1IupTypes) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedTypes _x1Oflags _x1OimCast
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprListStatementListTripleList -----------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprListStatementListTripleList 
         originalTree         : ScalarExprListStatementListTripleList 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprListStatementListTriple 
         child tl             : ScalarExprListStatementListTripleList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListStatementListTripleList = [ScalarExprListStatementListTriple]
-- cata
_sem_ScalarExprListStatementListTripleList :: ScalarExprListStatementListTripleList ->
                                             T_ScalarExprListStatementListTripleList
_sem_ScalarExprListStatementListTripleList list =
    (Prelude.foldr _sem_ScalarExprListStatementListTripleList_Cons _sem_ScalarExprListStatementListTripleList_Nil (Prelude.map _sem_ScalarExprListStatementListTriple list))
-- semantic domain
type T_ScalarExprListStatementListTripleList = Catalog ->
                                               TypeCheckFlags ->
                                               (Maybe TypeExtra) ->
                                               ( ScalarExprListStatementListTripleList,ScalarExprListStatementListTripleList)
data Inh_ScalarExprListStatementListTripleList = Inh_ScalarExprListStatementListTripleList {_cat_Inh_ScalarExprListStatementListTripleList :: Catalog,_flags_Inh_ScalarExprListStatementListTripleList :: TypeCheckFlags,_imCast_Inh_ScalarExprListStatementListTripleList :: (Maybe TypeExtra)}
data Syn_ScalarExprListStatementListTripleList = Syn_ScalarExprListStatementListTripleList {_annotatedTree_Syn_ScalarExprListStatementListTripleList :: ScalarExprListStatementListTripleList,_originalTree_Syn_ScalarExprListStatementListTripleList :: ScalarExprListStatementListTripleList}
_wrap_ScalarExprListStatementListTripleList :: T_ScalarExprListStatementListTripleList ->
                                              Inh_ScalarExprListStatementListTripleList ->
                                              Syn_ScalarExprListStatementListTripleList
_wrap_ScalarExprListStatementListTripleList sem (Inh_ScalarExprListStatementListTripleList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprListStatementListTripleList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprListStatementListTripleList_Cons :: T_ScalarExprListStatementListTriple ->
                                                  T_ScalarExprListStatementListTripleList ->
                                                  T_ScalarExprListStatementListTripleList
_sem_ScalarExprListStatementListTripleList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListTripleList
              _lhsOoriginalTree :: ScalarExprListStatementListTripleList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprListStatementListTriple
              _hdIoriginalTree :: ScalarExprListStatementListTriple
              _tlIannotatedTree :: ScalarExprListStatementListTripleList
              _tlIoriginalTree :: ScalarExprListStatementListTripleList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 15921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 15927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ScalarExprListStatementListTripleList_Nil :: T_ScalarExprListStatementListTripleList
_sem_ScalarExprListStatementListTripleList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListTripleList
              _lhsOoriginalTree :: ScalarExprListStatementListTripleList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 15999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprRoot ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckFlags
      synthesized attributes:
         annotatedTree        : ScalarExprRoot 
         originalTree         : ScalarExprRoot 
   alternatives:
      alternative ScalarExprRoot:
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data ScalarExprRoot = ScalarExprRoot (ScalarExpr)
                    deriving ( Show)
-- cata
_sem_ScalarExprRoot :: ScalarExprRoot ->
                      T_ScalarExprRoot
_sem_ScalarExprRoot (ScalarExprRoot _expr) =
    (_sem_ScalarExprRoot_ScalarExprRoot (_sem_ScalarExpr _expr))
-- semantic domain
type T_ScalarExprRoot = Catalog ->
                        Environment ->
                        TypeCheckFlags ->
                        ( ScalarExprRoot,ScalarExprRoot)
data Inh_ScalarExprRoot = Inh_ScalarExprRoot {_cat_Inh_ScalarExprRoot :: Catalog,_downEnv_Inh_ScalarExprRoot :: Environment,_flags_Inh_ScalarExprRoot :: TypeCheckFlags}
data Syn_ScalarExprRoot = Syn_ScalarExprRoot {_annotatedTree_Syn_ScalarExprRoot :: ScalarExprRoot,_originalTree_Syn_ScalarExprRoot :: ScalarExprRoot}
_wrap_ScalarExprRoot :: T_ScalarExprRoot ->
                       Inh_ScalarExprRoot ->
                       Syn_ScalarExprRoot
_wrap_ScalarExprRoot sem (Inh_ScalarExprRoot _lhsIcat _lhsIdownEnv _lhsIflags) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags
     in  (Syn_ScalarExprRoot _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprRoot_ScalarExprRoot :: T_ScalarExpr ->
                                     T_ScalarExprRoot
_sem_ScalarExprRoot_ScalarExprRoot expr_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags ->
         (let _exprOexpectedCast :: Bool
              _exprOodbcFunction :: Bool
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOassignmentCastContext :: Bool
              _exprOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExprRoot
              _lhsOoriginalTree :: ScalarExprRoot
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 85, column 37)
              _exprOexpectedCast =
                  ({-# LINE 85 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 16075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 158, column 22)
              _exprOodbcFunction =
                  ({-# LINE 158 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 236, column 9)
              _exprOdownEnv =
                  ({-# LINE 236 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 737, column 20)
              _exprOexpectedType =
                  ({-# LINE 737 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 16093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 816, column 37)
              _exprOassignmentCastContext =
                  ({-# LINE 816 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 135, column 8)
              _exprOimCast =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 16105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarExprRoot _exprIannotatedTree
                   {-# LINE 16111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarExprRoot _exprIoriginalTree
                   {-# LINE 16117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprStatementListPair ---------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprStatementListPair 
         originalTree         : ScalarExprStatementListPair 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExpr 
         child x2             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprStatementListPair = ( ScalarExpr,StatementList)
-- cata
_sem_ScalarExprStatementListPair :: ScalarExprStatementListPair ->
                                   T_ScalarExprStatementListPair
_sem_ScalarExprStatementListPair ( x1,x2) =
    (_sem_ScalarExprStatementListPair_Tuple (_sem_ScalarExpr x1) (_sem_StatementList x2))
-- semantic domain
type T_ScalarExprStatementListPair = Catalog ->
                                     TypeCheckFlags ->
                                     (Maybe TypeExtra) ->
                                     ( ScalarExprStatementListPair,ScalarExprStatementListPair)
data Inh_ScalarExprStatementListPair = Inh_ScalarExprStatementListPair {_cat_Inh_ScalarExprStatementListPair :: Catalog,_flags_Inh_ScalarExprStatementListPair :: TypeCheckFlags,_imCast_Inh_ScalarExprStatementListPair :: (Maybe TypeExtra)}
data Syn_ScalarExprStatementListPair = Syn_ScalarExprStatementListPair {_annotatedTree_Syn_ScalarExprStatementListPair :: ScalarExprStatementListPair,_originalTree_Syn_ScalarExprStatementListPair :: ScalarExprStatementListPair}
_wrap_ScalarExprStatementListPair :: T_ScalarExprStatementListPair ->
                                    Inh_ScalarExprStatementListPair ->
                                    Syn_ScalarExprStatementListPair
_wrap_ScalarExprStatementListPair sem (Inh_ScalarExprStatementListPair _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprStatementListPair _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprStatementListPair_Tuple :: T_ScalarExpr ->
                                         T_StatementList ->
                                         T_ScalarExprStatementListPair
_sem_ScalarExprStatementListPair_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _x1OdownEnv :: Environment
              _x1OexpectedCast :: Bool
              _x1OexpectedType :: (Maybe TypeExtra)
              _x1OodbcFunction :: Bool
              _x1OassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprStatementListPair
              _lhsOoriginalTree :: ScalarExprStatementListPair
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExpr
              _x1IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _x1IoriginalTree :: ScalarExpr
              _x1IupType :: (Maybe TypeExtra)
              _x2IannotatedTree :: StatementList
              _x2IoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 86, column 41)
              _x1OdownEnv =
                  ({-# LINE 86 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 16213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 87, column 41)
              _x1OexpectedCast =
                  ({-# LINE 87 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 16219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 88, column 41)
              _x1OexpectedType =
                  ({-# LINE 88 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 16225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 89, column 41)
              _x1OodbcFunction =
                  ({-# LINE 89 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 16231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 817, column 41)
              _x1OassignmentCastContext =
                  ({-# LINE 817 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 16243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 16249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IcolExprs,_x1IoriginalTree,_x1IupType) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedType _x1Oflags _x1OimCast _x1OodbcFunction
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprStatementListPairList -----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprStatementListPairList 
         originalTree         : ScalarExprStatementListPairList 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprStatementListPair 
         child tl             : ScalarExprStatementListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprStatementListPairList = [ScalarExprStatementListPair]
-- cata
_sem_ScalarExprStatementListPairList :: ScalarExprStatementListPairList ->
                                       T_ScalarExprStatementListPairList
_sem_ScalarExprStatementListPairList list =
    (Prelude.foldr _sem_ScalarExprStatementListPairList_Cons _sem_ScalarExprStatementListPairList_Nil (Prelude.map _sem_ScalarExprStatementListPair list))
-- semantic domain
type T_ScalarExprStatementListPairList = Catalog ->
                                         TypeCheckFlags ->
                                         (Maybe TypeExtra) ->
                                         ( ScalarExprStatementListPairList,ScalarExprStatementListPairList)
data Inh_ScalarExprStatementListPairList = Inh_ScalarExprStatementListPairList {_cat_Inh_ScalarExprStatementListPairList :: Catalog,_flags_Inh_ScalarExprStatementListPairList :: TypeCheckFlags,_imCast_Inh_ScalarExprStatementListPairList :: (Maybe TypeExtra)}
data Syn_ScalarExprStatementListPairList = Syn_ScalarExprStatementListPairList {_annotatedTree_Syn_ScalarExprStatementListPairList :: ScalarExprStatementListPairList,_originalTree_Syn_ScalarExprStatementListPairList :: ScalarExprStatementListPairList}
_wrap_ScalarExprStatementListPairList :: T_ScalarExprStatementListPairList ->
                                        Inh_ScalarExprStatementListPairList ->
                                        Syn_ScalarExprStatementListPairList
_wrap_ScalarExprStatementListPairList sem (Inh_ScalarExprStatementListPairList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprStatementListPairList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprStatementListPairList_Cons :: T_ScalarExprStatementListPair ->
                                            T_ScalarExprStatementListPairList ->
                                            T_ScalarExprStatementListPairList
_sem_ScalarExprStatementListPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPairList
              _lhsOoriginalTree :: ScalarExprStatementListPairList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprStatementListPair
              _hdIoriginalTree :: ScalarExprStatementListPair
              _tlIannotatedTree :: ScalarExprStatementListPairList
              _tlIoriginalTree :: ScalarExprStatementListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 16368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 16374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ScalarExprStatementListPairList_Nil :: T_ScalarExprStatementListPairList
_sem_ScalarExprStatementListPairList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPairList
              _lhsOoriginalTree :: ScalarExprStatementListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprTransposedList ------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprTransposedList 
         originalTree         : ScalarExprTransposedList 
         upType               : Maybe [TypeExtra]
   alternatives:
      alternative Cons:
         child hd             : ScalarExpr 
         child tl             : ScalarExprTransposedList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprTransposedList = [ScalarExpr]
-- cata
_sem_ScalarExprTransposedList :: ScalarExprTransposedList ->
                                T_ScalarExprTransposedList
_sem_ScalarExprTransposedList list =
    (Prelude.foldr _sem_ScalarExprTransposedList_Cons _sem_ScalarExprTransposedList_Nil (Prelude.map _sem_ScalarExpr list))
-- semantic domain
type T_ScalarExprTransposedList = Catalog ->
                                  Bool ->
                                  (Maybe [TypeExtra]) ->
                                  TypeCheckFlags ->
                                  (Maybe TypeExtra) ->
                                  ( ScalarExprTransposedList,ScalarExprTransposedList,(Maybe [TypeExtra]))
data Inh_ScalarExprTransposedList = Inh_ScalarExprTransposedList {_cat_Inh_ScalarExprTransposedList :: Catalog,_expectedCast_Inh_ScalarExprTransposedList :: Bool,_expectedType_Inh_ScalarExprTransposedList :: (Maybe [TypeExtra]),_flags_Inh_ScalarExprTransposedList :: TypeCheckFlags,_imCast_Inh_ScalarExprTransposedList :: (Maybe TypeExtra)}
data Syn_ScalarExprTransposedList = Syn_ScalarExprTransposedList {_annotatedTree_Syn_ScalarExprTransposedList :: ScalarExprTransposedList,_originalTree_Syn_ScalarExprTransposedList :: ScalarExprTransposedList,_upType_Syn_ScalarExprTransposedList :: (Maybe [TypeExtra])}
_wrap_ScalarExprTransposedList :: T_ScalarExprTransposedList ->
                                 Inh_ScalarExprTransposedList ->
                                 Syn_ScalarExprTransposedList
_wrap_ScalarExprTransposedList sem (Inh_ScalarExprTransposedList _lhsIcat _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIcat _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprTransposedList _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_ScalarExprTransposedList_Cons :: T_ScalarExpr ->
                                     T_ScalarExprTransposedList ->
                                     T_ScalarExprTransposedList
_sem_ScalarExprTransposedList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _hdOdownEnv :: Environment
              _lhsOupType :: (Maybe [TypeExtra])
              _hdOexpectedType :: (Maybe TypeExtra)
              _tlOexpectedType :: (Maybe [TypeExtra])
              _hdOexpectedCast :: Bool
              _tlOexpectedCast :: Bool
              _hdOodbcFunction :: Bool
              _hdOassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprTransposedList
              _lhsOoriginalTree :: ScalarExprTransposedList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExpr
              _hdIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdIoriginalTree :: ScalarExpr
              _hdIupType :: (Maybe TypeExtra)
              _tlIannotatedTree :: ScalarExprTransposedList
              _tlIoriginalTree :: ScalarExprTransposedList
              _tlIupType :: (Maybe [TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 90, column 37)
              _hdOdownEnv =
                  ({-# LINE 90 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 16543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 107, column 9)
              _lhsOupType =
                  ({-# LINE 107 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM2 (:) _hdIupType _tlIupType
                   {-# LINE 16549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 108, column 9)
              _hdOexpectedType =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM fst $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 16555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 109, column 9)
              _tlOexpectedType =
                  ({-# LINE 109 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM snd $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 16561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 110, column 9)
              _hdOexpectedCast =
                  ({-# LINE 110 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 111, column 9)
              _tlOexpectedCast =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 162, column 12)
              _hdOodbcFunction =
                  ({-# LINE 162 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 818, column 37)
              _hdOassignmentCastContext =
                  ({-# LINE 818 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 16591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 16597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOassignmentCastContext _hdOcat _hdOdownEnv _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast _hdOodbcFunction
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupType) =
                  tl_ _tlOcat _tlOexpectedCast _tlOexpectedType _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExprTransposedList_Nil :: T_ScalarExprTransposedList
_sem_ScalarExprTransposedList_Nil =
    (\ _lhsIcat
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: ScalarExprTransposedList
              _lhsOoriginalTree :: ScalarExprTransposedList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 113, column 9)
              _lhsOupType =
                  ({-# LINE 113 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Just []
                   {-# LINE 16666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- SelectItem --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SelectItem 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : SelectItem 
   alternatives:
      alternative SelExp:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SelectItem:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         child name           : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SelectItem = SelExp (Annotation) (ScalarExpr)
                | SelectItem (Annotation) (ScalarExpr) (NameComponent)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_SelectItem :: SelectItem ->
                  T_SelectItem
_sem_SelectItem (SelExp _ann _ex) =
    (_sem_SelectItem_SelExp (_sem_Annotation _ann) (_sem_ScalarExpr _ex))
_sem_SelectItem (SelectItem _ann _ex _name) =
    (_sem_SelectItem_SelectItem (_sem_Annotation _ann) (_sem_ScalarExpr _ex) _name)
-- semantic domain
type T_SelectItem = Bool ->
                    Catalog ->
                    Environment ->
                    Bool ->
                    (Maybe TypeExtra) ->
                    TypeCheckFlags ->
                    (Maybe TypeExtra) ->
                    ( SelectItem,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),SelectItem)
data Inh_SelectItem = Inh_SelectItem {_assignmentCastContext_Inh_SelectItem :: Bool,_cat_Inh_SelectItem :: Catalog,_downEnv_Inh_SelectItem :: Environment,_expectedCast_Inh_SelectItem :: Bool,_expectedType_Inh_SelectItem :: (Maybe TypeExtra),_flags_Inh_SelectItem :: TypeCheckFlags,_imCast_Inh_SelectItem :: (Maybe TypeExtra)}
data Syn_SelectItem = Syn_SelectItem {_annotatedTree_Syn_SelectItem :: SelectItem,_colExprs_Syn_SelectItem :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_SelectItem :: SelectItem}
_wrap_SelectItem :: T_SelectItem ->
                   Inh_SelectItem ->
                   Syn_SelectItem
_wrap_SelectItem sem (Inh_SelectItem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_SelectItem _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree))
_sem_SelectItem_SelExp :: T_Annotation ->
                         T_ScalarExpr ->
                         T_SelectItem
_sem_SelectItem_SelExp ann_ ex_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItem
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe TypeExtra)
              _exOexpectedCast :: Bool
              _exOodbcFunction :: Bool
              _lhsOoriginalTree :: SelectItem
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOassignmentCastContext :: Bool
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 117, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   if tcfAddSelectItemAliases _lhsIflags
                   then case _exIcolExprs of
                          [(n,_,_)] -> SelectItem _annIannotatedTree _exIannotatedTree n
                          _ ->
                               _annotatedTree
                   else _annotatedTree
                   {-# LINE 16791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 208, column 7)
              _annOtpe =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
                   {-# LINE 16797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 209, column 7)
              _exOexpectedType =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 16803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 210, column 7)
              _exOexpectedCast =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 165, column 25)
              _exOodbcFunction =
                  ({-# LINE 165 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelExp _annIannotatedTree _exIannotatedTree
                   {-# LINE 16821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelExp _annIoriginalTree _exIoriginalTree
                   {-# LINE 16827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _exIcolExprs
                   {-# LINE 16839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 16863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree)))
_sem_SelectItem_SelectItem :: T_Annotation ->
                             T_ScalarExpr ->
                             NameComponent ->
                             T_SelectItem
_sem_SelectItem_SelectItem ann_ ex_ name_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe TypeExtra)
              _exOexpectedCast :: Bool
              _exOodbcFunction :: Bool
              _lhsOannotatedTree :: SelectItem
              _lhsOoriginalTree :: SelectItem
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOassignmentCastContext :: Bool
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 112, column 7)
              _lhsOcolExprs =
                  ({-# LINE 112 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case _exIcolExprs of
                     [(_,t,e)] -> [(name_, t,e)]
                     x -> x
                   {-# LINE 16933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 208, column 7)
              _annOtpe =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
                   {-# LINE 16939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 209, column 7)
              _exOexpectedType =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 16945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 210, column 7)
              _exOexpectedCast =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 165, column 25)
              _exOodbcFunction =
                  ({-# LINE 165 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectItem _annIannotatedTree _exIannotatedTree name_
                   {-# LINE 16963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectItem _annIoriginalTree _exIoriginalTree name_
                   {-# LINE 16969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 17005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 17017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree)))
-- SelectItemList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SelectItemList 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : SelectItemList 
         upEnv                : Environment
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative Cons:
         child hd             : SelectItem 
         child tl             : SelectItemList 
         visit 0:
            local colExprs    : _
            local upType      : _
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local upType      : _
            local annotatedTree : _
            local originalTree : _
-}
type SelectItemList = [SelectItem]
-- cata
_sem_SelectItemList :: SelectItemList ->
                      T_SelectItemList
_sem_SelectItemList list =
    (Prelude.foldr _sem_SelectItemList_Cons _sem_SelectItemList_Nil (Prelude.map _sem_SelectItem list))
-- semantic domain
type T_SelectItemList = Bool ->
                        Catalog ->
                        Environment ->
                        Bool ->
                        (Maybe [TypeExtra]) ->
                        TypeCheckFlags ->
                        (Maybe TypeExtra) ->
                        ( SelectItemList,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),SelectItemList,Environment,(Maybe [(Text,TypeExtra)]))
data Inh_SelectItemList = Inh_SelectItemList {_assignmentCastContext_Inh_SelectItemList :: Bool,_cat_Inh_SelectItemList :: Catalog,_downEnv_Inh_SelectItemList :: Environment,_expectedCast_Inh_SelectItemList :: Bool,_expectedType_Inh_SelectItemList :: (Maybe [TypeExtra]),_flags_Inh_SelectItemList :: TypeCheckFlags,_imCast_Inh_SelectItemList :: (Maybe TypeExtra)}
data Syn_SelectItemList = Syn_SelectItemList {_annotatedTree_Syn_SelectItemList :: SelectItemList,_colExprs_Syn_SelectItemList :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_SelectItemList :: SelectItemList,_upEnv_Syn_SelectItemList :: Environment,_upType_Syn_SelectItemList :: (Maybe [(Text,TypeExtra)])}
_wrap_SelectItemList :: T_SelectItemList ->
                       Inh_SelectItemList ->
                       Syn_SelectItemList
_wrap_SelectItemList sem (Inh_SelectItemList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_SelectItemList _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupEnv _lhsOupType))
_sem_SelectItemList_Cons :: T_SelectItem ->
                           T_SelectItemList ->
                           T_SelectItemList
_sem_SelectItemList_Cons hd_ tl_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItemList
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdOexpectedType :: (Maybe TypeExtra)
              _tlOexpectedType :: (Maybe [TypeExtra])
              _hdOexpectedCast :: Bool
              _tlOexpectedCast :: Bool
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _lhsOupEnv :: Environment
              _lhsOoriginalTree :: SelectItemList
              _hdOassignmentCastContext :: Bool
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOassignmentCastContext :: Bool
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: SelectItem
              _hdIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdIoriginalTree :: SelectItem
              _tlIannotatedTree :: SelectItemList
              _tlIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _tlIoriginalTree :: SelectItemList
              _tlIupEnv :: Environment
              _tlIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 132, column 10)
              _lhsOannotatedTree =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   if tcfExpandStars _lhsIflags
                   then flip map _colExprs $ \(n,_t,e) ->
                         if ncStr n == ncStr (columnName e) && not (tcfAddSelectItemAliases _lhsIflags)
                         then SelExp emptyAnnotation e
                         else SelectItem emptyAnnotation e n
                   else _annotatedTree
                   {-# LINE 17138 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 177, column 9)
              _colExprs =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _hdIcolExprs ++ _tlIcolExprs
                   {-# LINE 17144 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 178, column 9)
              _lhsOcolExprs =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _colExprs
                   {-# LINE 17150 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 179, column 9)
              _upType =
                  ({-# LINE 179 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   sequence $ flip map _colExprs
                   $ \(n,t,_) -> fmap (ncStrT n,) t
                   {-# LINE 17157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 181, column 9)
              _hdOexpectedType =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   liftM fst $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 17163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 182, column 9)
              _tlOexpectedType =
                  ({-# LINE 182 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   liftM snd $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 17169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 183, column 9)
              _hdOexpectedCast =
                  ({-# LINE 183 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 17175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 184, column 9)
              _tlOexpectedCast =
                  ({-# LINE 184 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 17181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 186, column 7)
              _lhsOupType =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _upType
                   {-# LINE 17187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 187, column 7)
              _lhsOupEnv =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case fmap E.envSelectListEnvironment _upType     of
                     (Just (Right e)) -> e
                     _ -> E.brokeEnvironment
                   {-# LINE 17195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 17201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 17207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 17219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 151 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 17231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 17249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 17261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree) =
                  hd_ _hdOassignmentCastContext _hdOcat _hdOdownEnv _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIcolExprs,_tlIoriginalTree,_tlIupEnv,_tlIupType) =
                  tl_ _tlOassignmentCastContext _tlOcat _tlOdownEnv _tlOexpectedCast _tlOexpectedType _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
_sem_SelectItemList_Nil :: T_SelectItemList
_sem_SelectItemList_Nil =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItemList
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _lhsOupEnv :: Environment
              _lhsOoriginalTree :: SelectItemList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 131, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   []
                   {-# LINE 17298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 174, column 9)
              _lhsOcolExprs =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   []
                   {-# LINE 17304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 175, column 9)
              _upType =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Nothing
                   {-# LINE 17310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 186, column 7)
              _lhsOupType =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _upType
                   {-# LINE 17316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 187, column 7)
              _lhsOupEnv =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case fmap E.envSelectListEnvironment _upType     of
                     (Just (Right e)) -> e
                     _ -> E.brokeEnvironment
                   {-# LINE 17324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
-- SelectList --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SelectList 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : SelectList 
         upEnv                : Environment
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative SelectList:
         child ann            : Annotation 
         child items          : SelectItemList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SelectList = SelectList (Annotation) (SelectItemList)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_SelectList :: SelectList ->
                  T_SelectList
_sem_SelectList (SelectList _ann _items) =
    (_sem_SelectList_SelectList (_sem_Annotation _ann) (_sem_SelectItemList _items))
-- semantic domain
type T_SelectList = Bool ->
                    Catalog ->
                    Environment ->
                    Bool ->
                    (Maybe [TypeExtra]) ->
                    TypeCheckFlags ->
                    (Maybe TypeExtra) ->
                    ( SelectList,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),SelectList,Environment,(Maybe [(Text,TypeExtra)]))
data Inh_SelectList = Inh_SelectList {_assignmentCastContext_Inh_SelectList :: Bool,_cat_Inh_SelectList :: Catalog,_downEnv_Inh_SelectList :: Environment,_expectedCast_Inh_SelectList :: Bool,_expectedType_Inh_SelectList :: (Maybe [TypeExtra]),_flags_Inh_SelectList :: TypeCheckFlags,_imCast_Inh_SelectList :: (Maybe TypeExtra)}
data Syn_SelectList = Syn_SelectList {_annotatedTree_Syn_SelectList :: SelectList,_colExprs_Syn_SelectList :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_SelectList :: SelectList,_upEnv_Syn_SelectList :: Environment,_upType_Syn_SelectList :: (Maybe [(Text,TypeExtra)])}
_wrap_SelectList :: T_SelectList ->
                   Inh_SelectList ->
                   Syn_SelectList
_wrap_SelectList sem (Inh_SelectList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_SelectList _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupEnv _lhsOupType))
_sem_SelectList_SelectList :: T_Annotation ->
                             T_SelectItemList ->
                             T_SelectList
_sem_SelectList_SelectList ann_ items_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _itemsOexpectedCast :: Bool
              _lhsOannotatedTree :: SelectList
              _lhsOoriginalTree :: SelectList
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _lhsOupEnv :: Environment
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _itemsOassignmentCastContext :: Bool
              _itemsOcat :: Catalog
              _itemsOdownEnv :: Environment
              _itemsOexpectedType :: (Maybe [TypeExtra])
              _itemsOflags :: TypeCheckFlags
              _itemsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _itemsIannotatedTree :: SelectItemList
              _itemsIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _itemsIoriginalTree :: SelectItemList
              _itemsIupEnv :: Environment
              _itemsIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 204, column 7)
              _annOtpe =
                  ({-# LINE 204 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
                   {-# LINE 17432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 205, column 7)
              _itemsOexpectedCast =
                  ({-# LINE 205 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   True
                   {-# LINE 17438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectList _annIannotatedTree _itemsIannotatedTree
                   {-# LINE 17444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectList _annIoriginalTree _itemsIoriginalTree
                   {-# LINE 17450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 157 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIcolExprs
                   {-# LINE 17468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupEnv =
                  ({-# LINE 161 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIupEnv
                   {-# LINE 17474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 158 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIupType
                   {-# LINE 17480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOassignmentCastContext =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 17504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOdownEnv =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 17516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOexpectedType =
                  ({-# LINE 159 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 17522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _itemsIannotatedTree,_itemsIcolExprs,_itemsIoriginalTree,_itemsIupEnv,_itemsIupType) =
                  items_ _itemsOassignmentCastContext _itemsOcat _itemsOdownEnv _itemsOexpectedCast _itemsOexpectedType _itemsOflags _itemsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
-- SetClause ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SetClause 
         originalTree         : SetClause 
   alternatives:
      alternative SetClause:
         child ann            : Annotation 
         child setTarget      : {NameComponent}
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative MultiSetClause:
         child ann            : Annotation 
         child setTargets     : {[NameComponent]}
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SetClause = SetClause (Annotation) (NameComponent) (ScalarExpr)
               | MultiSetClause (Annotation) (([NameComponent])) (ScalarExpr)
               deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_SetClause :: SetClause ->
                 T_SetClause
_sem_SetClause (SetClause _ann _setTarget _ex) =
    (_sem_SetClause_SetClause (_sem_Annotation _ann) _setTarget (_sem_ScalarExpr _ex))
_sem_SetClause (MultiSetClause _ann _setTargets _ex) =
    (_sem_SetClause_MultiSetClause (_sem_Annotation _ann) _setTargets (_sem_ScalarExpr _ex))
-- semantic domain
type T_SetClause = Catalog ->
                   TypeCheckFlags ->
                   (Maybe TypeExtra) ->
                   ( SetClause,SetClause)
data Inh_SetClause = Inh_SetClause {_cat_Inh_SetClause :: Catalog,_flags_Inh_SetClause :: TypeCheckFlags,_imCast_Inh_SetClause :: (Maybe TypeExtra)}
data Syn_SetClause = Syn_SetClause {_annotatedTree_Syn_SetClause :: SetClause,_originalTree_Syn_SetClause :: SetClause}
_wrap_SetClause :: T_SetClause ->
                  Inh_SetClause ->
                  Syn_SetClause
_wrap_SetClause sem (Inh_SetClause _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_SetClause _lhsOannotatedTree _lhsOoriginalTree))
_sem_SetClause_SetClause :: T_Annotation ->
                           NameComponent ->
                           T_ScalarExpr ->
                           T_SetClause
_sem_SetClause_SetClause ann_ setTarget_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOodbcFunction :: Bool
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: SetClause
              _lhsOoriginalTree :: SetClause
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 95, column 27)
              _annOtpe =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 17622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 96, column 27)
              _exOdownEnv =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 17628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 97, column 27)
              _exOexpectedCast =
                  ({-# LINE 97 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 17634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 98, column 27)
              _exOexpectedType =
                  ({-# LINE 98 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 17640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 168, column 32)
              _exOodbcFunction =
                  ({-# LINE 168 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 820, column 27)
              _exOassignmentCastContext =
                  ({-# LINE 820 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetClause _annIannotatedTree setTarget_ _exIannotatedTree
                   {-# LINE 17658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetClause _annIoriginalTree setTarget_ _exIoriginalTree
                   {-# LINE 17664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_SetClause_MultiSetClause :: T_Annotation ->
                                ([NameComponent]) ->
                                T_ScalarExpr ->
                                T_SetClause
_sem_SetClause_MultiSetClause ann_ setTargets_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOodbcFunction :: Bool
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: SetClause
              _lhsOoriginalTree :: SetClause
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 91, column 32)
              _annOtpe =
                  ({-# LINE 91 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 17751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 92, column 32)
              _exOdownEnv =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 17757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 93, column 32)
              _exOexpectedCast =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 17763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 94, column 32)
              _exOexpectedType =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 17769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 168, column 32)
              _exOodbcFunction =
                  ({-# LINE 168 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 819, column 32)
              _exOassignmentCastContext =
                  ({-# LINE 819 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   MultiSetClause _annIannotatedTree setTargets_ _exIannotatedTree
                   {-# LINE 17787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   MultiSetClause _annIoriginalTree setTargets_ _exIoriginalTree
                   {-# LINE 17793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- SetClauseList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SetClauseList 
         originalTree         : SetClauseList 
   alternatives:
      alternative Cons:
         child hd             : SetClause 
         child tl             : SetClauseList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type SetClauseList = [SetClause]
-- cata
_sem_SetClauseList :: SetClauseList ->
                     T_SetClauseList
_sem_SetClauseList list =
    (Prelude.foldr _sem_SetClauseList_Cons _sem_SetClauseList_Nil (Prelude.map _sem_SetClause list))
-- semantic domain
type T_SetClauseList = Catalog ->
                       TypeCheckFlags ->
                       (Maybe TypeExtra) ->
                       ( SetClauseList,SetClauseList)
data Inh_SetClauseList = Inh_SetClauseList {_cat_Inh_SetClauseList :: Catalog,_flags_Inh_SetClauseList :: TypeCheckFlags,_imCast_Inh_SetClauseList :: (Maybe TypeExtra)}
data Syn_SetClauseList = Syn_SetClauseList {_annotatedTree_Syn_SetClauseList :: SetClauseList,_originalTree_Syn_SetClauseList :: SetClauseList}
_wrap_SetClauseList :: T_SetClauseList ->
                      Inh_SetClauseList ->
                      Syn_SetClauseList
_wrap_SetClauseList sem (Inh_SetClauseList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_SetClauseList _lhsOannotatedTree _lhsOoriginalTree))
_sem_SetClauseList_Cons :: T_SetClause ->
                          T_SetClauseList ->
                          T_SetClauseList
_sem_SetClauseList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClauseList
              _lhsOoriginalTree :: SetClauseList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: SetClause
              _hdIoriginalTree :: SetClause
              _tlIannotatedTree :: SetClauseList
              _tlIoriginalTree :: SetClauseList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 17912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 17918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_SetClauseList_Nil :: T_SetClauseList
_sem_SetClauseList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClauseList
              _lhsOoriginalTree :: SetClauseList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Statement ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : Statement 
         originalTree         : Statement 
   alternatives:
      alternative QueryStatement:
         child ann            : Annotation 
         child ex             : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Insert:
         child ann            : Annotation 
         child table          : Name 
         child targetCols     : {[NameComponent]}
         child insData        : QueryExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local tpe         : {Either [TypeError] [TypeExtra]}
            local tooManyCols : {Maybe [TypeError]}
            local annotatedTree : _
            local originalTree : _
      alternative Update:
         child ann            : Annotation 
         child table          : Name 
         child assigns        : SetClauseList 
         child fromList       : TableRefList 
         child whr            : MaybeBoolExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Delete:
         child ann            : Annotation 
         child table          : Name 
         child using          : TableRefList 
         child whr            : MaybeBoolExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyFrom:
         child ann            : Annotation 
         child table          : Name 
         child targetCols     : {[NameComponent]}
         child source         : {CopyFromSource}
         child opts           : {[CopyOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyData:
         child ann            : Annotation 
         child insData        : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyTo:
         child ann            : Annotation 
         child cp             : {CopyToSource}
         child fn             : {String}
         child opts           : {[CopyOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Truncate:
         child ann            : Annotation 
         child tables         : {[Name]}
         child restartIdentity : {RestartIdentity}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTable:
         child ann            : Annotation 
         child name           : Name 
         child atts           : AttributeDefList 
         child cons           : ConstraintList 
         child partition      : MaybeTablePartitionDef 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterTable:
         child ann            : Annotation 
         child name           : Name 
         child operation      : AlterTableOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterDatabase:
         child ann            : Annotation 
         child name           : Name 
         child operation      : AlterDatabaseOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateSequence:
         child ann            : Annotation 
         child name           : Name 
         child incr           : {Integer}
         child min            : {Integer}
         child max            : {Integer}
         child start          : {Integer}
         child cache          : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequence:
         child ann            : Annotation 
         child name           : Name 
         child ownedBy        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTableAs:
         child ann            : Annotation 
         child name           : Name 
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateView:
         child ann            : Annotation 
         child name           : Name 
         child colNames       : {MaybeNameComponentList}
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterView:
         child ann            : Annotation 
         child name           : Name 
         child colNames       : {MaybeNameComponentList}
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateType:
         child ann            : Annotation 
         child name           : Name 
         child atts           : TypeAttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateUser:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateLogin:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterUser:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterLogin:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateSchema:
         child ann            : Annotation 
         child name           : {NameComponent}
         child owner          : {Maybe Name}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSchema:
         child ann            : Annotation 
         child name           : {NameComponent}
         child operation      : AlterSchemaOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropSchema:
         child ann            : Annotation 
         child name           : {NameComponent}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateFunction:
         child ann            : Annotation 
         child name           : Name 
         child params         : ParamDefList 
         child rettype        : TypeName 
         child rep            : {Replace}
         child lang           : {Language}
         child body           : FnBody 
         child vol            : {Volatility}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateDomain:
         child ann            : Annotation 
         child name           : Name 
         child typ            : TypeName 
         child constraintName : {String}
         child check          : MaybeBoolExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateLanguage:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTrigger:
         child ann            : Annotation 
         child name           : {NameComponent}
         child wh             : {TriggerWhen}
         child events         : {[TriggerEvent]}
         child tbl            : Name 
         child firing         : {TriggerFire}
         child fnName         : Name 
         child fnArgs         : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropFunction:
         child ann            : Annotation 
         child ifE            : {IfExists}
         child sigs           : NameTypeNameListPairList 
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropSomething:
         child ann            : Annotation 
         child dropType       : {DropType}
         child ifE            : {IfExists}
         child names          : {[Name]}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropTrigger:
         child ann            : Annotation 
         child ifE            : {IfExists}
         child name           : {NameComponent}
         child tbl            : Name 
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateDatabase:
         child ann            : Annotation 
         child nm             : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Set:
         child ann            : Annotation 
         child name           : {String}
         child values         : {[SetValue]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Notify:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Into:
         child ann            : Annotation 
         child strict         : {Bool}
         child into           : {[Name]}
         child stmt           : Statement 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Assignment:
         child ann            : Annotation 
         child target         : Name 
         child value          : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Return:
         child ann            : Annotation 
         child value          : MaybeScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReturnNext:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReturnQuery:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Raise:
         child ann            : Annotation 
         child level          : {RaiseType}
         child message        : {String}
         child args           : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative NullStatement:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Perform:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Execute:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ForQueryStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child var            : {NameComponent}
         child sel            : QueryExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ForIntegerStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child var            : {NameComponent}
         child from           : ScalarExpr 
         child to             : ScalarExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative LoopStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative WhileStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child expr           : ScalarExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ContinueStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ExitStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CaseStatementSimple:
         child ann            : Annotation 
         child val            : ScalarExpr 
         child cases          : ScalarExprListStatementListTripleList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CaseStatement:
         child ann            : Annotation 
         child cases          : ScalarExprListStatementListTripleList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative If:
         child ann            : Annotation 
         child cases          : ScalarExprStatementListPairList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Block:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child vars           : VarDefList 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AntiStatement:
         child string         : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DeclareStatement:
         child ann            : Annotation 
         child ds             : {[(String,TypeName,Maybe ScalarExpr)]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ExecStatement:
         child ann            : Annotation 
         child spName         : Name 
         child args           : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateIndexTSQL:
         child ann            : Annotation 
         child nm             : {NameComponent}
         child obj            : Name 
         child cols           : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Statement = QueryStatement (Annotation) (QueryExpr)
               | Insert (Annotation) (Name) (([NameComponent])) (QueryExpr) (MaybeSelectList)
               | Update (Annotation) (Name) (SetClauseList) (TableRefList) (MaybeBoolExpr) (MaybeSelectList)
               | Delete (Annotation) (Name) (TableRefList) (MaybeBoolExpr) (MaybeSelectList)
               | CopyFrom (Annotation) (Name) (([NameComponent])) (CopyFromSource) (([CopyOption]))
               | CopyData (Annotation) (String)
               | CopyTo (Annotation) (CopyToSource) (String) (([CopyOption]))
               | Truncate (Annotation) (([Name])) (RestartIdentity) (Cascade)
               | CreateTable (Annotation) (Name) (AttributeDefList) (ConstraintList) (MaybeTablePartitionDef)
               | AlterTable (Annotation) (Name) (AlterTableOperation)
               | AlterDatabase (Annotation) (Name) (AlterDatabaseOperation)
               | CreateSequence (Annotation) (Name) (Integer) (Integer) (Integer) (Integer) (Integer)
               | AlterSequence (Annotation) (Name) (Name)
               | CreateTableAs (Annotation) (Name) (QueryExpr)
               | CreateView (Annotation) (Name) (MaybeNameComponentList) (QueryExpr)
               | AlterView (Annotation) (Name) (MaybeNameComponentList) (QueryExpr)
               | CreateType (Annotation) (Name) (TypeAttributeDefList)
               | CreateUser (Annotation) (Name) (String)
               | CreateLogin (Annotation) (Name) (String)
               | AlterUser (Annotation) (Name) (String)
               | AlterLogin (Annotation) (Name) (String)
               | CreateSchema (Annotation) (NameComponent) ((Maybe Name))
               | AlterSchema (Annotation) (NameComponent) (AlterSchemaOperation)
               | DropSchema (Annotation) (NameComponent) (Cascade)
               | CreateFunction (Annotation) (Name) (ParamDefList) (TypeName) (Replace) (Language) (FnBody) (Volatility)
               | CreateDomain (Annotation) (Name) (TypeName) (String) (MaybeBoolExpr)
               | CreateLanguage (Annotation) (String)
               | CreateTrigger (Annotation) (NameComponent) (TriggerWhen) (([TriggerEvent])) (Name) (TriggerFire) (Name) (ScalarExprList)
               | DropFunction (Annotation) (IfExists) (NameTypeNameListPairList) (Cascade)
               | DropSomething (Annotation) (DropType) (IfExists) (([Name])) (Cascade)
               | DropTrigger (Annotation) (IfExists) (NameComponent) (Name) (Cascade)
               | CreateDatabase (Annotation) (Name)
               | Set (Annotation) (String) (([SetValue]))
               | Notify (Annotation) (String)
               | Into (Annotation) (Bool) (([Name])) (Statement)
               | Assignment (Annotation) (Name) (ScalarExpr)
               | Return (Annotation) (MaybeScalarExpr)
               | ReturnNext (Annotation) (ScalarExpr)
               | ReturnQuery (Annotation) (QueryExpr)
               | Raise (Annotation) (RaiseType) (String) (ScalarExprList)
               | NullStatement (Annotation)
               | Perform (Annotation) (ScalarExpr)
               | Execute (Annotation) (ScalarExpr)
               | ForQueryStatement (Annotation) ((Maybe String)) (NameComponent) (QueryExpr) (StatementList)
               | ForIntegerStatement (Annotation) ((Maybe String)) (NameComponent) (ScalarExpr) (ScalarExpr) (StatementList)
               | LoopStatement (Annotation) ((Maybe String)) (StatementList)
               | WhileStatement (Annotation) ((Maybe String)) (ScalarExpr) (StatementList)
               | ContinueStatement (Annotation) ((Maybe String))
               | ExitStatement (Annotation) ((Maybe String))
               | CaseStatementSimple (Annotation) (ScalarExpr) (ScalarExprListStatementListTripleList) (StatementList)
               | CaseStatement (Annotation) (ScalarExprListStatementListTripleList) (StatementList)
               | If (Annotation) (ScalarExprStatementListPairList) (StatementList)
               | Block (Annotation) ((Maybe String)) (VarDefList) (StatementList)
               | AntiStatement (String)
               | DeclareStatement (Annotation) (([(String,TypeName,Maybe ScalarExpr)]))
               | ExecStatement (Annotation) (Name) (ScalarExprList)
               | CreateIndexTSQL (Annotation) (NameComponent) (Name) (([NameComponent]))
               deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_Statement :: Statement ->
                 T_Statement
_sem_Statement (QueryStatement _ann _ex) =
    (_sem_Statement_QueryStatement (_sem_Annotation _ann) (_sem_QueryExpr _ex))
_sem_Statement (Insert _ann _table _targetCols _insData _returning) =
    (_sem_Statement_Insert (_sem_Annotation _ann) (_sem_Name _table) _targetCols (_sem_QueryExpr _insData) (_sem_MaybeSelectList _returning))
_sem_Statement (Update _ann _table _assigns _fromList _whr _returning) =
    (_sem_Statement_Update (_sem_Annotation _ann) (_sem_Name _table) (_sem_SetClauseList _assigns) (_sem_TableRefList _fromList) (_sem_MaybeBoolExpr _whr) (_sem_MaybeSelectList _returning))
_sem_Statement (Delete _ann _table _using _whr _returning) =
    (_sem_Statement_Delete (_sem_Annotation _ann) (_sem_Name _table) (_sem_TableRefList _using) (_sem_MaybeBoolExpr _whr) (_sem_MaybeSelectList _returning))
_sem_Statement (CopyFrom _ann _table _targetCols _source _opts) =
    (_sem_Statement_CopyFrom (_sem_Annotation _ann) (_sem_Name _table) _targetCols _source _opts)
_sem_Statement (CopyData _ann _insData) =
    (_sem_Statement_CopyData (_sem_Annotation _ann) _insData)
_sem_Statement (CopyTo _ann _cp _fn _opts) =
    (_sem_Statement_CopyTo (_sem_Annotation _ann) _cp _fn _opts)
_sem_Statement (Truncate _ann _tables _restartIdentity _cascade) =
    (_sem_Statement_Truncate (_sem_Annotation _ann) _tables _restartIdentity _cascade)
_sem_Statement (CreateTable _ann _name _atts _cons _partition) =
    (_sem_Statement_CreateTable (_sem_Annotation _ann) (_sem_Name _name) (_sem_AttributeDefList _atts) (_sem_ConstraintList _cons) (_sem_MaybeTablePartitionDef _partition))
_sem_Statement (AlterTable _ann _name _operation) =
    (_sem_Statement_AlterTable (_sem_Annotation _ann) (_sem_Name _name) (_sem_AlterTableOperation _operation))
_sem_Statement (AlterDatabase _ann _name _operation) =
    (_sem_Statement_AlterDatabase (_sem_Annotation _ann) (_sem_Name _name) (_sem_AlterDatabaseOperation _operation))
_sem_Statement (CreateSequence _ann _name _incr _min _max _start _cache) =
    (_sem_Statement_CreateSequence (_sem_Annotation _ann) (_sem_Name _name) _incr _min _max _start _cache)
_sem_Statement (AlterSequence _ann _name _ownedBy) =
    (_sem_Statement_AlterSequence (_sem_Annotation _ann) (_sem_Name _name) (_sem_Name _ownedBy))
_sem_Statement (CreateTableAs _ann _name _expr) =
    (_sem_Statement_CreateTableAs (_sem_Annotation _ann) (_sem_Name _name) (_sem_QueryExpr _expr))
_sem_Statement (CreateView _ann _name _colNames _expr) =
    (_sem_Statement_CreateView (_sem_Annotation _ann) (_sem_Name _name) _colNames (_sem_QueryExpr _expr))
_sem_Statement (AlterView _ann _name _colNames _expr) =
    (_sem_Statement_AlterView (_sem_Annotation _ann) (_sem_Name _name) _colNames (_sem_QueryExpr _expr))
_sem_Statement (CreateType _ann _name _atts) =
    (_sem_Statement_CreateType (_sem_Annotation _ann) (_sem_Name _name) (_sem_TypeAttributeDefList _atts))
_sem_Statement (CreateUser _ann _name _password) =
    (_sem_Statement_CreateUser (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (CreateLogin _ann _name _password) =
    (_sem_Statement_CreateLogin (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (AlterUser _ann _name _password) =
    (_sem_Statement_AlterUser (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (AlterLogin _ann _name _password) =
    (_sem_Statement_AlterLogin (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (CreateSchema _ann _name _owner) =
    (_sem_Statement_CreateSchema (_sem_Annotation _ann) _name _owner)
_sem_Statement (AlterSchema _ann _name _operation) =
    (_sem_Statement_AlterSchema (_sem_Annotation _ann) _name (_sem_AlterSchemaOperation _operation))
_sem_Statement (DropSchema _ann _name _cascade) =
    (_sem_Statement_DropSchema (_sem_Annotation _ann) _name _cascade)
_sem_Statement (CreateFunction _ann _name _params _rettype _rep _lang _body _vol) =
    (_sem_Statement_CreateFunction (_sem_Annotation _ann) (_sem_Name _name) (_sem_ParamDefList _params) (_sem_TypeName _rettype) _rep _lang (_sem_FnBody _body) _vol)
_sem_Statement (CreateDomain _ann _name _typ _constraintName _check) =
    (_sem_Statement_CreateDomain (_sem_Annotation _ann) (_sem_Name _name) (_sem_TypeName _typ) _constraintName (_sem_MaybeBoolExpr _check))
_sem_Statement (CreateLanguage _ann _name) =
    (_sem_Statement_CreateLanguage (_sem_Annotation _ann) _name)
_sem_Statement (CreateTrigger _ann _name _wh _events _tbl _firing _fnName _fnArgs) =
    (_sem_Statement_CreateTrigger (_sem_Annotation _ann) _name _wh _events (_sem_Name _tbl) _firing (_sem_Name _fnName) (_sem_ScalarExprList _fnArgs))
_sem_Statement (DropFunction _ann _ifE _sigs _cascade) =
    (_sem_Statement_DropFunction (_sem_Annotation _ann) _ifE (_sem_NameTypeNameListPairList _sigs) _cascade)
_sem_Statement (DropSomething _ann _dropType _ifE _names _cascade) =
    (_sem_Statement_DropSomething (_sem_Annotation _ann) _dropType _ifE _names _cascade)
_sem_Statement (DropTrigger _ann _ifE _name _tbl _cascade) =
    (_sem_Statement_DropTrigger (_sem_Annotation _ann) _ifE _name (_sem_Name _tbl) _cascade)
_sem_Statement (CreateDatabase _ann _nm) =
    (_sem_Statement_CreateDatabase (_sem_Annotation _ann) (_sem_Name _nm))
_sem_Statement (Set _ann _name _values) =
    (_sem_Statement_Set (_sem_Annotation _ann) _name _values)
_sem_Statement (Notify _ann _name) =
    (_sem_Statement_Notify (_sem_Annotation _ann) _name)
_sem_Statement (Into _ann _strict _into _stmt) =
    (_sem_Statement_Into (_sem_Annotation _ann) _strict _into (_sem_Statement _stmt))
_sem_Statement (Assignment _ann _target _value) =
    (_sem_Statement_Assignment (_sem_Annotation _ann) (_sem_Name _target) (_sem_ScalarExpr _value))
_sem_Statement (Return _ann _value) =
    (_sem_Statement_Return (_sem_Annotation _ann) (_sem_MaybeScalarExpr _value))
_sem_Statement (ReturnNext _ann _expr) =
    (_sem_Statement_ReturnNext (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_Statement (ReturnQuery _ann _sel) =
    (_sem_Statement_ReturnQuery (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_Statement (Raise _ann _level _message _args) =
    (_sem_Statement_Raise (_sem_Annotation _ann) _level _message (_sem_ScalarExprList _args))
_sem_Statement (NullStatement _ann) =
    (_sem_Statement_NullStatement (_sem_Annotation _ann))
_sem_Statement (Perform _ann _expr) =
    (_sem_Statement_Perform (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_Statement (Execute _ann _expr) =
    (_sem_Statement_Execute (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_Statement (ForQueryStatement _ann _lb _var _sel _sts) =
    (_sem_Statement_ForQueryStatement (_sem_Annotation _ann) _lb _var (_sem_QueryExpr _sel) (_sem_StatementList _sts))
_sem_Statement (ForIntegerStatement _ann _lb _var _from _to _sts) =
    (_sem_Statement_ForIntegerStatement (_sem_Annotation _ann) _lb _var (_sem_ScalarExpr _from) (_sem_ScalarExpr _to) (_sem_StatementList _sts))
_sem_Statement (LoopStatement _ann _lb _sts) =
    (_sem_Statement_LoopStatement (_sem_Annotation _ann) _lb (_sem_StatementList _sts))
_sem_Statement (WhileStatement _ann _lb _expr _sts) =
    (_sem_Statement_WhileStatement (_sem_Annotation _ann) _lb (_sem_ScalarExpr _expr) (_sem_StatementList _sts))
_sem_Statement (ContinueStatement _ann _lb) =
    (_sem_Statement_ContinueStatement (_sem_Annotation _ann) _lb)
_sem_Statement (ExitStatement _ann _lb) =
    (_sem_Statement_ExitStatement (_sem_Annotation _ann) _lb)
_sem_Statement (CaseStatementSimple _ann _val _cases _els) =
    (_sem_Statement_CaseStatementSimple (_sem_Annotation _ann) (_sem_ScalarExpr _val) (_sem_ScalarExprListStatementListTripleList _cases) (_sem_StatementList _els))
_sem_Statement (CaseStatement _ann _cases _els) =
    (_sem_Statement_CaseStatement (_sem_Annotation _ann) (_sem_ScalarExprListStatementListTripleList _cases) (_sem_StatementList _els))
_sem_Statement (If _ann _cases _els) =
    (_sem_Statement_If (_sem_Annotation _ann) (_sem_ScalarExprStatementListPairList _cases) (_sem_StatementList _els))
_sem_Statement (Block _ann _lb _vars _sts) =
    (_sem_Statement_Block (_sem_Annotation _ann) _lb (_sem_VarDefList _vars) (_sem_StatementList _sts))
_sem_Statement (AntiStatement _string) =
    (_sem_Statement_AntiStatement _string)
_sem_Statement (DeclareStatement _ann _ds) =
    (_sem_Statement_DeclareStatement (_sem_Annotation _ann) _ds)
_sem_Statement (ExecStatement _ann _spName _args) =
    (_sem_Statement_ExecStatement (_sem_Annotation _ann) (_sem_Name _spName) (_sem_ScalarExprList _args))
_sem_Statement (CreateIndexTSQL _ann _nm _obj _cols) =
    (_sem_Statement_CreateIndexTSQL (_sem_Annotation _ann) _nm (_sem_Name _obj) _cols)
-- semantic domain
type T_Statement = Catalog ->
                   TypeCheckFlags ->
                   (Maybe TypeExtra) ->
                   ( Statement,Statement)
data Inh_Statement = Inh_Statement {_cat_Inh_Statement :: Catalog,_flags_Inh_Statement :: TypeCheckFlags,_imCast_Inh_Statement :: (Maybe TypeExtra)}
data Syn_Statement = Syn_Statement {_annotatedTree_Syn_Statement :: Statement,_originalTree_Syn_Statement :: Statement}
_wrap_Statement :: T_Statement ->
                  Inh_Statement ->
                  Syn_Statement
_wrap_Statement sem (Inh_Statement _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_Statement _lhsOannotatedTree _lhsOoriginalTree))
_sem_Statement_QueryStatement :: T_Annotation ->
                                T_QueryExpr ->
                                T_Statement
_sem_Statement_QueryStatement ann_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe [TypeExtra])
              _exOouterDownEnv :: (Maybe Environment)
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: QueryExpr
              _exIoriginalTree :: QueryExpr
              _exIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 18664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 16, column 5)
              _exOexpectedType =
                  ({-# LINE 16 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _exIupType
                   {-# LINE 18670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 25, column 20)
              _exOouterDownEnv =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 18676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 834, column 32)
              _exOassignmentCastContext =
                  ({-# LINE 834 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 18682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QueryStatement _annIannotatedTree _exIannotatedTree
                   {-# LINE 18688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QueryStatement _annIoriginalTree _exIoriginalTree
                   {-# LINE 18694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOexpectedType _exOflags _exOimCast _exOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Insert :: T_Annotation ->
                        T_Name ->
                        ([NameComponent]) ->
                        T_QueryExpr ->
                        T_MaybeSelectList ->
                        T_Statement
_sem_Statement_Insert ann_ table_ targetCols_ insData_ returning_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] [TypeExtra])
              _tableOtpe :: (Either [TypeError] TypeExtra)
              _insDataOexpectedType :: (Maybe [TypeExtra])
              _insDataOouterDownEnv :: (Maybe Environment)
              _tooManyCols :: (Maybe [TypeError])
              _insDataOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckFlags
              _tableOimCast :: (Maybe TypeExtra)
              _insDataOcat :: Catalog
              _insDataOflags :: TypeCheckFlags
              _insDataOimCast :: (Maybe TypeExtra)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckFlags
              _returningOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              _insDataIannotatedTree :: QueryExpr
              _insDataIoriginalTree :: QueryExpr
              _insDataIupType :: (Maybe [(Text,TypeExtra)])
              _returningIannotatedTree :: MaybeSelectList
              _returningIoriginalTree :: MaybeSelectList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 18793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 25, column 5)
              _tpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   do
                   let tnm = nameComponents _tableIoriginalTree
                   (_,pub,_) <- catLookupTableAndAttrs _lhsIcat tnm
                   case targetCols_ of
                        []  -> return $ map snd pub
                        tcs -> do
                               tcs' <- mapM xnmcString tcs
                               let utcs' = nub tcs'
                               when (length utcs' /= length tcs') $
                                   Left $ map DuplicateColumnName
                                        $ nub (tcs' \\ utcs')
                               forM tcs' $ \x ->
                                   maybe (Left [UnrecognisedIdentifier x])
                                         Right $ lookup x pub
                   {-# LINE 18812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 44, column 5)
              _tableOtpe =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left (either id (const []) _tpe
                         ++ maybe [] id _tooManyCols    )
                   {-# LINE 18819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 47, column 5)
              _insDataOexpectedType =
                  ({-# LINE 47 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 18825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 49, column 5)
              _insDataOouterDownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Nothing
                   {-# LINE 18831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 54, column 5)
              _tooManyCols =
                  ({-# LINE 54 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   do
                   x <- _insDataIupType
                   y <- either (const Nothing) Just _tpe
                   if (length x > length y)
                       then Just [TooManyColumnsInInsert]
                       else Nothing
                   {-# LINE 18842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 832, column 24)
              _insDataOassignmentCastContext =
                  ({-# LINE 832 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 18848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Insert _annIannotatedTree _tableIannotatedTree targetCols_ _insDataIannotatedTree _returningIannotatedTree
                   {-# LINE 18854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Insert _annIoriginalTree _tableIoriginalTree targetCols_ _insDataIoriginalTree _returningIoriginalTree
                   {-# LINE 18860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _insDataOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _insDataOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _insDataOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18944 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
              ( _insDataIannotatedTree,_insDataIoriginalTree,_insDataIupType) =
                  insData_ _insDataOassignmentCastContext _insDataOcat _insDataOexpectedType _insDataOflags _insDataOimCast _insDataOouterDownEnv
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Update :: T_Annotation ->
                        T_Name ->
                        T_SetClauseList ->
                        T_TableRefList ->
                        T_MaybeBoolExpr ->
                        T_MaybeSelectList ->
                        T_Statement
_sem_Statement_Update ann_ table_ assigns_ fromList_ whr_ returning_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tableOtpe :: (Either [TypeError] TypeExtra)
              _whrOdownEnv :: Environment
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckFlags
              _tableOimCast :: (Maybe TypeExtra)
              _assignsOcat :: Catalog
              _assignsOflags :: TypeCheckFlags
              _assignsOimCast :: (Maybe TypeExtra)
              _fromListOcat :: Catalog
              _fromListOflags :: TypeCheckFlags
              _fromListOimCast :: (Maybe TypeExtra)
              _whrOcat :: Catalog
              _whrOflags :: TypeCheckFlags
              _whrOimCast :: (Maybe TypeExtra)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckFlags
              _returningOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              _assignsIannotatedTree :: SetClauseList
              _assignsIoriginalTree :: SetClauseList
              _fromListIannotatedTree :: TableRefList
              _fromListIoriginalTree :: TableRefList
              _fromListIupEnv :: Environment
              _whrIannotatedTree :: MaybeBoolExpr
              _whrIoriginalTree :: MaybeBoolExpr
              _returningIannotatedTree :: MaybeSelectList
              _returningIoriginalTree :: MaybeSelectList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 210, column 24)
              _tableOtpe =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 211, column 24)
              _whrOdownEnv =
                  ({-# LINE 211 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 19012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Update _annIannotatedTree _tableIannotatedTree _assignsIannotatedTree _fromListIannotatedTree _whrIannotatedTree _returningIannotatedTree
                   {-# LINE 19024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Update _annIoriginalTree _tableIoriginalTree _assignsIoriginalTree _fromListIoriginalTree _whrIoriginalTree _returningIoriginalTree
                   {-# LINE 19030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _assignsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _assignsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _assignsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromListOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromListOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19108 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromListOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19114 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19120 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19126 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19132 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19138 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19144 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19150 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
              ( _assignsIannotatedTree,_assignsIoriginalTree) =
                  assigns_ _assignsOcat _assignsOflags _assignsOimCast
              ( _fromListIannotatedTree,_fromListIoriginalTree,_fromListIupEnv) =
                  fromList_ _fromListOcat _fromListOflags _fromListOimCast
              ( _whrIannotatedTree,_whrIoriginalTree) =
                  whr_ _whrOcat _whrOdownEnv _whrOflags _whrOimCast
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Delete :: T_Annotation ->
                        T_Name ->
                        T_TableRefList ->
                        T_MaybeBoolExpr ->
                        T_MaybeSelectList ->
                        T_Statement
_sem_Statement_Delete ann_ table_ using_ whr_ returning_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tableOtpe :: (Either [TypeError] TypeExtra)
              _whrOdownEnv :: Environment
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckFlags
              _tableOimCast :: (Maybe TypeExtra)
              _usingOcat :: Catalog
              _usingOflags :: TypeCheckFlags
              _usingOimCast :: (Maybe TypeExtra)
              _whrOcat :: Catalog
              _whrOflags :: TypeCheckFlags
              _whrOimCast :: (Maybe TypeExtra)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckFlags
              _returningOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              _usingIannotatedTree :: TableRefList
              _usingIoriginalTree :: TableRefList
              _usingIupEnv :: Environment
              _whrIannotatedTree :: MaybeBoolExpr
              _whrIoriginalTree :: MaybeBoolExpr
              _returningIannotatedTree :: MaybeSelectList
              _returningIoriginalTree :: MaybeSelectList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 160, column 24)
              _tableOtpe =
                  ({-# LINE 160 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 161, column 24)
              _whrOdownEnv =
                  ({-# LINE 161 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 19216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Delete _annIannotatedTree _tableIannotatedTree _usingIannotatedTree _whrIannotatedTree _returningIannotatedTree
                   {-# LINE 19228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Delete _annIoriginalTree _tableIoriginalTree _usingIoriginalTree _whrIoriginalTree _returningIoriginalTree
                   {-# LINE 19234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _usingOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _usingOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _usingOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
              ( _usingIannotatedTree,_usingIoriginalTree,_usingIupEnv) =
                  using_ _usingOcat _usingOflags _usingOimCast
              ( _whrIannotatedTree,_whrIoriginalTree) =
                  whr_ _whrOcat _whrOdownEnv _whrOflags _whrOimCast
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CopyFrom :: T_Annotation ->
                          T_Name ->
                          ([NameComponent]) ->
                          CopyFromSource ->
                          ([CopyOption]) ->
                          T_Statement
_sem_Statement_CopyFrom ann_ table_ targetCols_ source_ opts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tableOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckFlags
              _tableOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 127, column 26)
              _tableOtpe =
                  ({-# LINE 127 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyFrom _annIannotatedTree _tableIannotatedTree targetCols_ source_ opts_
                   {-# LINE 19389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyFrom _annIoriginalTree _tableIoriginalTree targetCols_ source_ opts_
                   {-# LINE 19395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CopyData :: T_Annotation ->
                          String ->
                          T_Statement
_sem_Statement_CopyData ann_ insData_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 126, column 26)
              _annOtpe =
                  ({-# LINE 126 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyData _annIannotatedTree insData_
                   {-# LINE 19475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyData _annIoriginalTree insData_
                   {-# LINE 19481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CopyTo :: T_Annotation ->
                        CopyToSource ->
                        String ->
                        ([CopyOption]) ->
                        T_Statement
_sem_Statement_CopyTo ann_ cp_ fn_ opts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyTo _annIannotatedTree cp_ fn_ opts_
                   {-# LINE 19543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyTo _annIoriginalTree cp_ fn_ opts_
                   {-# LINE 19549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Truncate :: T_Annotation ->
                          ([Name]) ->
                          RestartIdentity ->
                          Cascade ->
                          T_Statement
_sem_Statement_Truncate ann_ tables_ restartIdentity_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Truncate _annIannotatedTree tables_ restartIdentity_ cascade_
                   {-# LINE 19611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Truncate _annIoriginalTree tables_ restartIdentity_ cascade_
                   {-# LINE 19617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateTable :: T_Annotation ->
                             T_Name ->
                             T_AttributeDefList ->
                             T_ConstraintList ->
                             T_MaybeTablePartitionDef ->
                             T_Statement
_sem_Statement_CreateTable ann_ name_ atts_ cons_ partition_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _attsOcat :: Catalog
              _attsOflags :: TypeCheckFlags
              _attsOimCast :: (Maybe TypeExtra)
              _consOcat :: Catalog
              _consOflags :: TypeCheckFlags
              _consOimCast :: (Maybe TypeExtra)
              _partitionOcat :: Catalog
              _partitionOflags :: TypeCheckFlags
              _partitionOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _attsIannotatedTree :: AttributeDefList
              _attsIoriginalTree :: AttributeDefList
              _consIannotatedTree :: ConstraintList
              _consIoriginalTree :: ConstraintList
              _partitionIannotatedTree :: MaybeTablePartitionDef
              _partitionIoriginalTree :: MaybeTablePartitionDef
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 142, column 29)
              _annOtpe =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 143, column 29)
              _nameOtpe =
                  ({-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTable _annIannotatedTree _nameIannotatedTree _attsIannotatedTree _consIannotatedTree _partitionIannotatedTree
                   {-# LINE 19707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTable _annIoriginalTree _nameIoriginalTree _attsIoriginalTree _consIoriginalTree _partitionIoriginalTree
                   {-# LINE 19713 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19719 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19725 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19731 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _attsIannotatedTree,_attsIoriginalTree) =
                  atts_ _attsOcat _attsOflags _attsOimCast
              ( _consIannotatedTree,_consIoriginalTree) =
                  cons_ _consOcat _consOflags _consOimCast
              ( _partitionIannotatedTree,_partitionIoriginalTree) =
                  partition_ _partitionOcat _partitionOflags _partitionOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterTable :: T_Annotation ->
                            T_Name ->
                            T_AlterTableOperation ->
                            T_Statement
_sem_Statement_AlterTable ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _operationIannotatedTree :: AlterTableOperation
              _operationIoriginalTree :: AlterTableOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 107, column 28)
              _annOtpe =
                  ({-# LINE 107 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 108, column 28)
              _nameOtpe =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTable _annIannotatedTree _nameIannotatedTree _operationIannotatedTree
                   {-# LINE 19871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTable _annIoriginalTree _nameIoriginalTree _operationIoriginalTree
                   {-# LINE 19877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterDatabase :: T_Annotation ->
                               T_Name ->
                               T_AlterDatabaseOperation ->
                               T_Statement
_sem_Statement_AlterDatabase ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _operationIannotatedTree :: AlterDatabaseOperation
              _operationIoriginalTree :: AlterDatabaseOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 99, column 31)
              _annOtpe =
                  ({-# LINE 99 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 100, column 31)
              _nameOtpe =
                  ({-# LINE 100 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterDatabase _annIannotatedTree _nameIannotatedTree _operationIannotatedTree
                   {-# LINE 19995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterDatabase _annIoriginalTree _nameIoriginalTree _operationIoriginalTree
                   {-# LINE 20001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateSequence :: T_Annotation ->
                                T_Name ->
                                Integer ->
                                Integer ->
                                Integer ->
                                Integer ->
                                Integer ->
                                T_Statement
_sem_Statement_CreateSequence ann_ name_ incr_ min_ max_ start_ cache_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 140, column 32)
              _annOtpe =
                  ({-# LINE 140 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 141, column 32)
              _nameOtpe =
                  ({-# LINE 141 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSequence _annIannotatedTree _nameIannotatedTree incr_ min_ max_ start_ cache_
                   {-# LINE 20118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSequence _annIoriginalTree _nameIoriginalTree incr_ min_ max_ start_ cache_
                   {-# LINE 20124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterSequence :: T_Annotation ->
                               T_Name ->
                               T_Name ->
                               T_Statement
_sem_Statement_AlterSequence ann_ name_ ownedBy_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _ownedByOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _ownedByOcat :: Catalog
              _ownedByOflags :: TypeCheckFlags
              _ownedByOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _ownedByIannotatedTree :: Name
              _ownedByIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 104, column 31)
              _annOtpe =
                  ({-# LINE 104 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 105, column 31)
              _nameOtpe =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 106, column 31)
              _ownedByOtpe =
                  ({-# LINE 106 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequence _annIannotatedTree _nameIannotatedTree _ownedByIannotatedTree
                   {-# LINE 20229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequence _annIoriginalTree _nameIoriginalTree _ownedByIoriginalTree
                   {-# LINE 20235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _ownedByOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _ownedByOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _ownedByOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _ownedByIannotatedTree,_ownedByIoriginalTree) =
                  ownedBy_ _ownedByOcat _ownedByOflags _ownedByOimCast _ownedByOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateTableAs :: T_Annotation ->
                               T_Name ->
                               T_QueryExpr ->
                               T_Statement
_sem_Statement_CreateTableAs ann_ name_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOouterDownEnv :: (Maybe Environment)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _exprOexpectedType :: (Maybe [TypeExtra])
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _exprIannotatedTree :: QueryExpr
              _exprIoriginalTree :: QueryExpr
              _exprIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 144, column 31)
              _annOtpe =
                  ({-# LINE 144 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 145, column 31)
              _exprOouterDownEnv =
                  ({-# LINE 145 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 20351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 146, column 31)
              _nameOtpe =
                  ({-# LINE 146 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 19, column 5)
              _exprOexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _exprIupType
                   {-# LINE 20363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 824, column 31)
              _exprOassignmentCastContext =
                  ({-# LINE 824 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 20369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTableAs _annIannotatedTree _nameIannotatedTree _exprIannotatedTree
                   {-# LINE 20375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTableAs _annIoriginalTree _nameIoriginalTree _exprIoriginalTree
                   {-# LINE 20381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOexpectedType _exprOflags _exprOimCast _exprOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateView :: T_Annotation ->
                            T_Name ->
                            MaybeNameComponentList ->
                            T_QueryExpr ->
                            T_Statement
_sem_Statement_CreateView ann_ name_ colNames_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOouterDownEnv :: (Maybe Environment)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _exprOexpectedType :: (Maybe [TypeExtra])
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _exprIannotatedTree :: QueryExpr
              _exprIoriginalTree :: QueryExpr
              _exprIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 157, column 28)
              _annOtpe =
                  ({-# LINE 157 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 158, column 28)
              _exprOouterDownEnv =
                  ({-# LINE 158 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 20498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 159, column 28)
              _nameOtpe =
                  ({-# LINE 159 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 19, column 5)
              _exprOexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _exprIupType
                   {-# LINE 20510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 826, column 28)
              _exprOassignmentCastContext =
                  ({-# LINE 826 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 20516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateView _annIannotatedTree _nameIannotatedTree colNames_ _exprIannotatedTree
                   {-# LINE 20522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateView _annIoriginalTree _nameIoriginalTree colNames_ _exprIoriginalTree
                   {-# LINE 20528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOexpectedType _exprOflags _exprOimCast _exprOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterView :: T_Annotation ->
                           T_Name ->
                           MaybeNameComponentList ->
                           T_QueryExpr ->
                           T_Statement
_sem_Statement_AlterView ann_ name_ colNames_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOexpectedType :: (Maybe [TypeExtra])
              _exprOouterDownEnv :: (Maybe Environment)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _exprIannotatedTree :: QueryExpr
              _exprIoriginalTree :: QueryExpr
              _exprIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 111, column 27)
              _annOtpe =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 112, column 27)
              _exprOexpectedType =
                  ({-# LINE 112 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 20645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 113, column 27)
              _exprOouterDownEnv =
                  ({-# LINE 113 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 20651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 114, column 27)
              _nameOtpe =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 821, column 27)
              _exprOassignmentCastContext =
                  ({-# LINE 821 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 20663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterView _annIannotatedTree _nameIannotatedTree colNames_ _exprIannotatedTree
                   {-# LINE 20669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterView _annIoriginalTree _nameIoriginalTree colNames_ _exprIoriginalTree
                   {-# LINE 20675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20711 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20717 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOexpectedType _exprOflags _exprOimCast _exprOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateType :: T_Annotation ->
                            T_Name ->
                            T_TypeAttributeDefList ->
                            T_Statement
_sem_Statement_CreateType ann_ name_ atts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _attsOcat :: Catalog
              _attsOflags :: TypeCheckFlags
              _attsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _attsIannotatedTree :: TypeAttributeDefList
              _attsIoriginalTree :: TypeAttributeDefList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 153, column 28)
              _annOtpe =
                  ({-# LINE 153 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 154, column 28)
              _nameOtpe =
                  ({-# LINE 154 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateType _annIannotatedTree _nameIannotatedTree _attsIannotatedTree
                   {-# LINE 20793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateType _annIoriginalTree _nameIoriginalTree _attsIoriginalTree
                   {-# LINE 20799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _attsIannotatedTree,_attsIoriginalTree) =
                  atts_ _attsOcat _attsOflags _attsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateUser :: T_Annotation ->
                            T_Name ->
                            String ->
                            T_Statement
_sem_Statement_CreateUser ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 155, column 28)
              _annOtpe =
                  ({-# LINE 155 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 156, column 28)
              _nameOtpe =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateUser _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 20912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateUser _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 20918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateLogin :: T_Annotation ->
                             T_Name ->
                             String ->
                             T_Statement
_sem_Statement_CreateLogin ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 137, column 29)
              _annOtpe =
                  ({-# LINE 137 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 138, column 29)
              _nameOtpe =
                  ({-# LINE 138 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLogin _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 21011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLogin _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 21017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21053 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21059 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21065 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterUser :: T_Annotation ->
                           T_Name ->
                           String ->
                           T_Statement
_sem_Statement_AlterUser ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 109, column 27)
              _annOtpe =
                  ({-# LINE 109 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 110, column 27)
              _nameOtpe =
                  ({-# LINE 110 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterUser _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 21110 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterUser _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 21116 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21122 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21128 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21134 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21140 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterLogin :: T_Annotation ->
                            T_Name ->
                            String ->
                            T_Statement
_sem_Statement_AlterLogin ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 101, column 28)
              _annOtpe =
                  ({-# LINE 101 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 102, column 28)
              _nameOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterLogin _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 21209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterLogin _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 21215 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21239 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21257 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateSchema :: T_Annotation ->
                              NameComponent ->
                              (Maybe Name) ->
                              T_Statement
_sem_Statement_CreateSchema ann_ name_ owner_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 139, column 30)
              _annOtpe =
                  ({-# LINE 139 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSchema _annIannotatedTree name_ owner_
                   {-# LINE 21296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSchema _annIoriginalTree name_ owner_
                   {-# LINE 21302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21314 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterSchema :: T_Annotation ->
                             NameComponent ->
                             T_AlterSchemaOperation ->
                             T_Statement
_sem_Statement_AlterSchema ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _operationIannotatedTree :: AlterSchemaOperation
              _operationIoriginalTree :: AlterSchemaOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 103, column 29)
              _annOtpe =
                  ({-# LINE 103 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21362 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchema _annIannotatedTree name_ _operationIannotatedTree
                   {-# LINE 21368 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchema _annIoriginalTree name_ _operationIoriginalTree
                   {-# LINE 21374 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21380 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21386 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21392 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropSchema :: T_Annotation ->
                            NameComponent ->
                            Cascade ->
                            T_Statement
_sem_Statement_DropSchema ann_ name_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 163, column 28)
              _annOtpe =
                  ({-# LINE 163 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSchema _annIannotatedTree name_ cascade_
                   {-# LINE 21455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSchema _annIoriginalTree name_ cascade_
                   {-# LINE 21461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateFunction :: T_Annotation ->
                                T_Name ->
                                T_ParamDefList ->
                                T_TypeName ->
                                Replace ->
                                Language ->
                                T_FnBody ->
                                Volatility ->
                                T_Statement
_sem_Statement_CreateFunction ann_ name_ params_ rettype_ rep_ lang_ body_ vol_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _paramsOcat :: Catalog
              _paramsOflags :: TypeCheckFlags
              _paramsOimCast :: (Maybe TypeExtra)
              _rettypeOcat :: Catalog
              _rettypeOflags :: TypeCheckFlags
              _rettypeOimCast :: (Maybe TypeExtra)
              _bodyOcat :: Catalog
              _bodyOflags :: TypeCheckFlags
              _bodyOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _paramsIannotatedTree :: ParamDefList
              _paramsIoriginalTree :: ParamDefList
              _rettypeIannotatedTree :: TypeName
              _rettypeInamedType :: (Maybe TypeExtra)
              _rettypeIoriginalTree :: TypeName
              _bodyIannotatedTree :: FnBody
              _bodyIoriginalTree :: FnBody
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 133, column 32)
              _annOtpe =
                  ({-# LINE 133 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 134, column 32)
              _nameOtpe =
                  ({-# LINE 134 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateFunction _annIannotatedTree _nameIannotatedTree _paramsIannotatedTree _rettypeIannotatedTree rep_ lang_ _bodyIannotatedTree vol_
                   {-# LINE 21555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateFunction _annIoriginalTree _nameIoriginalTree _paramsIoriginalTree _rettypeIoriginalTree rep_ lang_ _bodyIoriginalTree vol_
                   {-# LINE 21561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _paramsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _paramsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _paramsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _rettypeOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _rettypeOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _rettypeOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _bodyOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21651 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _bodyOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21657 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _bodyOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _paramsIannotatedTree,_paramsIoriginalTree) =
                  params_ _paramsOcat _paramsOflags _paramsOimCast
              ( _rettypeIannotatedTree,_rettypeInamedType,_rettypeIoriginalTree) =
                  rettype_ _rettypeOcat _rettypeOflags _rettypeOimCast
              ( _bodyIannotatedTree,_bodyIoriginalTree) =
                  body_ _bodyOcat _bodyOflags _bodyOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateDomain :: T_Annotation ->
                              T_Name ->
                              T_TypeName ->
                              String ->
                              T_MaybeBoolExpr ->
                              T_Statement
_sem_Statement_CreateDomain ann_ name_ typ_ constraintName_ check_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _checkOdownEnv :: Environment
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckFlags
              _nameOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _checkOcat :: Catalog
              _checkOflags :: TypeCheckFlags
              _checkOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              _checkIannotatedTree :: MaybeBoolExpr
              _checkIoriginalTree :: MaybeBoolExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 130, column 30)
              _annOtpe =
                  ({-# LINE 130 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 131, column 30)
              _checkOdownEnv =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 21722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 132, column 30)
              _nameOtpe =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDomain _annIannotatedTree _nameIannotatedTree _typIannotatedTree constraintName_ _checkIannotatedTree
                   {-# LINE 21734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDomain _annIoriginalTree _nameIoriginalTree _typIoriginalTree constraintName_ _checkIoriginalTree
                   {-# LINE 21740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _checkOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _checkOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _checkOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
              ( _checkIannotatedTree,_checkIoriginalTree) =
                  check_ _checkOcat _checkOdownEnv _checkOflags _checkOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateLanguage :: T_Annotation ->
                                String ->
                                T_Statement
_sem_Statement_CreateLanguage ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 136, column 32)
              _annOtpe =
                  ({-# LINE 136 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLanguage _annIannotatedTree name_
                   {-# LINE 21860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLanguage _annIoriginalTree name_
                   {-# LINE 21866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateTrigger :: T_Annotation ->
                               NameComponent ->
                               TriggerWhen ->
                               ([TriggerEvent]) ->
                               T_Name ->
                               TriggerFire ->
                               T_Name ->
                               T_ScalarExprList ->
                               T_Statement
_sem_Statement_CreateTrigger ann_ name_ wh_ events_ tbl_ firing_ fnName_ fnArgs_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _fnArgsOdownEnv :: Environment
              _fnArgsOexpectedCast :: Bool
              _fnArgsOexpectedTypes :: ([TypeExtra])
              _fnNameOtpe :: (Either [TypeError] TypeExtra)
              _tblOtpe :: (Either [TypeError] TypeExtra)
              _fnArgsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckFlags
              _tblOimCast :: (Maybe TypeExtra)
              _fnNameOcat :: Catalog
              _fnNameOflags :: TypeCheckFlags
              _fnNameOimCast :: (Maybe TypeExtra)
              _fnArgsOcat :: Catalog
              _fnArgsOflags :: TypeCheckFlags
              _fnArgsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tblIannotatedTree :: Name
              _tblIoriginalTree :: Name
              _fnNameIannotatedTree :: Name
              _fnNameIoriginalTree :: Name
              _fnArgsIannotatedTree :: ScalarExprList
              _fnArgsIoriginalTree :: ScalarExprList
              _fnArgsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 147, column 31)
              _annOtpe =
                  ({-# LINE 147 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 148, column 31)
              _fnArgsOdownEnv =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 21954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 149, column 31)
              _fnArgsOexpectedCast =
                  ({-# LINE 149 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 21960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 150, column 31)
              _fnArgsOexpectedTypes =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 21966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 151, column 31)
              _fnNameOtpe =
                  ({-# LINE 151 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 152, column 31)
              _tblOtpe =
                  ({-# LINE 152 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 825, column 31)
              _fnArgsOassignmentCastContext =
                  ({-# LINE 825 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 21984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTrigger _annIannotatedTree name_ wh_ events_ _tblIannotatedTree firing_ _fnNameIannotatedTree _fnArgsIannotatedTree
                   {-# LINE 21990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTrigger _annIoriginalTree name_ wh_ events_ _tblIoriginalTree firing_ _fnNameIoriginalTree _fnArgsIoriginalTree
                   {-# LINE 21996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnArgsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnArgsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnArgsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe
              ( _fnNameIannotatedTree,_fnNameIoriginalTree) =
                  fnName_ _fnNameOcat _fnNameOflags _fnNameOimCast _fnNameOtpe
              ( _fnArgsIannotatedTree,_fnArgsIoriginalTree,_fnArgsIupTypes) =
                  fnArgs_ _fnArgsOassignmentCastContext _fnArgsOcat _fnArgsOdownEnv _fnArgsOexpectedCast _fnArgsOexpectedTypes _fnArgsOflags _fnArgsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropFunction :: T_Annotation ->
                              IfExists ->
                              T_NameTypeNameListPairList ->
                              Cascade ->
                              T_Statement
_sem_Statement_DropFunction ann_ ifE_ sigs_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _sigsOcat :: Catalog
              _sigsOflags :: TypeCheckFlags
              _sigsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _sigsIannotatedTree :: NameTypeNameListPairList
              _sigsIoriginalTree :: NameTypeNameListPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 162, column 30)
              _annOtpe =
                  ({-# LINE 162 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropFunction _annIannotatedTree ifE_ _sigsIannotatedTree cascade_
                   {-# LINE 22123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropFunction _annIoriginalTree ifE_ _sigsIoriginalTree cascade_
                   {-# LINE 22129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _sigsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _sigsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _sigsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _sigsIannotatedTree,_sigsIoriginalTree) =
                  sigs_ _sigsOcat _sigsOflags _sigsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropSomething :: T_Annotation ->
                               DropType ->
                               IfExists ->
                               ([Name]) ->
                               Cascade ->
                               T_Statement
_sem_Statement_DropSomething ann_ dropType_ ifE_ names_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 22206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSomething _annIannotatedTree dropType_ ifE_ names_ cascade_
                   {-# LINE 22212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSomething _annIoriginalTree dropType_ ifE_ names_ cascade_
                   {-# LINE 22218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropTrigger :: T_Annotation ->
                             IfExists ->
                             NameComponent ->
                             T_Name ->
                             Cascade ->
                             T_Statement
_sem_Statement_DropTrigger ann_ ifE_ name_ tbl_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tblOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckFlags
              _tblOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tblIannotatedTree :: Name
              _tblIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 164, column 29)
              _tblOtpe =
                  ({-# LINE 164 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 22287 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropTrigger _annIannotatedTree ifE_ name_ _tblIannotatedTree cascade_
                   {-# LINE 22293 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropTrigger _annIoriginalTree ifE_ name_ _tblIoriginalTree cascade_
                   {-# LINE 22299 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22305 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22311 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22317 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateDatabase :: T_Annotation ->
                                T_Name ->
                                T_Statement
_sem_Statement_CreateDatabase ann_ nm_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nmOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _nmOcat :: Catalog
              _nmOflags :: TypeCheckFlags
              _nmOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nmIannotatedTree :: Name
              _nmIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 128, column 32)
              _annOtpe =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 129, column 32)
              _nmOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDatabase _annIannotatedTree _nmIannotatedTree
                   {-# LINE 22391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDatabase _annIoriginalTree _nmIoriginalTree
                   {-# LINE 22397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nmOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nmOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nmOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nmIannotatedTree,_nmIoriginalTree) =
                  nm_ _nmOcat _nmOflags _nmOimCast _nmOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Set :: T_Annotation ->
                     String ->
                     ([SetValue]) ->
                     T_Statement
_sem_Statement_Set ann_ name_ values_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 209, column 21)
              _annOtpe =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Set _annIannotatedTree name_ values_
                   {-# LINE 22478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Set _annIoriginalTree name_ values_
                   {-# LINE 22484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Notify :: T_Annotation ->
                        String ->
                        T_Statement
_sem_Statement_Notify ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 187, column 24)
              _annOtpe =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Notify _annIannotatedTree name_
                   {-# LINE 22544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Notify _annIoriginalTree name_
                   {-# LINE 22550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Into :: T_Annotation ->
                      Bool ->
                      ([Name]) ->
                      T_Statement ->
                      T_Statement
_sem_Statement_Into ann_ strict_ into_ stmt_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _stmtOcat :: Catalog
              _stmtOflags :: TypeCheckFlags
              _stmtOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _stmtIannotatedTree :: Statement
              _stmtIoriginalTree :: Statement
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 22611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Into _annIannotatedTree strict_ into_ _stmtIannotatedTree
                   {-# LINE 22617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Into _annIoriginalTree strict_ into_ _stmtIoriginalTree
                   {-# LINE 22623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22653 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stmtOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stmtOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stmtOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _stmtIannotatedTree,_stmtIoriginalTree) =
                  stmt_ _stmtOcat _stmtOflags _stmtOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Assignment :: T_Annotation ->
                            T_Name ->
                            T_ScalarExpr ->
                            T_Statement
_sem_Statement_Assignment ann_ target_ value_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _valueOexpectedCast :: Bool
              _valueOexpectedType :: (Maybe TypeExtra)
              _valueOodbcFunction :: Bool
              _annOtpe :: (Either [TypeError] TypeExtra)
              _targetOtpe :: (Either [TypeError] TypeExtra)
              _valueOdownEnv :: Environment
              _valueOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _targetOcat :: Catalog
              _targetOflags :: TypeCheckFlags
              _targetOimCast :: (Maybe TypeExtra)
              _valueOcat :: Catalog
              _valueOflags :: TypeCheckFlags
              _valueOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _targetIannotatedTree :: Name
              _targetIoriginalTree :: Name
              _valueIannotatedTree :: ScalarExpr
              _valueIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _valueIoriginalTree :: ScalarExpr
              _valueIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 115, column 28)
              _valueOexpectedCast =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 22716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 116, column 28)
              _valueOexpectedType =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 22722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 117, column 28)
              _valueOodbcFunction =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 22728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 22734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 26, column 5)
              _targetOtpe =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 22740 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 27, column 5)
              _valueOdownEnv =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 22746 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 822, column 28)
              _valueOassignmentCastContext =
                  ({-# LINE 822 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 22752 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Assignment _annIannotatedTree _targetIannotatedTree _valueIannotatedTree
                   {-# LINE 22758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Assignment _annIoriginalTree _targetIoriginalTree _valueIoriginalTree
                   {-# LINE 22764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _targetOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _targetOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _targetOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _targetIannotatedTree,_targetIoriginalTree) =
                  target_ _targetOcat _targetOflags _targetOimCast _targetOtpe
              ( _valueIannotatedTree,_valueIcolExprs,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOassignmentCastContext _valueOcat _valueOdownEnv _valueOexpectedCast _valueOexpectedType _valueOflags _valueOimCast _valueOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Return :: T_Annotation ->
                        T_MaybeScalarExpr ->
                        T_Statement
_sem_Statement_Return ann_ value_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _valueOdownEnv :: Environment
              _valueOexpectedCast :: Bool
              _valueOexpectedType :: (Maybe TypeExtra)
              _valueOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _valueOcat :: Catalog
              _valueOflags :: TypeCheckFlags
              _valueOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _valueIannotatedTree :: MaybeScalarExpr
              _valueIoriginalTree :: MaybeScalarExpr
              _valueIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 198, column 24)
              _annOtpe =
                  ({-# LINE 198 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 199, column 24)
              _valueOdownEnv =
                  ({-# LINE 199 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 22874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 200, column 24)
              _valueOexpectedCast =
                  ({-# LINE 200 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 22880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 201, column 24)
              _valueOexpectedType =
                  ({-# LINE 201 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 22886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 836, column 24)
              _valueOassignmentCastContext =
                  ({-# LINE 836 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 22892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Return _annIannotatedTree _valueIannotatedTree
                   {-# LINE 22898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Return _annIoriginalTree _valueIoriginalTree
                   {-# LINE 22904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _valueIannotatedTree,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOassignmentCastContext _valueOcat _valueOdownEnv _valueOexpectedCast _valueOexpectedType _valueOflags _valueOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ReturnNext :: T_Annotation ->
                            T_ScalarExpr ->
                            T_Statement
_sem_Statement_ReturnNext ann_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 202, column 28)
              _annOtpe =
                  ({-# LINE 202 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 203, column 28)
              _exprOdownEnv =
                  ({-# LINE 203 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 22996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 204, column 28)
              _exprOexpectedCast =
                  ({-# LINE 204 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 205, column 28)
              _exprOexpectedType =
                  ({-# LINE 205 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 206, column 28)
              _exprOodbcFunction =
                  ({-# LINE 206 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 837, column 28)
              _exprOassignmentCastContext =
                  ({-# LINE 837 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnNext _annIannotatedTree _exprIannotatedTree
                   {-# LINE 23026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnNext _annIoriginalTree _exprIoriginalTree
                   {-# LINE 23032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ReturnQuery :: T_Annotation ->
                             T_QueryExpr ->
                             T_Statement
_sem_Statement_ReturnQuery ann_ sel_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _selOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 207, column 29)
              _annOtpe =
                  ({-# LINE 207 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 208, column 29)
              _selOouterDownEnv =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 22, column 5)
              _selOexpectedType =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 23127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 838, column 29)
              _selOassignmentCastContext =
                  ({-# LINE 838 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnQuery _annIannotatedTree _selIannotatedTree
                   {-# LINE 23139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnQuery _annIoriginalTree _selIoriginalTree
                   {-# LINE 23145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Raise :: T_Annotation ->
                       RaiseType ->
                       String ->
                       T_ScalarExprList ->
                       T_Statement
_sem_Statement_Raise ann_ level_ message_ args_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _argsOdownEnv :: Environment
              _argsOexpectedCast :: Bool
              _argsOexpectedTypes :: ([TypeExtra])
              _argsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _argsOcat :: Catalog
              _argsOflags :: TypeCheckFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 194, column 23)
              _annOtpe =
                  ({-# LINE 194 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 195, column 23)
              _argsOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 196, column 23)
              _argsOexpectedCast =
                  ({-# LINE 196 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 197, column 23)
              _argsOexpectedTypes =
                  ({-# LINE 197 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 23249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 835, column 23)
              _argsOassignmentCastContext =
                  ({-# LINE 835 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Raise _annIannotatedTree level_ message_ _argsIannotatedTree
                   {-# LINE 23261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Raise _annIoriginalTree level_ message_ _argsIoriginalTree
                   {-# LINE 23267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_NullStatement :: T_Annotation ->
                               T_Statement
_sem_Statement_NullStatement ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 188, column 31)
              _annOtpe =
                  ({-# LINE 188 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullStatement _annIannotatedTree
                   {-# LINE 23346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullStatement _annIoriginalTree
                   {-# LINE 23352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Perform :: T_Annotation ->
                         T_ScalarExpr ->
                         T_Statement
_sem_Statement_Perform ann_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 189, column 25)
              _annOtpe =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 190, column 25)
              _exprOdownEnv =
                  ({-# LINE 190 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 191, column 25)
              _exprOexpectedCast =
                  ({-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 192, column 25)
              _exprOexpectedType =
                  ({-# LINE 192 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 193, column 25)
              _exprOodbcFunction =
                  ({-# LINE 193 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 833, column 25)
              _exprOassignmentCastContext =
                  ({-# LINE 833 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Perform _annIannotatedTree _exprIannotatedTree
                   {-# LINE 23454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Perform _annIoriginalTree _exprIoriginalTree
                   {-# LINE 23460 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Execute :: T_Annotation ->
                         T_ScalarExpr ->
                         T_Statement
_sem_Statement_Execute ann_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 169, column 25)
              _annOtpe =
                  ({-# LINE 169 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 170, column 25)
              _exprOdownEnv =
                  ({-# LINE 170 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 171, column 25)
              _exprOexpectedCast =
                  ({-# LINE 171 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 172, column 25)
              _exprOexpectedType =
                  ({-# LINE 172 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 173, column 25)
              _exprOodbcFunction =
                  ({-# LINE 173 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 828, column 25)
              _exprOassignmentCastContext =
                  ({-# LINE 828 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Execute _annIannotatedTree _exprIannotatedTree
                   {-# LINE 23582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Execute _annIoriginalTree _exprIoriginalTree
                   {-# LINE 23588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ForQueryStatement :: T_Annotation ->
                                   (Maybe String) ->
                                   NameComponent ->
                                   T_QueryExpr ->
                                   T_StatementList ->
                                   T_Statement
_sem_Statement_ForQueryStatement ann_ lb_ var_ sel_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _selOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckFlags
              _selOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 184, column 35)
              _annOtpe =
                  ({-# LINE 184 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 185, column 35)
              _selOouterDownEnv =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 22, column 5)
              _selOexpectedType =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 23691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 831, column 35)
              _selOassignmentCastContext =
                  ({-# LINE 831 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForQueryStatement _annIannotatedTree lb_ var_ _selIannotatedTree _stsIannotatedTree
                   {-# LINE 23703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForQueryStatement _annIoriginalTree lb_ var_ _selIoriginalTree _stsIoriginalTree
                   {-# LINE 23709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ForIntegerStatement :: T_Annotation ->
                                     (Maybe String) ->
                                     NameComponent ->
                                     T_ScalarExpr ->
                                     T_ScalarExpr ->
                                     T_StatementList ->
                                     T_Statement
_sem_Statement_ForIntegerStatement ann_ lb_ var_ from_ to_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _fromOdownEnv :: Environment
              _fromOexpectedCast :: Bool
              _fromOexpectedType :: (Maybe TypeExtra)
              _fromOodbcFunction :: Bool
              _toOdownEnv :: Environment
              _toOexpectedCast :: Bool
              _toOexpectedType :: (Maybe TypeExtra)
              _toOodbcFunction :: Bool
              _fromOassignmentCastContext :: Bool
              _toOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _fromOcat :: Catalog
              _fromOflags :: TypeCheckFlags
              _fromOimCast :: (Maybe TypeExtra)
              _toOcat :: Catalog
              _toOflags :: TypeCheckFlags
              _toOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fromIannotatedTree :: ScalarExpr
              _fromIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fromIoriginalTree :: ScalarExpr
              _fromIupType :: (Maybe TypeExtra)
              _toIannotatedTree :: ScalarExpr
              _toIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _toIoriginalTree :: ScalarExpr
              _toIupType :: (Maybe TypeExtra)
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 175, column 37)
              _annOtpe =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 176, column 37)
              _fromOdownEnv =
                  ({-# LINE 176 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 177, column 37)
              _fromOexpectedCast =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 178, column 37)
              _fromOexpectedType =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 179, column 37)
              _fromOodbcFunction =
                  ({-# LINE 179 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 180, column 37)
              _toOdownEnv =
                  ({-# LINE 180 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 181, column 37)
              _toOexpectedCast =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 182, column 37)
              _toOexpectedType =
                  ({-# LINE 182 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 183, column 37)
              _toOodbcFunction =
                  ({-# LINE 183 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 829, column 37)
              _fromOassignmentCastContext =
                  ({-# LINE 829 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 830, column 37)
              _toOassignmentCastContext =
                  ({-# LINE 830 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForIntegerStatement _annIannotatedTree lb_ var_ _fromIannotatedTree _toIannotatedTree _stsIannotatedTree
                   {-# LINE 23902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForIntegerStatement _annIoriginalTree lb_ var_ _fromIoriginalTree _toIoriginalTree _stsIoriginalTree
                   {-# LINE 23908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23944 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23950 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23956 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _toOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23962 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _toOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23968 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _toOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23974 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23980 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23986 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23992 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fromIannotatedTree,_fromIcolExprs,_fromIoriginalTree,_fromIupType) =
                  from_ _fromOassignmentCastContext _fromOcat _fromOdownEnv _fromOexpectedCast _fromOexpectedType _fromOflags _fromOimCast _fromOodbcFunction
              ( _toIannotatedTree,_toIcolExprs,_toIoriginalTree,_toIupType) =
                  to_ _toOassignmentCastContext _toOcat _toOdownEnv _toOexpectedCast _toOexpectedType _toOflags _toOimCast _toOodbcFunction
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_LoopStatement :: T_Annotation ->
                               (Maybe String) ->
                               T_StatementList ->
                               T_Statement
_sem_Statement_LoopStatement ann_ lb_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 186, column 31)
              _annOtpe =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LoopStatement _annIannotatedTree lb_ _stsIannotatedTree
                   {-# LINE 24034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LoopStatement _annIoriginalTree lb_ _stsIoriginalTree
                   {-# LINE 24040 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24046 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_WhileStatement :: T_Annotation ->
                                (Maybe String) ->
                                T_ScalarExpr ->
                                T_StatementList ->
                                T_Statement
_sem_Statement_WhileStatement ann_ lb_ expr_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckFlags
              _exprOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 212, column 32)
              _annOtpe =
                  ({-# LINE 212 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 213, column 32)
              _exprOdownEnv =
                  ({-# LINE 213 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 214, column 32)
              _exprOexpectedCast =
                  ({-# LINE 214 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 215, column 32)
              _exprOexpectedType =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 216, column 32)
              _exprOodbcFunction =
                  ({-# LINE 216 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 839, column 32)
              _exprOassignmentCastContext =
                  ({-# LINE 839 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WhileStatement _annIannotatedTree lb_ _exprIannotatedTree _stsIannotatedTree
                   {-# LINE 24169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WhileStatement _annIoriginalTree lb_ _exprIoriginalTree _stsIoriginalTree
                   {-# LINE 24175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ContinueStatement :: T_Annotation ->
                                   (Maybe String) ->
                                   T_Statement
_sem_Statement_ContinueStatement ann_ lb_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 125, column 35)
              _annOtpe =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24269 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ContinueStatement _annIannotatedTree lb_
                   {-# LINE 24275 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ContinueStatement _annIoriginalTree lb_
                   {-# LINE 24281 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24287 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24293 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24299 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24305 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24311 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ExitStatement :: T_Annotation ->
                               (Maybe String) ->
                               T_Statement
_sem_Statement_ExitStatement ann_ lb_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 174, column 31)
              _annOtpe =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExitStatement _annIannotatedTree lb_
                   {-# LINE 24341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExitStatement _annIoriginalTree lb_
                   {-# LINE 24347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CaseStatementSimple :: T_Annotation ->
                                     T_ScalarExpr ->
                                     T_ScalarExprListStatementListTripleList ->
                                     T_StatementList ->
                                     T_Statement
_sem_Statement_CaseStatementSimple ann_ val_ cases_ els_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _valOdownEnv :: Environment
              _valOexpectedCast :: Bool
              _valOexpectedType :: (Maybe TypeExtra)
              _valOodbcFunction :: Bool
              _valOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _valOcat :: Catalog
              _valOflags :: TypeCheckFlags
              _valOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _valIannotatedTree :: ScalarExpr
              _valIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _valIoriginalTree :: ScalarExpr
              _valIupType :: (Maybe TypeExtra)
              _casesIannotatedTree :: ScalarExprListStatementListTripleList
              _casesIoriginalTree :: ScalarExprListStatementListTripleList
              _elsIannotatedTree :: StatementList
              _elsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 120, column 37)
              _annOtpe =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 121, column 37)
              _valOdownEnv =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 122, column 37)
              _valOexpectedCast =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 123, column 37)
              _valOexpectedType =
                  ({-# LINE 123 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 124, column 37)
              _valOodbcFunction =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 823, column 37)
              _valOassignmentCastContext =
                  ({-# LINE 823 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatementSimple _annIannotatedTree _valIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 24461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatementSimple _annIoriginalTree _valIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 24467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _valIannotatedTree,_valIcolExprs,_valIoriginalTree,_valIupType) =
                  val_ _valOassignmentCastContext _valOcat _valOdownEnv _valOexpectedCast _valOexpectedType _valOflags _valOimCast _valOodbcFunction
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CaseStatement :: T_Annotation ->
                               T_ScalarExprListStatementListTripleList ->
                               T_StatementList ->
                               T_Statement
_sem_Statement_CaseStatement ann_ cases_ els_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _casesIannotatedTree :: ScalarExprListStatementListTripleList
              _casesIoriginalTree :: ScalarExprListStatementListTripleList
              _elsIannotatedTree :: StatementList
              _elsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 119, column 31)
              _annOtpe =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatement _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 24598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatement _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 24604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_If :: T_Annotation ->
                    T_ScalarExprStatementListPairList ->
                    T_StatementList ->
                    T_Statement
_sem_Statement_If ann_ cases_ els_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _casesIannotatedTree :: ScalarExprStatementListPairList
              _casesIoriginalTree :: ScalarExprStatementListPairList
              _elsIannotatedTree :: StatementList
              _elsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 24709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   If _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 24715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   If _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 24721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24769 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Block :: T_Annotation ->
                       (Maybe String) ->
                       T_VarDefList ->
                       T_StatementList ->
                       T_Statement
_sem_Statement_Block ann_ lb_ vars_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _varsOcat :: Catalog
              _varsOflags :: TypeCheckFlags
              _varsOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _varsIannotatedTree :: VarDefList
              _varsIoriginalTree :: VarDefList
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 118, column 23)
              _annOtpe =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Block _annIannotatedTree lb_ _varsIannotatedTree _stsIannotatedTree
                   {-# LINE 24833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Block _annIoriginalTree lb_ _varsIoriginalTree _stsIoriginalTree
                   {-# LINE 24839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _varsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _varsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _varsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _varsIannotatedTree,_varsIoriginalTree) =
                  vars_ _varsOcat _varsOflags _varsOimCast
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AntiStatement :: String ->
                               T_Statement
_sem_Statement_AntiStatement string_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiStatement string_
                   {-# LINE 24926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiStatement string_
                   {-# LINE 24932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24944 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DeclareStatement :: T_Annotation ->
                                  ([(String,TypeName,Maybe ScalarExpr)]) ->
                                  T_Statement
_sem_Statement_DeclareStatement ann_ ds_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 24966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DeclareStatement _annIannotatedTree ds_
                   {-# LINE 24972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DeclareStatement _annIoriginalTree ds_
                   {-# LINE 24978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ExecStatement :: T_Annotation ->
                               T_Name ->
                               T_ScalarExprList ->
                               T_Statement
_sem_Statement_ExecStatement ann_ spName_ args_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _argsOdownEnv :: Environment
              _argsOexpectedCast :: Bool
              _argsOexpectedTypes :: ([TypeExtra])
              _spNameOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _argsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _spNameOcat :: Catalog
              _spNameOflags :: TypeCheckFlags
              _spNameOimCast :: (Maybe TypeExtra)
              _argsOcat :: Catalog
              _argsOflags :: TypeCheckFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _spNameIannotatedTree :: Name
              _spNameIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 165, column 31)
              _argsOdownEnv =
                  ({-# LINE 165 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 25049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 166, column 31)
              _argsOexpectedCast =
                  ({-# LINE 166 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 167, column 31)
              _argsOexpectedTypes =
                  ({-# LINE 167 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 25061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 168, column 31)
              _spNameOtpe =
                  ({-# LINE 168 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 25073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 827, column 31)
              _argsOassignmentCastContext =
                  ({-# LINE 827 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 25079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExecStatement _annIannotatedTree _spNameIannotatedTree _argsIannotatedTree
                   {-# LINE 25085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExecStatement _annIoriginalTree _spNameIoriginalTree _argsIoriginalTree
                   {-# LINE 25091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _spNameOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _spNameOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _spNameOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _spNameIannotatedTree,_spNameIoriginalTree) =
                  spName_ _spNameOcat _spNameOflags _spNameOimCast _spNameOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateIndexTSQL :: T_Annotation ->
                                 NameComponent ->
                                 T_Name ->
                                 ([NameComponent]) ->
                                 T_Statement
_sem_Statement_CreateIndexTSQL ann_ nm_ obj_ cols_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _objOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _objOcat :: Catalog
              _objOflags :: TypeCheckFlags
              _objOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _objIannotatedTree :: Name
              _objIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 135, column 33)
              _objOtpe =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 25199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateIndexTSQL _annIannotatedTree nm_ _objIannotatedTree cols_
                   {-# LINE 25205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateIndexTSQL _annIoriginalTree nm_ _objIoriginalTree cols_
                   {-# LINE 25211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _objOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _objOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _objOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _objIannotatedTree,_objIoriginalTree) =
                  obj_ _objOcat _objOflags _objOimCast _objOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- StatementList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : StatementList 
         originalTree         : StatementList 
   alternatives:
      alternative Cons:
         child hd             : Statement 
         child tl             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type StatementList = [Statement]
-- cata
_sem_StatementList :: StatementList ->
                     T_StatementList
_sem_StatementList list =
    (Prelude.foldr _sem_StatementList_Cons _sem_StatementList_Nil (Prelude.map _sem_Statement list))
-- semantic domain
type T_StatementList = Catalog ->
                       TypeCheckFlags ->
                       (Maybe TypeExtra) ->
                       ( StatementList,StatementList)
data Inh_StatementList = Inh_StatementList {_cat_Inh_StatementList :: Catalog,_flags_Inh_StatementList :: TypeCheckFlags,_imCast_Inh_StatementList :: (Maybe TypeExtra)}
data Syn_StatementList = Syn_StatementList {_annotatedTree_Syn_StatementList :: StatementList,_originalTree_Syn_StatementList :: StatementList}
_wrap_StatementList :: T_StatementList ->
                      Inh_StatementList ->
                      Syn_StatementList
_wrap_StatementList sem (Inh_StatementList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_StatementList _lhsOannotatedTree _lhsOoriginalTree))
_sem_StatementList_Cons :: T_Statement ->
                          T_StatementList ->
                          T_StatementList
_sem_StatementList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: StatementList
              _lhsOoriginalTree :: StatementList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: Statement
              _hdIoriginalTree :: Statement
              _tlIannotatedTree :: StatementList
              _tlIoriginalTree :: StatementList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 25330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 25336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_StatementList_Nil :: T_StatementList
_sem_StatementList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: StatementList
              _lhsOoriginalTree :: StatementList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 25402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 25408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TablePartitionDef -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TablePartitionDef 
         originalTree         : TablePartitionDef 
   alternatives:
      alternative TablePartitionDef:
         child ann            : Annotation 
         child colname        : {NameComponent}
         child interval       : {Integer}
         child timeframe      : {TablePartitionDateTimeInterval}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data TablePartitionDef = TablePartitionDef (Annotation) (NameComponent) (Integer) (TablePartitionDateTimeInterval)
                       deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TablePartitionDef :: TablePartitionDef ->
                         T_TablePartitionDef
_sem_TablePartitionDef (TablePartitionDef _ann _colname _interval _timeframe) =
    (_sem_TablePartitionDef_TablePartitionDef (_sem_Annotation _ann) _colname _interval _timeframe)
-- semantic domain
type T_TablePartitionDef = Catalog ->
                           TypeCheckFlags ->
                           (Maybe TypeExtra) ->
                           ( TablePartitionDef,TablePartitionDef)
data Inh_TablePartitionDef = Inh_TablePartitionDef {_cat_Inh_TablePartitionDef :: Catalog,_flags_Inh_TablePartitionDef :: TypeCheckFlags,_imCast_Inh_TablePartitionDef :: (Maybe TypeExtra)}
data Syn_TablePartitionDef = Syn_TablePartitionDef {_annotatedTree_Syn_TablePartitionDef :: TablePartitionDef,_originalTree_Syn_TablePartitionDef :: TablePartitionDef}
_wrap_TablePartitionDef :: T_TablePartitionDef ->
                          Inh_TablePartitionDef ->
                          Syn_TablePartitionDef
_wrap_TablePartitionDef sem (Inh_TablePartitionDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TablePartitionDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_TablePartitionDef_TablePartitionDef :: T_Annotation ->
                                           NameComponent ->
                                           Integer ->
                                           TablePartitionDateTimeInterval ->
                                           T_TablePartitionDef
_sem_TablePartitionDef_TablePartitionDef ann_ colname_ interval_ timeframe_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TablePartitionDef
              _lhsOoriginalTree :: TablePartitionDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 217, column 43)
              _annOtpe =
                  ({-# LINE 217 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TablePartitionDef _annIannotatedTree colname_ interval_ timeframe_
                   {-# LINE 25490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TablePartitionDef _annIoriginalTree colname_ interval_ timeframe_
                   {-# LINE 25496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TableRef ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TableRef 
         originalTree         : TableRef 
         upEnv                : Environment
   alternatives:
      alternative Tref:
         child ann            : Annotation 
         child tbl            : Name 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative FunTref:
         child ann            : Annotation 
         child fn             : ScalarExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative SubTref:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative JoinTref:
         child ann            : Annotation 
         child tref0          : TableRef 
         child nat            : {Natural}
         child joinType       : {JoinType}
         child joinHint       : {Maybe JoinHint}
         child tref1          : TableRef 
         child onExpr         : OnExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative TableAlias:
         child ann            : Annotation 
         child tb             : {NameComponent}
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local annotatedTree : _
            local originalTree : _
      alternative FullAlias:
         child ann            : Annotation 
         child tb             : {NameComponent}
         child cols           : {[NameComponent]}
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local annotatedTree : _
            local originalTree : _
      alternative TableRefParens:
         child ann            : Annotation 
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative OdbcTableRef:
         child ann            : Annotation 
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
-}
data TableRef = Tref (Annotation) (Name)
              | FunTref (Annotation) (ScalarExpr)
              | SubTref (Annotation) (QueryExpr)
              | JoinTref (Annotation) (TableRef) (Natural) (JoinType) ((Maybe JoinHint)) (TableRef) (OnExpr)
              | TableAlias (Annotation) (NameComponent) (TableRef)
              | FullAlias (Annotation) (NameComponent) (([NameComponent])) (TableRef)
              | TableRefParens (Annotation) (TableRef)
              | OdbcTableRef (Annotation) (TableRef)
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TableRef :: TableRef ->
                T_TableRef
_sem_TableRef (Tref _ann _tbl) =
    (_sem_TableRef_Tref (_sem_Annotation _ann) (_sem_Name _tbl))
_sem_TableRef (FunTref _ann _fn) =
    (_sem_TableRef_FunTref (_sem_Annotation _ann) (_sem_ScalarExpr _fn))
_sem_TableRef (SubTref _ann _sel) =
    (_sem_TableRef_SubTref (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_TableRef (JoinTref _ann _tref0 _nat _joinType _joinHint _tref1 _onExpr) =
    (_sem_TableRef_JoinTref (_sem_Annotation _ann) (_sem_TableRef _tref0) _nat _joinType _joinHint (_sem_TableRef _tref1) (_sem_OnExpr _onExpr))
_sem_TableRef (TableAlias _ann _tb _tref) =
    (_sem_TableRef_TableAlias (_sem_Annotation _ann) _tb (_sem_TableRef _tref))
_sem_TableRef (FullAlias _ann _tb _cols _tref) =
    (_sem_TableRef_FullAlias (_sem_Annotation _ann) _tb _cols (_sem_TableRef _tref))
_sem_TableRef (TableRefParens _ann _tref) =
    (_sem_TableRef_TableRefParens (_sem_Annotation _ann) (_sem_TableRef _tref))
_sem_TableRef (OdbcTableRef _ann _tref) =
    (_sem_TableRef_OdbcTableRef (_sem_Annotation _ann) (_sem_TableRef _tref))
-- semantic domain
type T_TableRef = Catalog ->
                  TypeCheckFlags ->
                  (Maybe TypeExtra) ->
                  ( TableRef,TableRef,Environment)
data Inh_TableRef = Inh_TableRef {_cat_Inh_TableRef :: Catalog,_flags_Inh_TableRef :: TypeCheckFlags,_imCast_Inh_TableRef :: (Maybe TypeExtra)}
data Syn_TableRef = Syn_TableRef {_annotatedTree_Syn_TableRef :: TableRef,_originalTree_Syn_TableRef :: TableRef,_upEnv_Syn_TableRef :: Environment}
_wrap_TableRef :: T_TableRef ->
                 Inh_TableRef ->
                 Syn_TableRef
_wrap_TableRef sem (Inh_TableRef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TableRef _lhsOannotatedTree _lhsOoriginalTree _lhsOupEnv))
_sem_TableRef_Tref :: T_Annotation ->
                     T_Name ->
                     T_TableRef
_sem_TableRef_Tref ann_ tbl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _tblOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckFlags
              _tblOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tblIannotatedTree :: Name
              _tblIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 25683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 25689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 42, column 7)
              _eEnv =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   E.envCreateTrefEnvironment _lhsIcat (nameComponents _tblIoriginalTree)
                   {-# LINE 25695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 43, column 7)
              _tblOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Left []
                   {-# LINE 25701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 25714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 150, column 7)
              _newAlias =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     ((_,n),cs,_) <- either (const Nothing) Just
                                   $ catLookupTableAndAttrs _lhsIcat
                                   (nameComponents _tblIoriginalTree)
                     return (T.unpack n, (map (T.unpack . fst) cs))
                   else Nothing
                   {-# LINE 25726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Tref _annIannotatedTree _tblIannotatedTree
                   {-# LINE 25732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Tref _annIoriginalTree _tblIoriginalTree
                   {-# LINE 25738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_FunTref :: T_Annotation ->
                        T_ScalarExpr ->
                        T_TableRef
_sem_TableRef_FunTref ann_ fn_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _fnOdownEnv :: Environment
              _fnOexpectedCast :: Bool
              _fnOexpectedType :: (Maybe TypeExtra)
              _fnOodbcFunction :: Bool
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _fnOassignmentCastContext :: Bool
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _fnOcat :: Catalog
              _fnOflags :: TypeCheckFlags
              _fnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fnIannotatedTree :: ScalarExpr
              _fnIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr
              _fnIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 218, column 24)
              _fnOdownEnv =
                  ({-# LINE 218 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 25820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 219, column 24)
              _fnOexpectedCast =
                  ({-# LINE 219 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 220, column 24)
              _fnOexpectedType =
                  ({-# LINE 220 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 25832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 221, column 24)
              _fnOodbcFunction =
                  ({-# LINE 221 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 25845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 25851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _eEnv =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Left []
                   {-# LINE 25857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 25870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 25885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 840, column 24)
              _fnOassignmentCastContext =
                  ({-# LINE 840 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 25891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FunTref _annIannotatedTree _fnIannotatedTree
                   {-# LINE 25897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FunTref _annIoriginalTree _fnIoriginalTree
                   {-# LINE 25903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOassignmentCastContext _fnOcat _fnOdownEnv _fnOexpectedCast _fnOexpectedType _fnOflags _fnOimCast _fnOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_SubTref :: T_Annotation ->
                        T_QueryExpr ->
                        T_TableRef
_sem_TableRef_SubTref ann_ sel_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: TableRef
              _selOouterDownEnv :: (Maybe Environment)
              _selOassignmentCastContext :: Bool
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 25983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 25989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 58, column 7)
              _eEnv =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   maybe (Left []) id
                   $ fmap E.envSelectListEnvironment _selIupType
                   {-# LINE 25996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 60, column 7)
              _selOexpectedType =
                  ({-# LINE 60 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 26002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 26030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 27, column 13)
              _selOouterDownEnv =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 26036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 841, column 24)
              _selOassignmentCastContext =
                  ({-# LINE 841 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 26042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SubTref _annIannotatedTree _selIannotatedTree
                   {-# LINE 26048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SubTref _annIoriginalTree _selIoriginalTree
                   {-# LINE 26054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26066 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26072 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_JoinTref :: T_Annotation ->
                         T_TableRef ->
                         Natural ->
                         JoinType ->
                         (Maybe JoinHint) ->
                         T_TableRef ->
                         T_OnExpr ->
                         T_TableRef
_sem_TableRef_JoinTref ann_ tref0_ nat_ joinType_ joinHint_ tref1_ onExpr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _onExprOdownEnv :: Environment
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tref0Ocat :: Catalog
              _tref0Oflags :: TypeCheckFlags
              _tref0OimCast :: (Maybe TypeExtra)
              _tref1Ocat :: Catalog
              _tref1Oflags :: TypeCheckFlags
              _tref1OimCast :: (Maybe TypeExtra)
              _onExprOcat :: Catalog
              _onExprOflags :: TypeCheckFlags
              _onExprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tref0IannotatedTree :: TableRef
              _tref0IoriginalTree :: TableRef
              _tref0IupEnv :: Environment
              _tref1IannotatedTree :: TableRef
              _tref1IoriginalTree :: TableRef
              _tref1IupEnv :: Environment
              _onExprIannotatedTree :: OnExpr
              _onExprIoriginalTree :: OnExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 46, column 7)
              _eEnv =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   E.createJoinTrefEnvironment _lhsIcat
                     _tref0IupEnv _tref1IupEnv (convertJoinType joinType_)
                     $ case (joinType_,_onExprIoriginalTree) of
                        (x,Nothing) | x /= Cross -> Nothing
                        (_,Just (JoinUsing _ nms)) -> Just nms
                        _ -> Just []
                   {-# LINE 26165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 56, column 7)
              _onExprOdownEnv =
                  ({-# LINE 56 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 26199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinTref _annIannotatedTree _tref0IannotatedTree nat_ joinType_ joinHint_ _tref1IannotatedTree _onExprIannotatedTree
                   {-# LINE 26205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinTref _annIoriginalTree _tref0IoriginalTree nat_ joinType_ joinHint_ _tref1IoriginalTree _onExprIoriginalTree
                   {-# LINE 26211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref0Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref0Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref0OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref1Ocat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref1Oflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref1OimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _onExprOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _onExprOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _onExprOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tref0IannotatedTree,_tref0IoriginalTree,_tref0IupEnv) =
                  tref0_ _tref0Ocat _tref0Oflags _tref0OimCast
              ( _tref1IannotatedTree,_tref1IoriginalTree,_tref1IupEnv) =
                  tref1_ _tref1Ocat _tref1Oflags _tref1OimCast
              ( _onExprIannotatedTree,_onExprIoriginalTree) =
                  onExpr_ _onExprOcat _onExprOdownEnv _onExprOflags _onExprOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_TableAlias :: T_Annotation ->
                           NameComponent ->
                           T_TableRef ->
                           T_TableRef
_sem_TableRef_TableAlias ann_ tb_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 68, column 7)
              _eEnv =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ E.createTrefAliasedEnvironment
                           (ncStrT tb_) Nothing _trefIupEnv
                   {-# LINE 26342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 124, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   case _trefIannotatedTree of
                     FullAlias _ _ c tr -> FullAlias emptyAnnotation tb_ c tr
                     TableAlias _ _ tr -> TableAlias emptyAnnotation tb_ tr
                     _ -> _annotatedTree
                   {-# LINE 26351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableAlias _annIannotatedTree tb_ _trefIannotatedTree
                   {-# LINE 26357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableAlias _annIoriginalTree tb_ _trefIoriginalTree
                   {-# LINE 26363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_FullAlias :: T_Annotation ->
                          NameComponent ->
                          ([NameComponent]) ->
                          T_TableRef ->
                          T_TableRef
_sem_TableRef_FullAlias ann_ tb_ cols_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 65, column 7)
              _eEnv =
                  ({-# LINE 65 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ E.createTrefAliasedEnvironment
                           (ncStrT tb_) (Just $ map ncStrT cols_) _trefIupEnv
                   {-# LINE 26455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 103, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 103 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   case _trefIannotatedTree of
                     FullAlias _ t _ tr -> FullAlias emptyAnnotation
                                             (if tb_ == Nmc "" then t else tb_) cols_                       tr
                     TableAlias _ _ tr -> FullAlias emptyAnnotation tb_ cols_                        tr
                     _ -> _annotatedTree
                   {-# LINE 26465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FullAlias _annIannotatedTree tb_ cols_ _trefIannotatedTree
                   {-# LINE 26471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FullAlias _annIoriginalTree tb_ cols_ _trefIoriginalTree
                   {-# LINE 26477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_TableRefParens :: T_Annotation ->
                               T_TableRef ->
                               T_TableRef
_sem_TableRef_TableRefParens ann_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 63, column 7)
              _eEnv =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ _trefIupEnv
                   {-# LINE 26566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 26594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableRefParens _annIannotatedTree _trefIannotatedTree
                   {-# LINE 26600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableRefParens _annIoriginalTree _trefIoriginalTree
                   {-# LINE 26606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_OdbcTableRef :: T_Annotation ->
                             T_TableRef ->
                             T_TableRef
_sem_TableRef_OdbcTableRef ann_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 63, column 7)
              _eEnv =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ _trefIupEnv
                   {-# LINE 26695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 26723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcTableRef _annIannotatedTree _trefIannotatedTree
                   {-# LINE 26729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcTableRef _annIoriginalTree _trefIoriginalTree
                   {-# LINE 26735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
-- TableRefList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TableRefList 
         originalTree         : TableRefList 
         upEnv                : Environment
   alternatives:
      alternative Cons:
         child hd             : TableRef 
         child tl             : TableRefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TableRefList = [TableRef]
-- cata
_sem_TableRefList :: TableRefList ->
                    T_TableRefList
_sem_TableRefList list =
    (Prelude.foldr _sem_TableRefList_Cons _sem_TableRefList_Nil (Prelude.map _sem_TableRef list))
-- semantic domain
type T_TableRefList = Catalog ->
                      TypeCheckFlags ->
                      (Maybe TypeExtra) ->
                      ( TableRefList,TableRefList,Environment)
data Inh_TableRefList = Inh_TableRefList {_cat_Inh_TableRefList :: Catalog,_flags_Inh_TableRefList :: TypeCheckFlags,_imCast_Inh_TableRefList :: (Maybe TypeExtra)}
data Syn_TableRefList = Syn_TableRefList {_annotatedTree_Syn_TableRefList :: TableRefList,_originalTree_Syn_TableRefList :: TableRefList,_upEnv_Syn_TableRefList :: Environment}
_wrap_TableRefList :: T_TableRefList ->
                     Inh_TableRefList ->
                     Syn_TableRefList
_wrap_TableRefList sem (Inh_TableRefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TableRefList _lhsOannotatedTree _lhsOoriginalTree _lhsOupEnv))
_sem_TableRefList_Cons :: T_TableRef ->
                         T_TableRefList ->
                         T_TableRefList
_sem_TableRefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupEnv :: Environment
              _lhsOannotatedTree :: TableRefList
              _lhsOoriginalTree :: TableRefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: TableRef
              _hdIoriginalTree :: TableRef
              _hdIupEnv :: Environment
              _tlIannotatedTree :: TableRefList
              _tlIoriginalTree :: TableRefList
              _tlIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 20, column 7)
              _lhsOupEnv =
                  ({-# LINE 20 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if E.isEmptyEnv _tlIupEnv
                   then _hdIupEnv
                   else
                          either (error . show) id $
                          E.createJoinTrefEnvironment _lhsIcat _hdIupEnv _tlIupEnv E.Inner $ Just []
                   {-# LINE 26856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 26862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 26868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 26874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIupEnv) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupEnv) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRefList_Nil :: T_TableRefList
_sem_TableRefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupEnv :: Environment
              _lhsOannotatedTree :: TableRefList
              _lhsOoriginalTree :: TableRefList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 18, column 9)
              _lhsOupEnv =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 26935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 26941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 26947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 26953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
-- TypeAttributeDef --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeAttributeDef 
         originalTree         : TypeAttributeDef 
   alternatives:
      alternative TypeAttDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data TypeAttributeDef = TypeAttDef (Annotation) (NameComponent) (TypeName)
                      deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TypeAttributeDef :: TypeAttributeDef ->
                        T_TypeAttributeDef
_sem_TypeAttributeDef (TypeAttDef _ann _name _typ) =
    (_sem_TypeAttributeDef_TypeAttDef (_sem_Annotation _ann) _name (_sem_TypeName _typ))
-- semantic domain
type T_TypeAttributeDef = Catalog ->
                          TypeCheckFlags ->
                          (Maybe TypeExtra) ->
                          ( TypeAttributeDef,TypeAttributeDef)
data Inh_TypeAttributeDef = Inh_TypeAttributeDef {_cat_Inh_TypeAttributeDef :: Catalog,_flags_Inh_TypeAttributeDef :: TypeCheckFlags,_imCast_Inh_TypeAttributeDef :: (Maybe TypeExtra)}
data Syn_TypeAttributeDef = Syn_TypeAttributeDef {_annotatedTree_Syn_TypeAttributeDef :: TypeAttributeDef,_originalTree_Syn_TypeAttributeDef :: TypeAttributeDef}
_wrap_TypeAttributeDef :: T_TypeAttributeDef ->
                         Inh_TypeAttributeDef ->
                         Syn_TypeAttributeDef
_wrap_TypeAttributeDef sem (Inh_TypeAttributeDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeAttributeDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_TypeAttributeDef_TypeAttDef :: T_Annotation ->
                                   NameComponent ->
                                   T_TypeName ->
                                   T_TypeAttributeDef
_sem_TypeAttributeDef_TypeAttDef ann_ name_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeAttributeDef
              _lhsOoriginalTree :: TypeAttributeDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 222, column 35)
              _annOtpe =
                  ({-# LINE 222 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 27027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypeAttDef _annIannotatedTree name_ _typIannotatedTree
                   {-# LINE 27033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypeAttDef _annIoriginalTree name_ _typIoriginalTree
                   {-# LINE 27039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TypeAttributeDefList ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeAttributeDefList 
         originalTree         : TypeAttributeDefList 
   alternatives:
      alternative Cons:
         child hd             : TypeAttributeDef 
         child tl             : TypeAttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TypeAttributeDefList = [TypeAttributeDef]
-- cata
_sem_TypeAttributeDefList :: TypeAttributeDefList ->
                            T_TypeAttributeDefList
_sem_TypeAttributeDefList list =
    (Prelude.foldr _sem_TypeAttributeDefList_Cons _sem_TypeAttributeDefList_Nil (Prelude.map _sem_TypeAttributeDef list))
-- semantic domain
type T_TypeAttributeDefList = Catalog ->
                              TypeCheckFlags ->
                              (Maybe TypeExtra) ->
                              ( TypeAttributeDefList,TypeAttributeDefList)
data Inh_TypeAttributeDefList = Inh_TypeAttributeDefList {_cat_Inh_TypeAttributeDefList :: Catalog,_flags_Inh_TypeAttributeDefList :: TypeCheckFlags,_imCast_Inh_TypeAttributeDefList :: (Maybe TypeExtra)}
data Syn_TypeAttributeDefList = Syn_TypeAttributeDefList {_annotatedTree_Syn_TypeAttributeDefList :: TypeAttributeDefList,_originalTree_Syn_TypeAttributeDefList :: TypeAttributeDefList}
_wrap_TypeAttributeDefList :: T_TypeAttributeDefList ->
                             Inh_TypeAttributeDefList ->
                             Syn_TypeAttributeDefList
_wrap_TypeAttributeDefList sem (Inh_TypeAttributeDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeAttributeDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_TypeAttributeDefList_Cons :: T_TypeAttributeDef ->
                                 T_TypeAttributeDefList ->
                                 T_TypeAttributeDefList
_sem_TypeAttributeDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDefList
              _lhsOoriginalTree :: TypeAttributeDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: TypeAttributeDef
              _hdIoriginalTree :: TypeAttributeDef
              _tlIannotatedTree :: TypeAttributeDefList
              _tlIoriginalTree :: TypeAttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 27158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 27164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_TypeAttributeDefList_Nil :: T_TypeAttributeDefList
_sem_TypeAttributeDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDefList
              _lhsOoriginalTree :: TypeAttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 27230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 27236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TypeName ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeName 
         namedType            : Maybe TypeExtra
         originalTree         : TypeName 
   alternatives:
      alternative SimpleTypeName:
         child ann            : Annotation 
         child tn             : Name 
         visit 0:
            local canType     : {[NameComponent] -> [NameComponent]}
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative PrecTypeName:
         child ann            : Annotation 
         child tn             : Name 
         child prec           : {Integer}
         visit 0:
            local canType     : {[NameComponent] -> [NameComponent]}
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative Prec2TypeName:
         child ann            : Annotation 
         child tn             : Name 
         child prec           : {Integer}
         child prec1          : {Integer}
         visit 0:
            local canType     : {[NameComponent] -> [NameComponent]}
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative ArrayTypeName:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local canType     : {[NameComponent] -> [NameComponent]}
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative SetOfTypeName:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local canType     : {[NameComponent] -> [NameComponent]}
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
-}
data TypeName = SimpleTypeName (Annotation) (Name)
              | PrecTypeName (Annotation) (Name) (Integer)
              | Prec2TypeName (Annotation) (Name) (Integer) (Integer)
              | ArrayTypeName (Annotation) (TypeName)
              | SetOfTypeName (Annotation) (TypeName)
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TypeName :: TypeName ->
                T_TypeName
_sem_TypeName (SimpleTypeName _ann _tn) =
    (_sem_TypeName_SimpleTypeName (_sem_Annotation _ann) (_sem_Name _tn))
_sem_TypeName (PrecTypeName _ann _tn _prec) =
    (_sem_TypeName_PrecTypeName (_sem_Annotation _ann) (_sem_Name _tn) _prec)
_sem_TypeName (Prec2TypeName _ann _tn _prec _prec1) =
    (_sem_TypeName_Prec2TypeName (_sem_Annotation _ann) (_sem_Name _tn) _prec _prec1)
_sem_TypeName (ArrayTypeName _ann _typ) =
    (_sem_TypeName_ArrayTypeName (_sem_Annotation _ann) (_sem_TypeName _typ))
_sem_TypeName (SetOfTypeName _ann _typ) =
    (_sem_TypeName_SetOfTypeName (_sem_Annotation _ann) (_sem_TypeName _typ))
-- semantic domain
type T_TypeName = Catalog ->
                  TypeCheckFlags ->
                  (Maybe TypeExtra) ->
                  ( TypeName,(Maybe TypeExtra),TypeName)
data Inh_TypeName = Inh_TypeName {_cat_Inh_TypeName :: Catalog,_flags_Inh_TypeName :: TypeCheckFlags,_imCast_Inh_TypeName :: (Maybe TypeExtra)}
data Syn_TypeName = Syn_TypeName {_annotatedTree_Syn_TypeName :: TypeName,_namedType_Syn_TypeName :: (Maybe TypeExtra),_originalTree_Syn_TypeName :: TypeName}
_wrap_TypeName :: T_TypeName ->
                 Inh_TypeName ->
                 Syn_TypeName
_wrap_TypeName sem (Inh_TypeName _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeName _lhsOannotatedTree _lhsOnamedType _lhsOoriginalTree))
_sem_TypeName_SimpleTypeName :: T_Annotation ->
                               T_Name ->
                               T_TypeName
_sem_TypeName_SimpleTypeName ann_ tn_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tnOtpe :: (Either [TypeError] TypeExtra)
              _canType :: ([NameComponent] -> [NameComponent])
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: Name
              _tnIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 27367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 27373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
                   {-# LINE 27379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 51, column 10)
              _canType =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   \x -> case x of
                      [Nmc nc] -> [Nmc $ T.unpack $ canonicalizeTypeName (tcfDialect _lhsIflags) $ T.pack nc]
                      _ -> x
                   {-# LINE 27387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 63, column 10)
              _tpe =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   mkTypeExtraNN `liftM` catLookupType _lhsIcat (_canType     $ nameComponents _tnIoriginalTree)
                   {-# LINE 27393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SimpleTypeName _annIannotatedTree _tnIannotatedTree
                   {-# LINE 27399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SimpleTypeName _annIoriginalTree _tnIoriginalTree
                   {-# LINE 27405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_PrecTypeName :: T_Annotation ->
                             T_Name ->
                             Integer ->
                             T_TypeName
_sem_TypeName_PrecTypeName ann_ tn_ prec_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tnOtpe :: (Either [TypeError] TypeExtra)
              _canType :: ([NameComponent] -> [NameComponent])
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: Name
              _tnIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 27489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 27495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
                   {-# LINE 27501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 51, column 10)
              _canType =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   \x -> case x of
                      [Nmc nc] -> [Nmc $ T.unpack $ canonicalizeTypeName (tcfDialect _lhsIflags) $ T.pack nc]
                      _ -> x
                   {-# LINE 27509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 77, column 9)
              _tpe =
                  ({-# LINE 77 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   ((\t -> t{tePrecision = Just $ fromIntegral prec_}) . mkTypeExtraNN)
                   `liftM` catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
                   {-# LINE 27516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrecTypeName _annIannotatedTree _tnIannotatedTree prec_
                   {-# LINE 27522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrecTypeName _annIoriginalTree _tnIoriginalTree prec_
                   {-# LINE 27528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_Prec2TypeName :: T_Annotation ->
                              T_Name ->
                              Integer ->
                              Integer ->
                              T_TypeName
_sem_TypeName_Prec2TypeName ann_ tn_ prec_ prec1_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tnOtpe :: (Either [TypeError] TypeExtra)
              _canType :: ([NameComponent] -> [NameComponent])
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: Name
              _tnIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 27613 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 27619 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
                   {-# LINE 27625 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 51, column 10)
              _canType =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   \x -> case x of
                      [Nmc nc] -> [Nmc $ T.unpack $ canonicalizeTypeName (tcfDialect _lhsIflags) $ T.pack nc]
                      _ -> x
                   {-# LINE 27633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 80, column 9)
              _tpe =
                  ({-# LINE 80 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   ((\t -> t{tePrecision = Just $ fromIntegral prec_,
                             teScale = Just $ fromIntegral prec1_})
                         . mkTypeExtraNN)
                   `liftM` catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
                   {-# LINE 27642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Prec2TypeName _annIannotatedTree _tnIannotatedTree prec_ prec1_
                   {-# LINE 27648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Prec2TypeName _annIoriginalTree _tnIoriginalTree prec_ prec1_
                   {-# LINE 27654 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_ArrayTypeName :: T_Annotation ->
                              T_TypeName ->
                              T_TypeName
_sem_TypeName_ArrayTypeName ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _canType :: ([NameComponent] -> [NameComponent])
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 27737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 27743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 51, column 10)
              _canType =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   \x -> case x of
                      [Nmc nc] -> [Nmc $ T.unpack $ canonicalizeTypeName (tcfDialect _lhsIflags) $ T.pack nc]
                      _ -> x
                   {-# LINE 27751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 71, column 9)
              _tpe =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   maybe (Left []) Right _typInamedType
                   >>= Right . (\t -> t{teType = ArrayType $ teType t})
                   {-# LINE 27758 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ArrayTypeName _annIannotatedTree _typIannotatedTree
                   {-# LINE 27764 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ArrayTypeName _annIoriginalTree _typIoriginalTree
                   {-# LINE 27770 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27776 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27782 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27788 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_SetOfTypeName :: T_Annotation ->
                              T_TypeName ->
                              T_TypeName
_sem_TypeName_SetOfTypeName ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _canType :: ([NameComponent] -> [NameComponent])
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 27853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 27859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 51, column 10)
              _canType =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   \x -> case x of
                      [Nmc nc] -> [Nmc $ T.unpack $ canonicalizeTypeName (tcfDialect _lhsIflags) $ T.pack nc]
                      _ -> x
                   {-# LINE 27867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 74, column 9)
              _tpe =
                  ({-# LINE 74 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   maybe (Left []) Right _typInamedType
                   >>= Right . (\t -> t{teType = Pseudo $ SetOfType $ teType t})
                   {-# LINE 27874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetOfTypeName _annIannotatedTree _typIannotatedTree
                   {-# LINE 27880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetOfTypeName _annIoriginalTree _typIoriginalTree
                   {-# LINE 27886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
-- TypeNameList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeNameList 
         originalTree         : TypeNameList 
   alternatives:
      alternative Cons:
         child hd             : TypeName 
         child tl             : TypeNameList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TypeNameList = [TypeName]
-- cata
_sem_TypeNameList :: TypeNameList ->
                    T_TypeNameList
_sem_TypeNameList list =
    (Prelude.foldr _sem_TypeNameList_Cons _sem_TypeNameList_Nil (Prelude.map _sem_TypeName list))
-- semantic domain
type T_TypeNameList = Catalog ->
                      TypeCheckFlags ->
                      (Maybe TypeExtra) ->
                      ( TypeNameList,TypeNameList)
data Inh_TypeNameList = Inh_TypeNameList {_cat_Inh_TypeNameList :: Catalog,_flags_Inh_TypeNameList :: TypeCheckFlags,_imCast_Inh_TypeNameList :: (Maybe TypeExtra)}
data Syn_TypeNameList = Syn_TypeNameList {_annotatedTree_Syn_TypeNameList :: TypeNameList,_originalTree_Syn_TypeNameList :: TypeNameList}
_wrap_TypeNameList :: T_TypeNameList ->
                     Inh_TypeNameList ->
                     Syn_TypeNameList
_wrap_TypeNameList sem (Inh_TypeNameList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeNameList _lhsOannotatedTree _lhsOoriginalTree))
_sem_TypeNameList_Cons :: T_TypeName ->
                         T_TypeNameList ->
                         T_TypeNameList
_sem_TypeNameList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeNameList
              _lhsOoriginalTree :: TypeNameList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: TypeName
              _hdInamedType :: (Maybe TypeExtra)
              _hdIoriginalTree :: TypeName
              _tlIannotatedTree :: TypeNameList
              _tlIoriginalTree :: TypeNameList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 28006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 28012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdInamedType,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_TypeNameList_Nil :: T_TypeNameList
_sem_TypeNameList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeNameList
              _lhsOoriginalTree :: TypeNameList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28078 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28084 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28090 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28096 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- VarDef ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : VarDef 
         originalTree         : VarDef 
   alternatives:
      alternative VarDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         child value          : {Maybe ScalarExpr}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ParamAlias:
         child ann            : Annotation 
         child name           : {NameComponent}
         child i              : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative VarAlias:
         child ann            : Annotation 
         child name           : {NameComponent}
         child aliased        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data VarDef = VarDef (Annotation) (NameComponent) (TypeName) ((Maybe ScalarExpr))
            | ParamAlias (Annotation) (NameComponent) (Integer)
            | VarAlias (Annotation) (NameComponent) (Name)
            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_VarDef :: VarDef ->
              T_VarDef
_sem_VarDef (VarDef _ann _name _typ _value) =
    (_sem_VarDef_VarDef (_sem_Annotation _ann) _name (_sem_TypeName _typ) _value)
_sem_VarDef (ParamAlias _ann _name _i) =
    (_sem_VarDef_ParamAlias (_sem_Annotation _ann) _name _i)
_sem_VarDef (VarAlias _ann _name _aliased) =
    (_sem_VarDef_VarAlias (_sem_Annotation _ann) _name (_sem_Name _aliased))
-- semantic domain
type T_VarDef = Catalog ->
                TypeCheckFlags ->
                (Maybe TypeExtra) ->
                ( VarDef,VarDef)
data Inh_VarDef = Inh_VarDef {_cat_Inh_VarDef :: Catalog,_flags_Inh_VarDef :: TypeCheckFlags,_imCast_Inh_VarDef :: (Maybe TypeExtra)}
data Syn_VarDef = Syn_VarDef {_annotatedTree_Syn_VarDef :: VarDef,_originalTree_Syn_VarDef :: VarDef}
_wrap_VarDef :: T_VarDef ->
               Inh_VarDef ->
               Syn_VarDef
_wrap_VarDef sem (Inh_VarDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_VarDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_VarDef_VarDef :: T_Annotation ->
                     NameComponent ->
                     T_TypeName ->
                     (Maybe ScalarExpr) ->
                     T_VarDef
_sem_VarDef_VarDef ann_ name_ typ_ value_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: VarDef
              _lhsOoriginalTree :: VarDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 226, column 21)
              _annOtpe =
                  ({-# LINE 226 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 28186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarDef _annIannotatedTree name_ _typIannotatedTree value_
                   {-# LINE 28192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarDef _annIoriginalTree name_ _typIoriginalTree value_
                   {-# LINE 28198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_VarDef_ParamAlias :: T_Annotation ->
                         NameComponent ->
                         Integer ->
                         T_VarDef
_sem_VarDef_ParamAlias ann_ name_ i_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: VarDef
              _lhsOoriginalTree :: VarDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 223, column 25)
              _annOtpe =
                  ({-# LINE 223 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 28273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamAlias _annIannotatedTree name_ i_
                   {-# LINE 28279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamAlias _annIoriginalTree name_ i_
                   {-# LINE 28285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_VarDef_VarAlias :: T_Annotation ->
                       NameComponent ->
                       T_Name ->
                       T_VarDef
_sem_VarDef_VarAlias ann_ name_ aliased_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _aliasedOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: VarDef
              _lhsOoriginalTree :: VarDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _aliasedOcat :: Catalog
              _aliasedOflags :: TypeCheckFlags
              _aliasedOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _aliasedIannotatedTree :: Name
              _aliasedIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 224, column 23)
              _aliasedOtpe =
                  ({-# LINE 224 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 28346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 225, column 23)
              _annOtpe =
                  ({-# LINE 225 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 28352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarAlias _annIannotatedTree name_ _aliasedIannotatedTree
                   {-# LINE 28358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarAlias _annIoriginalTree name_ _aliasedIoriginalTree
                   {-# LINE 28364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _aliasedOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _aliasedOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _aliasedOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _aliasedIannotatedTree,_aliasedIoriginalTree) =
                  aliased_ _aliasedOcat _aliasedOflags _aliasedOimCast _aliasedOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- VarDefList --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : VarDefList 
         originalTree         : VarDefList 
   alternatives:
      alternative Cons:
         child hd             : VarDef 
         child tl             : VarDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type VarDefList = [VarDef]
-- cata
_sem_VarDefList :: VarDefList ->
                  T_VarDefList
_sem_VarDefList list =
    (Prelude.foldr _sem_VarDefList_Cons _sem_VarDefList_Nil (Prelude.map _sem_VarDef list))
-- semantic domain
type T_VarDefList = Catalog ->
                    TypeCheckFlags ->
                    (Maybe TypeExtra) ->
                    ( VarDefList,VarDefList)
data Inh_VarDefList = Inh_VarDefList {_cat_Inh_VarDefList :: Catalog,_flags_Inh_VarDefList :: TypeCheckFlags,_imCast_Inh_VarDefList :: (Maybe TypeExtra)}
data Syn_VarDefList = Syn_VarDefList {_annotatedTree_Syn_VarDefList :: VarDefList,_originalTree_Syn_VarDefList :: VarDefList}
_wrap_VarDefList :: T_VarDefList ->
                   Inh_VarDefList ->
                   Syn_VarDefList
_wrap_VarDefList sem (Inh_VarDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_VarDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_VarDefList_Cons :: T_VarDef ->
                       T_VarDefList ->
                       T_VarDefList
_sem_VarDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDefList
              _lhsOoriginalTree :: VarDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: VarDef
              _hdIoriginalTree :: VarDef
              _tlIannotatedTree :: VarDefList
              _tlIoriginalTree :: VarDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 28483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 28489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_VarDefList_Nil :: T_VarDefList
_sem_VarDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDefList
              _lhsOoriginalTree :: VarDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- WithQuery ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : WithQuery 
         originalTree         : WithQuery 
   alternatives:
      alternative WithQuery:
         child ann            : Annotation 
         child name           : {NameComponent}
         child colAliases     : {Maybe [NameComponent]}
         child ex             : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data WithQuery = WithQuery (Annotation) (NameComponent) ((Maybe [NameComponent])) (QueryExpr)
               deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_WithQuery :: WithQuery ->
                 T_WithQuery
_sem_WithQuery (WithQuery _ann _name _colAliases _ex) =
    (_sem_WithQuery_WithQuery (_sem_Annotation _ann) _name _colAliases (_sem_QueryExpr _ex))
-- semantic domain
type T_WithQuery = Catalog ->
                   TypeCheckFlags ->
                   (Maybe TypeExtra) ->
                   ( WithQuery,WithQuery)
data Inh_WithQuery = Inh_WithQuery {_cat_Inh_WithQuery :: Catalog,_flags_Inh_WithQuery :: TypeCheckFlags,_imCast_Inh_WithQuery :: (Maybe TypeExtra)}
data Syn_WithQuery = Syn_WithQuery {_annotatedTree_Syn_WithQuery :: WithQuery,_originalTree_Syn_WithQuery :: WithQuery}
_wrap_WithQuery :: T_WithQuery ->
                  Inh_WithQuery ->
                  Syn_WithQuery
_wrap_WithQuery sem (Inh_WithQuery _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_WithQuery _lhsOannotatedTree _lhsOoriginalTree))
_sem_WithQuery_WithQuery :: T_Annotation ->
                           NameComponent ->
                           (Maybe [NameComponent]) ->
                           T_QueryExpr ->
                           T_WithQuery
_sem_WithQuery_WithQuery ann_ name_ colAliases_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _exOouterDownEnv :: (Maybe Environment)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe [TypeExtra])
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: WithQuery
              _lhsOoriginalTree :: WithQuery
              _annOcat :: Catalog
              _annOflags :: TypeCheckFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: QueryExpr
              _exIoriginalTree :: QueryExpr
              _exIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 29, column 15)
              _exOouterDownEnv =
                  ({-# LINE 29 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 28646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 35, column 9)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 28652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 36, column 9)
              _exOexpectedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (map snd) _exIupType
                   {-# LINE 28658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 842, column 27)
              _exOassignmentCastContext =
                  ({-# LINE 842 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 28664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQuery _annIannotatedTree name_ colAliases_ _exIannotatedTree
                   {-# LINE 28670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQuery _annIoriginalTree name_ colAliases_ _exIoriginalTree
                   {-# LINE 28676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOexpectedType _exOflags _exOimCast _exOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- WithQueryList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : WithQueryList 
         originalTree         : WithQueryList 
   alternatives:
      alternative Cons:
         child hd             : WithQuery 
         child tl             : WithQueryList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type WithQueryList = [WithQuery]
-- cata
_sem_WithQueryList :: WithQueryList ->
                     T_WithQueryList
_sem_WithQueryList list =
    (Prelude.foldr _sem_WithQueryList_Cons _sem_WithQueryList_Nil (Prelude.map _sem_WithQuery list))
-- semantic domain
type T_WithQueryList = Catalog ->
                       TypeCheckFlags ->
                       (Maybe TypeExtra) ->
                       ( WithQueryList,WithQueryList)
data Inh_WithQueryList = Inh_WithQueryList {_cat_Inh_WithQueryList :: Catalog,_flags_Inh_WithQueryList :: TypeCheckFlags,_imCast_Inh_WithQueryList :: (Maybe TypeExtra)}
data Syn_WithQueryList = Syn_WithQueryList {_annotatedTree_Syn_WithQueryList :: WithQueryList,_originalTree_Syn_WithQueryList :: WithQueryList}
_wrap_WithQueryList :: T_WithQueryList ->
                      Inh_WithQueryList ->
                      Syn_WithQueryList
_wrap_WithQueryList sem (Inh_WithQueryList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_WithQueryList _lhsOannotatedTree _lhsOoriginalTree))
_sem_WithQueryList_Cons :: T_WithQuery ->
                          T_WithQueryList ->
                          T_WithQueryList
_sem_WithQueryList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: WithQueryList
              _lhsOoriginalTree :: WithQueryList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: WithQuery
              _hdIoriginalTree :: WithQuery
              _tlIannotatedTree :: WithQueryList
              _tlIoriginalTree :: WithQueryList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 28795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 28801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28813 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28819 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_WithQueryList_Nil :: T_WithQueryList
_sem_WithQueryList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: WithQueryList
              _lhsOoriginalTree :: WithQueryList
              -- self rule
              _annotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
